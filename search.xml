<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「AGC001E」BBQ Hard</title>
    <url>/2020/02/04/%E3%80%8CAGC001E%E3%80%8DBBQ-Hard/</url>
    <content><![CDATA[<p>题目链接：<a href="https://atcoder.jp/contests/agc001/tasks/agc001_e" target="_blank" rel="noopener">https://atcoder.jp/contests/agc001/tasks/agc001_e</a>。</p>
<a id="more"></a>
<p>显然答案就是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}\sum_{j=i+1}^{n}\binom{a_i+a_j+b_i+b_j}{a_i+a_j}</script><p>可以很简单的把下标变一下：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}\sum_{j=1}^{n}\binom{a_i+a_j+b_i+b_j}{a_i+a_j}</script><p>得到这个答案在处理一下即可。</p>
<p>考虑这个东西的组合意义，组合数有一个意义就是说路径的方案数，我们把它看成平面上的点$(a_i,b_i)$，对于每个点建一个对称的点$(-a_i,-b_i)$，那么上面那个组合数就是$(-a_i,-b_i)$到$(a_j,b_j)$的方案数。</p>
<p>总答案就是第三象限任意一个点到第一象限任意一个点的方案数。</p>
<p>因为值域不大，直接$\rm dp$即可。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">5e8</span>+<span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn],g[<span class="number">4020</span>][<span class="number">4020</span>],fac[maxn],ifac[maxn],inv[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(x,y) g[x+2003][y+2003]</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">2e4</span>;fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) {</span><br><span class="line">        fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>) inv[i]=<span class="number">1l</span>l*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">        ifac[i]=<span class="number">1l</span>l*ifac[i<span class="number">-1</span>]*inv[i]%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),read(b[i]),f(-a[i],-b[i])++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-2000</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">-2000</span>;j&lt;=<span class="number">2000</span>;j++)</span><br><span class="line">            f(i,j)=((f(i,j)+f(i<span class="number">-1</span>,j))%mod+f(i,j<span class="number">-1</span>))%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+f(a[i],b[i]))%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans-c(<span class="number">2</span>*(a[i]+b[i]),a[i]*<span class="number">2</span>)+mod)%mod;</span><br><span class="line">    write(<span class="number">1l</span>l*ans*inv2%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ5483」Balanced Beam</title>
    <url>/2020/01/20/%E3%80%8CBZOJ5483%E3%80%8DBalanced-Beam/</url>
    <content><![CDATA[<p>题目链接：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5483" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=5483</a>。</p>
<a id="more"></a>
<p>首先假设$f_i$表示从$i$出发最优策略下的期望最大值，那么根据定义可以写出式子：</p>
<script type="math/tex; mode=display">
f_i=\max(a_i,\frac{f_{i-1}+f_{i+1}}{2})</script><p>显然最后$f$肯定都是确定了的，也就是说，对于一个点$i$，你每次到这个点都一定会选择动或者不动，这个决策是根据这个点来的。</p>
<p>所以假设你当前要算$x$的答案，并且最靠近$x$的决策为不动的点为$l,r$，那么显然$(l,r)$都会选择动，也就是说式子就是：</p>
<script type="math/tex; mode=display">
f_i=\frac{f_{i+1}+f_{i-1}}{2}</script><p>显然这是个等差数列的形式，如果我们把$(i,a_i)$看作平面上的点，显然所有的$f$值都在凸包上。</p>
<p>复杂度$O(n)$，注意这题有点卡精度。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],top;</span><br><span class="line">pii sta[maxn];</span><br><span class="line"></span><br><span class="line">pii <span class="keyword">operator</span> - (pii a,pii b) {<span class="keyword">return</span> mp(a.fr-b.fr,a.sc-b.sc);}</span><br><span class="line">ll <span class="keyword">operator</span> * (pii a,pii b) {<span class="keyword">return</span> <span class="number">1l</span>l*a.fr*b.sc-a.sc*b.fr;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),a[i]*=<span class="number">1e5</span>; <span class="comment">// 这样可以保证精度</span></span><br><span class="line">    sta[++top]=mp(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) {</span><br><span class="line">        pii x=mp(i,a[i]);</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;(x-sta[top<span class="number">-1</span>])*(sta[top]-sta[top<span class="number">-1</span>])&lt;<span class="number">0</span>) top--;</span><br><span class="line">        sta[++top]=x;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">while</span>(sta[p+<span class="number">1</span>].fr&lt;=i) p++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)(sta[p].sc+<span class="number">1.0</span>*(sta[p+<span class="number">1</span>].sc-sta[p].sc)*(i-sta[p].fr)/(sta[p+<span class="number">1</span>].fr-sta[p].fr)));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ4833」最小公倍佩尔数</title>
    <url>/2020/01/19/%E3%80%8CBZOJ4833%E3%80%8D%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E4%BD%A9%E5%B0%94%E6%95%B0/</url>
    <content><![CDATA[<p>题目链接：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4833" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4833</a>。</p>
<p>巧妙的构造</p>
<a id="more"></a>
<p>首先根据特征根或者打表可以知道：</p>
<script type="math/tex; mode=display">
f_n=
\begin{cases}
0&n=0\\
1&n=1\\
2f_{n-1}+f_{n-2}&{\rm otherwise}
\end{cases}</script><p>那么这个东西的性质其实和斐波那契数列是一样的，所以很容易得到：</p>
<script type="math/tex; mode=display">
\gcd(f_i,f_j)=f_{\gcd(i,j)}</script><p>有一个$\rm min-max$容斥的拓展是这样的：</p>
<script type="math/tex; mode=display">
{\rm lcm} (S)=\prod_{T\subseteq S,T\ne \phi}\gcd(T)^{(-1)^{|T|-1}}</script><p>考虑每个质因数就可以知道这个东西和$\rm min-max$容斥等价。</p>
<p>那么容易得到：</p>
<script type="math/tex; mode=display">
g(i)=\prod_{T\subseteq S}f(\gcd(T))^{(-1)^{|T|-1}}</script><p>很容易想到枚举$\gcd$的答案然后套莫比乌斯反演，但是这样很不好搞。</p>
<p>注意到这样的瓶颈是，如果我们枚举答案，那么我们就要算$\gcd$恰好等于$x$的贡献，如果我们能通过一种方法搞成，$x|\gcd$的集合都有贡献就好搞了，考虑构造：</p>
<script type="math/tex; mode=display">
f_i=\prod_{d|i}h_d</script><p>显然$h$可以很快的算出来的，因为我们知道$f$，所以$g$可以写成：</p>
<script type="math/tex; mode=display">
g(i)=\prod_{d=1}^{i}h_d^{\sum_{T\subseteq S,T\ne \phi}[d|\gcd(T)](-1)^{|T|-1}}</script><p>注意到假设我们硬点一个$d$的倍数$x$，那么其他$d$的倍数的子集$s$和$s\cup x$会两两抵消，所以指数最后会剩下个$1$，那么：</p>
<script type="math/tex; mode=display">
g(i)=\prod_{d=1}^{i}h_d</script><p>复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,mod,f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(mod);</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>,f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) f[i]=(<span class="number">2l</span>l*f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">int</span> t=qpow(f[i],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i)</span><br><span class="line">            f[j]=<span class="number">1l</span>l*f[j]*t%mod;</span><br><span class="line">    }</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=<span class="number">1l</span>l*f[i<span class="number">-1</span>]*f[i]%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+<span class="number">1l</span>l*f[i]*i%mod)%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);</span><br><span class="line">    <span class="keyword">while</span>(t--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1288F」Red-Blue Graph</title>
    <url>/2020/01/18/%E3%80%8CCF1288F%E3%80%8DRed-Blue-Graph/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1288/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1288/problem/F</a>。</p>
<p>网络流建模太难了，wsl。</p>
<a id="more"></a>
<p>考虑网络流建模，把二分图上的点全建出来，边弄成容量为$1$的<strong>双向</strong>边，那么如果这条边是从左流到右的，我们看作是红色的，从右到左看作蓝色，没有流量就是无色，并且把红蓝的费用标上（因为要求最小费用，所以没可能两条边都有流量）。</p>
<p>那么对于左边的点，如果它是红色的，就说明一定要多流出去一条边，那么我们就从源点向他连一条边，容量无穷费用为$0$，并且流量下界是$1$；如果是蓝色的，就向汇点连同样的边。</p>
<p>右边同理，然后跑最小费用可行流就是答案。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,k,a,b;</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> head[maxn],tot=<span class="number">1</span>,S,T,dis[maxn],vis[maxn],id[maxn],pre[maxn],min_cost,max_flow,ss,tt,ans,d[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w,c;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span> </span>{e[++tot]=(edge){v,head[u],w,c},head[u]=tot;}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span> </span>{add(u,v,w,c),add(v,u,<span class="number">0</span>,-c);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span> </span>{ans+=c,d[u]--,d[v]++,ins(u,v,w,c);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">63</span>,<span class="number">4</span>*(tt+<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q;q.push(S),dis[S]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop(),vis[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(e[i].w&amp;&amp;dis[v=e[i].to]&gt;dis[x]+e[i].c) {</span><br><span class="line">                pre[v]=x,id[v]=i,dis[v]=dis[x]+e[i].c;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) q.push(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(dis[T]&gt;<span class="number">1e9</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=T;max_flow++;</span><br><span class="line">    <span class="keyword">while</span>(x) {</span><br><span class="line">        e[id[x]].w--,e[id[x]^<span class="number">1</span>].w++;</span><br><span class="line">        x=pre[x];</span><br><span class="line">    }</span><br><span class="line">    min_cost+=dis[T];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(k),read(a),read(b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s+<span class="number">1</span>,t+<span class="number">1</span>);S=n+m+<span class="number">1</span>,T=n+m+<span class="number">2</span>,ss=T+<span class="number">1</span>,tt=ss+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=k;i++) read(x),read(y),ins(x,y+n,<span class="number">1</span>,a),ins(y+n,x,<span class="number">1</span>,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'R'</span>) ins1(ss,i,k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'B'</span>) ins1(i,tt,k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> ins(ss,i,k,<span class="number">0</span>),ins(i,tt,k,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span>(t[i]==<span class="string">'B'</span>) ins1(ss,i+n,k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t[i]==<span class="string">'R'</span>) ins1(i+n,tt,k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> ins(ss,i+n,k,<span class="number">0</span>),ins(i+n,tt,k,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;ins(tt,ss,inf,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m+<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(d[i]&lt;<span class="number">0</span>) ins(i,T,-d[i],<span class="number">0</span>),p-=d[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d[i]&gt;<span class="number">0</span>) ins(S,i,+d[i],<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(spfa()) ;</span><br><span class="line">    <span class="keyword">if</span>(max_flow!=p) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">    write(ans+min_cost);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">        <span class="keyword">if</span>(!e[i*<span class="number">4</span>+<span class="number">2</span>].w) <span class="built_in">putchar</span>(<span class="string">'R'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!e[i*<span class="number">4</span>+<span class="number">4</span>].w) <span class="built_in">putchar</span>(<span class="string">'B'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'U'</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1257G」Divisor Set</title>
    <url>/2020/01/16/%E3%80%8CCF1257G%E3%80%8DDivisor-Set/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1257/G" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1257/G</a>。</p>
<a id="more"></a>
<p>如果我们把每个能组成的数看成一个点，那么这些点和约数关系就构成了偏序集，答案就是最长反链。</p>
<p>由$\rm Dilworth$定理可知，最长反链等于最小链覆盖，所以只需求最小链覆盖。</p>
<p>我们把点按照质因子个数分层，那么显然一层之内没有连边，并且只会向下一层连边（跨层连的边不优，没有意义）。</p>
<p>所以最小链覆盖就是最多那一层的点的个数。</p>
<p>假设第$i$个质数有$a_i$个，那么答案的生成函数就是：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{\infty}\sum_{i=0}^{a_i}x^i</script><p>也就是一堆$1+x+x^2+\cdots +x^k$的乘积，注意到系数都是一，容易发现乘出来的多项式系数是对称的，并且是单峰的，所以最大的那个在中间那一项，利用分治算出这个多项式之后直接输出就行了。</p>
<p>复杂度$O(n\log ^2 n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[maxn],s[maxn],cnt;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; t;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> pos[maxn],w[maxn],bit,N,mxn;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(mxn=<span class="number">1</span>;mxn&lt;=n&lt;&lt;<span class="number">1</span>;mxn&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/mxn);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;mxn;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;=l;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2</span>][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=mxn&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                r[j+k]=(x+y)%mod,r[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        <span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);reverse(r+<span class="number">1</span>,r+N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;        </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> {</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; a;</span><br><span class="line"> </span><br><span class="line">    poly () {a.clear();}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> x) {<span class="keyword">return</span> a[x];}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{<span class="keyword">return</span> a.size();}</span><br><span class="line"> </span><br><span class="line">    poly <span class="keyword">operator</span> * (poly x) {</span><br><span class="line">        init(size()+x.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size();i++) c[<span class="number">0</span>][i]=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x.size();i++) c[<span class="number">1</span>][i]=x[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=size();i&lt;N;i++) c[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x.size();i&lt;N;i++) c[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">        ntt(c[<span class="number">0</span>],<span class="number">1</span>),ntt(c[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) c[<span class="number">0</span>][i]=<span class="number">1l</span>l*c[<span class="number">0</span>][i]*c[<span class="number">1</span>][i]%mod;</span><br><span class="line">        ntt(c[<span class="number">0</span>],<span class="number">-1</span>);</span><br><span class="line">        poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size()+x.size();i++) res.a.pb(c[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="function">poly <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">    poly res;</span><br><span class="line">    <span class="keyword">if</span>(l==r) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=a[l];i++) res.a.pb(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> L=l,R=r,m=l;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R) {</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[mid]-s[l<span class="number">-1</span>]&gt;=(s[r]-s[l<span class="number">-1</span>])/<span class="number">2</span>) R=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> L=mid+<span class="number">1</span>,m=mid;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> solve(l,m)*solve(m+<span class="number">1</span>,r);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) read(x),t[x]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:t) a[++cnt]=x.sc,s[cnt]=a[cnt];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">    poly ans=solve(<span class="number">1</span>,cnt);</span><br><span class="line">    write(ans[n/<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>NTT</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1153F」Serval and Bonus Problem</title>
    <url>/2020/01/10/%E3%80%8CCF1153F%E3%80%8DServal-and-Bonus-Problem/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1153/F" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1153/F</a>。</p>
<p>吓人的题。。其实也没什么难度。</p>
<a id="more"></a>
<p>首先显然所有点都是均匀等概率分布的，所以这$2n-1$段每段期望长度是$\dfrac{l}{2n-1}$，那么我们只需要关心相对位置，然后算期望有多少段满足条件即可。</p>
<p>那么问题就转化成了离散的，就比较简单了，设$f_{i,j}$表示填了$i$个点了，前面都是合法匹配，然后多出来了$j$个左端点。</p>
<p>随便转移一下就行了，对于$i,j$这个状态，如果$j\geqslant k$，那么就有$f_{i,j}\cdot f_{2n-i,j}\cdot j!$种情况这一段合法，$f_{2n-i,j}$是后面的填法，那么此时$j$表示多出来的右端点，阶乘是让前后的端点匹配，统计一下就好了。</p>
<p>复杂度$O(n^2)$。</p>
<p>然后写完之后看到了一个暴算积分的做法。。。<a href="https://www.cnblogs.com/cj-chd/p/10715436.html" target="_blank" rel="noopener">链接在这里</a>，我就不写<del>(抄)</del>了，中间有一个叫做第一类欧拉积分的玩意，其他部分都是简单运算，<del>(太棒了，学到许多)</del>，而且复杂度比较优秀，是$O(n\log n)$的。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,l,f[<span class="number">4002</span>][<span class="number">2002</span>],ans,fac[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),read(l);l=<span class="number">1l</span>l*l*qpow(n*<span class="number">2</span>+<span class="number">1</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=min(n,i);j++) </span><br><span class="line">            f[i][j]=((j?f[i<span class="number">-1</span>][j<span class="number">-1</span>]:<span class="number">0</span>)+<span class="number">1l</span>l*f[i<span class="number">-1</span>][j+<span class="number">1</span>]*(j+<span class="number">1</span>)%mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;=min(n,i);j++)</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*f[i][j]*f[n*<span class="number">2</span>-i][j]%mod*fac[j]%mod)%mod;</span><br><span class="line">    ans=<span class="number">1l</span>l*ans*qpow(f[n*<span class="number">2</span>][<span class="number">0</span>],mod<span class="number">-2</span>)%mod*l%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>「CF1194F」Crossword Expert</title>
    <url>/2020/01/08/%E3%80%8CCF1194F%E3%80%8DCrossword-Expert/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1194/F" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1194/F</a>。</p>
<a id="more"></a>
<p>假设能恰好搞出$k$个的概率是$p_k$，那么答案就是$\sum kp_k$。</p>
<p>有一个很经典的套路，就是说如果你把概率做后缀和，设成$p_k$表示搞出至少$k$个的概率，答案就是$\sum p_k$，这时候$p_k$就会好算一些。</p>
<p>可以直接把式子写出来了：</p>
<script type="math/tex; mode=display">
p_k=2^{-k}\sum_{i=0}^{T-s_k}\binom{k}{i}</script><p>$s_k$是前缀和。</p>
<p>那么现在就是要算$f_{n,m}=\sum _{i=0}^{n}\binom{m}{i}$。</p>
<p>注意到我们要算的$f$第一维递减，而第二维递增，并且两维都是$O(n)$（因为第一维如果过大可以直接整成$n$，显然答案不变）。</p>
<p>首先明显$f$可以$O(1)$的让第一维减一：$f_{n,m}=f_{n+1,m}-\binom{m}{n+1}$。</p>
<p>第二维也比较简单，把组合数的递推式套进去就行了：</p>
<script type="math/tex; mode=display">
\begin{align}
f_{n,m}&=\sum_{i=0}^{n}\binom{m-1}{i-1}+\binom{m-1}{i}\\
&=f_{n-1,m-1}+f_{n,m-1}\\
&=2f_{n,m-1}-\binom{m-1}{n}
\end{align}</script><p>所以复杂度$O(n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">5e8</span>+<span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> s[maxn],n,T,fac[maxn],ifac[maxn],inv[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span>) inv[i]=<span class="number">1l</span>l*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">        fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        ifac[i]=<span class="number">1l</span>l*ifac[i<span class="number">-1</span>]*inv[i]%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b||b&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(T);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) read(x),s[i]=s[i<span class="number">-1</span>]+x;</span><br><span class="line">    <span class="keyword">int</span> a=min(T-s[<span class="number">1</span>],n),b=<span class="number">1</span>,ans=<span class="number">0</span>,res=<span class="number">0</span>,iv=inv2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=a;i++) res=(res+c(b,i))%mod;ans=(ans+<span class="number">1l</span>l*iv*res%mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">while</span>(a&gt;T-s[i]&amp;&amp;a&gt;=<span class="number">0</span>) res=(res-c(b,a)+mod)%mod,a--;</span><br><span class="line">        res=(<span class="number">2l</span>l*res%mod-c(b,a)+mod)%mod;b++;</span><br><span class="line">        iv=<span class="number">1l</span>l*iv*inv2%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*iv*res%mod)%mod;</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>「CF1251F」Red-White Fence</title>
    <url>/2020/01/07/%E3%80%8CCF1251F%E3%80%8DRed-White-Fence/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1251/F" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1251/F</a>。</p>
<a id="more"></a>
<p>首先枚举红色的矩形的高，假设是$s$，然后在进行处理。</p>
<p>假设要求的周长是$c$，那么也就是说要放$(c-2s-2)/2$个白色的矩形。</p>
<p>所以我们就把问题转化为了求放置$x$个白色矩形的方案数。</p>
<p>注意到如果一种高度只有一个，那么可以任意的放左边或右边；而如果大于等于两个，那么可以同时放左边右边，但是一边最多一个。</p>
<p>假设第一种的个数为$a$，第二种的个数为$b$，那么我们枚举用了多少个第一种，可以得到答案：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^{x}\binom{a}{i}2^i\cdot \binom{2b}{x-i}</script><p>解释下，从$2b$里选$i$个是因为我们把一个可以拆成两个状态：左边或右边。</p>
<p>显然卷积一下就可以预处理所有$x$的答案，复杂度就是$O(nk\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2.5e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,a[maxn],b[<span class="number">12</span>],q,t[maxn],ans[maxn],s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[maxn],g[maxn],fac[maxn],ifac[maxn],mx;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> w[maxn],pos[maxn],N,bit;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">(<span class="keyword">int</span> l)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;=l&lt;&lt;<span class="number">1</span>;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                r[j+k]=(x+y)%mod,r[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        <span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);reverse(r+<span class="number">1</span>,r+N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=x) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!s[a[i]]) m++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[a[i]]==<span class="number">1</span>) cnt++,m--;</span><br><span class="line">        s[a[i]]++;</span><br><span class="line">    }<span class="keyword">int</span> l=(mx-x*<span class="number">2</span><span class="number">-2</span>)&gt;&gt;<span class="number">1</span>;gen(l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l;i++) {</span><br><span class="line">        f[i]=<span class="number">1l</span>l*c(m,i)*qpow(<span class="number">2</span>,i)%mod;</span><br><span class="line">        g[i]=c(cnt*<span class="number">2</span>,i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;N;i++) f[i]=g[i]=<span class="number">0</span>;</span><br><span class="line">    ntt(f,<span class="number">1</span>),ntt(g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) f[i]=<span class="number">1l</span>l*f[i]*g[i]%mod;</span><br><span class="line">    ntt(f,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        <span class="keyword">if</span>(t[i]&gt;=x*<span class="number">2</span>+<span class="number">2</span>) ans[i]=(ans[i]+f[(t[i]-x*<span class="number">2</span><span class="number">-2</span>)&gt;&gt;<span class="number">1</span>])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[a[i]]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) read(b[i]);</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) read(t[i]),mx=max(mx,t[i]);</span><br><span class="line"> </span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    ifac[n]=qpow(fac[n],mod<span class="number">-2</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) solve(b[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) write(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>「CF1267G」Game Relics</title>
    <url>/2020/01/06/%E3%80%8CCF1267G%E3%80%8DGame-Relics/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1267/G" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1267/G</a>。</p>
<p>我又被智商题吊打了</p>
<a id="more"></a>
<p>首先策略显然是先随机买，然后当随机买不划算的时候再把剩下的按原价买完。</p>
<p>注意到剩下那些可以按任意顺序买，所以我们可以把这个看做是一个随机的过程，即随机从剩下的选一个按原价买。</p>
<p>那么现在无论是哪种情况，都是随机买一个没有的，所以每种东西数量相同的情况都是等概率出现的。</p>
<p>对于一个状态$s$，假设大小为$k$，那么随机按原价买的代价是$\dfrac{S-\sum _{i=1}^k a_i}{n-k}$，随机买的代价是$(\dfrac{n}{n-k}+1)\cdot \dfrac{x}{2}$，其中$S$是$n$个的和。</p>
<p>所以对于一个状态，我们只需要关心它有几个，以及加起来是多少即可。</p>
<p>显然可以背包算出大小为$k$，加起来为$s$的方案数，假设为$f_{s,k}$，那么答案就是：</p>
<script type="math/tex; mode=display">
\sum \frac{f_{s,k}}{\binom{n}{k}}\cdot \min(\frac{S-s}{n-k},(\frac{n}{n-k}+1)\frac{x}{2})</script><p>复杂度$O(n^2v)$。</p>
<p>注意中间的运算可能很大，由于精度要求不高，用$\rm double$存就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll __int128</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> f[<span class="number">102</span>][<span class="number">10002</span>],c[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],x;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(x);<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),s+=a[i];</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;~j;j--) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=s;k++)</span><br><span class="line">                f[j][k]=f[j][k]+(k&gt;=a[i]&amp;&amp;j?f[j<span class="number">-1</span>][k-a[i]]:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) c[i][j]=c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s;j++) </span><br><span class="line">            ans+=<span class="number">1.0</span>*f[i][j]/c[n][i]*min(<span class="number">1.0</span>*(s-j)/(n-i),<span class="number">1.0</span>*(<span class="number">1.0</span>*n/(n-i)+<span class="number">1</span>)*x/<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>「CF1270H」Number of Components</title>
    <url>/2020/01/03/%E3%80%8CCF1270H%E3%80%8DNumber-of-Components/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1270/H" target="_blank" rel="noopener"></a><a href="https://codeforces.com/problemset/problem/1270/H" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1270/H</a>。</p>
<a id="more"></a>
<p>首先可以发现连通块一定是一段一段的，因为假设$i,j​$有一条边（$i&lt;j,a_i&lt;a_j​$)，那么对于中间一个点$k​$，他要么和$i​$相连，要么和$j​$相连。</p>
<p>然后如果在$x$处前面和后面不连通了，那么一定满足此处的 前缀最小值 大于 后缀最大值。</p>
<p>那么只需要维护有几处满足这个条件即可。</p>
<p>假设$h$是任意选定的值，令$b_i=[a_i\geqslant h]$，即大于等于为$1$，否则为$0$。</p>
<p>令$a_0=\infty,a_{n+1}=0$，那么如果$b_i$是$11…10…0$这样的形式就说明有个断点。</p>
<p>只考虑$h=a_i$的情况，那么断点一定两两不同，只需要统计有多少个$h$满足条件即可。</p>
<p>设$f_x$表示$h=x$时$b$数组有多少个相邻的不同的对，那么可以发现对于每个$a_i\sim a_{i+1}$的差距，会对$h\in [a_i+1,a_{i+1}]$的所有$f$造成$1$的贡献。</p>
<p>每次修改，假设是$a_i=x$，那么我们就取消激活$a_i$，再激活$x$即可。</p>
<p>以上所有操作都可以离散化之后拿线段树维护。</p>
<p>所以总复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn],b[maxn],c[maxn],r[maxn],m;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> cnt[maxn],mn[maxn],tag[maxn];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v)</span> </span>{mn[p]+=v,tag[p]+=v;}</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{push(ls,tag[p]),push(rs,tag[p]),tag[p]=<span class="number">0</span>;}</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        mn[p]=min(mn[ls],mn[rs]);cnt[p]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(mn[ls]==mn[p]) cnt[p]+=cnt[ls];</span><br><span class="line">        <span class="keyword">if</span>(mn[rs]==mn[p]) cnt[p]+=cnt[rs];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">activate</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> cnt[p]+=v,mn[p]+=(-v)*inf,<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) activate(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> activate(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        update(p);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> push(p,v),<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,y,v);</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) modify(rs,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">        update(p);</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) swap(x,y);x++;</span><br><span class="line">    T.modify(<span class="number">1</span>,<span class="number">1</span>,m,x,y,v);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),r[i]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) read(b[i]),read(c[i]),r[i+n]=c[i];</span><br><span class="line">    a[n+<span class="number">1</span>]=r[n+q+<span class="number">1</span>]=<span class="number">0</span>,a[<span class="number">0</span>]=r[n+q+<span class="number">2</span>]=inf;</span><br><span class="line">    sort(r+<span class="number">1</span>,r+n+q+<span class="number">3</span>);m=unique(r+<span class="number">1</span>,r+n+q+<span class="number">3</span>)-r<span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m*<span class="number">4</span>;i++) T.mn[i]=inf;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) a[i]=lower_bound(r+<span class="number">1</span>,r+m+<span class="number">1</span>,a[i])-r,T.activate(<span class="number">1</span>,<span class="number">1</span>,m,a[i],<span class="number">1</span>);</span><br><span class="line">    T.activate(<span class="number">1</span>,<span class="number">1</span>,m,a[n+<span class="number">1</span>],<span class="number">-1</span>);</span><br><span class="line">    T.activate(<span class="number">1</span>,<span class="number">1</span>,m,a[<span class="number">0</span>],<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) add(a[i],a[i+<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) c[i]=lower_bound(r+<span class="number">1</span>,r+m+<span class="number">1</span>,c[i])-r;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> x=b[i],y=c[i];</span><br><span class="line">        add(a[x],a[x<span class="number">-1</span>],<span class="number">-1</span>);</span><br><span class="line">        add(a[x],a[x+<span class="number">1</span>],<span class="number">-1</span>);</span><br><span class="line">        T.activate(<span class="number">1</span>,<span class="number">1</span>,m,a[x],<span class="number">-1</span>);a[x]=y;</span><br><span class="line">        add(a[x],a[x<span class="number">-1</span>],<span class="number">1</span>);</span><br><span class="line">        add(a[x],a[x+<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">        T.activate(<span class="number">1</span>,<span class="number">1</span>,m,a[x],<span class="number">1</span>);</span><br><span class="line">        write(T.cnt[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1152F」Neko Rules the Catniverse</title>
    <url>/2020/01/03/%E3%80%8CCF1152F%E3%80%8DNeko-Rules-the-Catniverse/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1152/problem/F2" target="_blank" rel="noopener"></a><a href="https://codeforces.com/contest/1152/problem/F2" target="_blank" rel="noopener">https://codeforces.com/contest/1152/problem/F2</a>。</p>
<p>我又被智商题吊打了</p>
<a id="more"></a>
<p>考虑$dp$出这个序列，从大到小加点进去，那么假设当前要把$x$插入进序列，首先肯定可以放最后面，其次也可以放到$[x+1,x+m]$范围内的点的前面。</p>
<p>所以可以这样设$dp$状态：$f_{i,j,s}$表示当前考虑到第$i$个点了，序列里放了$j$个了，$[i+1,i+m]$范围内每个点有没有放 压成状态$s$。</p>
<p>那么转移只需要枚举状态，然后讨论选不选即可。</p>
<p>复杂度$O(nk\cdot 2^m)$。</p>
<p>对于$n$很大的情况显然可以矩阵优化，复杂度$O((k\cdot 2^m)^3\cdot \log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,m,N;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">300</span>][<span class="number">300</span>];</span><br><span class="line"> </span><br><span class="line">    matrix () {<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);}</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">operator</span> [] (<span class="keyword">int</span> x) {<span class="keyword">return</span> a[x];}</span><br><span class="line"> </span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix &amp;r) <span class="keyword">const</span> {</span><br><span class="line">        matrix c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">                    c[i][j]=(c[i][j]+<span class="number">1l</span>l*a[i][k]*r.a[k][j]%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    matrix <span class="keyword">operator</span> ^ (<span class="keyword">int</span> x) <span class="keyword">const</span> {</span><br><span class="line">        matrix r,c=*<span class="keyword">this</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,c=c*c) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) r=r*c;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">}tr,st;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> a*(<span class="number">1</span>&lt;&lt;m)+b;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),read(m);N=(k+<span class="number">1</span>)*(<span class="number">1</span>&lt;&lt;m);</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;m;s++) {</span><br><span class="line">            <span class="keyword">if</span>(i&lt;k) tr[id(i,s)][id(i+<span class="number">1</span>,(s&gt;&gt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;(m<span class="number">-1</span>)))]+=__builtin_popcount(s)+<span class="number">1</span>;</span><br><span class="line">            tr[id(i,s)][id(i,s&gt;&gt;<span class="number">1</span>)]++;</span><br><span class="line">        }</span><br><span class="line">    st=st*(tr^n);<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++) ans=(ans+st[<span class="number">0</span>][id(k,i)])%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1017G」The Tree</title>
    <url>/2020/01/02/%E3%80%8CCF1017G%E3%80%8DThe-Tree/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1017/G" target="_blank" rel="noopener"></a><a href="https://codeforces.com/problemset/problem/1017/G" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1017/G</a>。</p>
<p>为啥我能把线段树写错然后调一个小时。。</p>
<a id="more"></a>
<p>考虑假设没有第二个操作，如何处理第一个操作。</p>
<p>可以反过来想，首先把所有点弄一个权值，初值为$-1$，然后如果对$x$点进行第一种操作，那么就把他的权值加一。</p>
<p>那么如果询问点$x$，只需判断$x$到根节点的前缀和最大值是否大于等于$0$即可。（前缀指$x$为第一个）</p>
<p>所以现在就变成了链上的问题，可以树剖维护。</p>
<p>考虑怎么处理清空操作，首先显然要把子树打成$-1$，但是有个问题就是，可能会有上面传下来的点，也需要清空，那么把那个点减去一个额外的值就好了，这样的话每次前缀和都会消去上面传下来的影响（这部分本身就是需要被清空的）。</p>
<p>复杂度$O(n\log ^2n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q,head[maxn],tot,sz[maxn],hs[maxn],f[maxn],top[maxn],dfn[maxn],dfn_cnt;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> {</span></span><br><span class="line">    <span class="keyword">int</span> mx,s;</span><br><span class="line"> </span><br><span class="line">    node () {mx=s=<span class="number">0</span>;}</span><br><span class="line"> </span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span> {</span><br><span class="line">        node a;</span><br><span class="line">        a.mx=max(r.mx,r.s+mx);</span><br><span class="line">        a.s=s+r.s;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    node t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> tag[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">    segment_tree () {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn&lt;&lt;<span class="number">2</span>;i++) tag[i]=inf;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        tag[p]=v,t[p].mx=v,t[p].s=v*(r-l+<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(tag[p]==inf) <span class="keyword">return</span> ;</span><br><span class="line">        push(ls,l,mid,tag[p]),push(rs,mid+<span class="number">1</span>,r,tag[p]),tag[p]=inf;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{t[p]=t[ls]+t[rs];}</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> push(p,l,r,v),<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p,l,r);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,y,v);</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) modify(rs,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">        update(p);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> t[p];</span><br><span class="line">        pushdown(p,l,r);</span><br><span class="line">        <span class="keyword">if</span>(y&lt;=mid) <span class="keyword">return</span> query(ls,l,mid,x,y);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;mid) <span class="keyword">return</span> query(rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">return</span> query(ls,l,mid,x,y)+query(rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a=query(<span class="number">1</span>,<span class="number">1</span>,n,x,x).s;</span><br><span class="line">        modify(<span class="number">1</span>,<span class="number">1</span>,n,x,x,a+<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    sz[x]=<span class="number">1</span>;f[x]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">if</span>((v=e[i].to)==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,x),sz[x]+=sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[hs[x]]&lt;sz[v]) hs[x]=v;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    dfn[x]=++dfn_cnt;</span><br><span class="line">    <span class="keyword">if</span>(hs[f[x]]==x) top[x]=top[f[x]];</span><br><span class="line">    <span class="keyword">else</span> top[x]=x;</span><br><span class="line">    <span class="keyword">if</span>(hs[x]) dfs2(hs[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=f[x]&amp;&amp;e[i].to!=hs[x]) dfs2(e[i].to);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function">node <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    node ans;ans.mx=-inf;</span><br><span class="line">    <span class="keyword">while</span>(x) {</span><br><span class="line">        ans=T.query(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x])+ans;</span><br><span class="line">        x=f[top[x]];</span><br><span class="line">    }<span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cover</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    T.modify(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x]+sz[x]<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> a=get(x).mx;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">0</span>) T.modify(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x],<span class="number">-2</span>-a);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="built_in">puts</span>(get(x).mx&gt;=<span class="number">0</span>?<span class="string">"black"</span>:<span class="string">"white"</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,x;i&lt;=n;i++) read(x),ins(i,x),ins(x,i);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) T.modify(<span class="number">1</span>,<span class="number">1</span>,n,i,i,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span>(q--) {</span><br><span class="line">        <span class="keyword">int</span> op,x;read(op),read(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) T.add(dfn[x]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) cover(x);</span><br><span class="line">        <span class="keyword">else</span> query(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1287F」Cards</title>
    <url>/2020/01/02/%E3%80%8CCF1287F%E3%80%8DCards/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1278/F" target="_blank" rel="noopener"></a><a href="https://codeforces.com/problemset/problem/1278/F" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1278/F</a>。</p>
<p>这么无聊的题居然能放到F。。。</p>
<a id="more"></a>
<p>假设每次成功的概率为$p$，显然$p=1/m$。</p>
<p>答案就是：</p>
<script type="math/tex; mode=display">
\sum_{x=0}^{n}\binom{n}{x}p^x(1-p)^{n-x}x^k</script><p>套一下斯特林数：</p>
<script type="math/tex; mode=display">
\sum_{x=0}^{n}\binom{n}{x}p^x(1-p)^{n-x}\sum_{i=0}^{k}s_2(k,i)x^{\underline i}</script><p>变一下：</p>
<script type="math/tex; mode=display">
\begin{align}
&\sum_{i=0}^{k}s_2(k,i)\sum_{x=0}^{n}\binom{n}{x}p^x(1-p)^{n-x}x^{\underline i}\\
=&\sum_{i=0}^{k}s_2(k,i)\sum_{x=i}^{n}\frac{n!}{(n-x)!(x-i)!}p^x(1-p)^{n-x}\\
=&\sum_{i=0}^{k}s_2(k,i)n^{\underline i}\sum_{x=i}^{n}\frac{(n-i)!}{(n-x)!(x-i)!}p^x(1-p)^{n-x}\\
=&\sum_{i=0}^{k}s_2(k,i)n^{\underline i}\sum_{x=i}^{n}\binom{n-i}{x-i}p^x(1-p)^{n-x}\\
=&\sum_{i=0}^{k}s_2(k,i)n^{\underline i}\sum_{x=0}^{n-i}\binom{n-i}{x}p^{x+i}(1-p)^{n-x-i}\\
=&\sum_{i=0}^{k}s_2(k,i)n^{\underline i}p^i
\end{align}</script><p>复杂度$O(k^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,k,s[<span class="number">5002</span>][<span class="number">5002</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(k);</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            s[i][j]=(<span class="number">1l</span>l*s[i<span class="number">-1</span>][j]*j%mod+s[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,a=<span class="number">1</span>,b=<span class="number">1</span>,p=qpow(m,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) {</span><br><span class="line">        a=<span class="number">1l</span>l*a*n%mod,n--;</span><br><span class="line">        b=<span class="number">1l</span>l*b*p%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*s[k][i]*a%mod*b%mod)%mod;</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>「CF1270G」Subset with Zero Sum</title>
    <url>/2019/12/30/%E3%80%8CCF1270G%E3%80%8DSubset-with-Zero-Sum/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1270/problem/G" target="_blank" rel="noopener"></a><a href="https://codeforces.com/contest/1270/problem/G" target="_blank" rel="noopener">https://codeforces.com/contest/1270/problem/G</a>。</p>
<p>本场难度：$\rm G&lt;H&lt;D&lt;E&lt;F$（会写$\rm G,H$但是不会$\rm E,F$的垃圾选手发出感叹）<del>这就是你掉分的借口</del></p>
<a id="more"></a>
<p>把题目给的限制条件变一下就是：$1\leqslant i-a_i\leqslant n$。</p>
<p>令$b_i=i-a_i$，只需要找到一些$b_i$满足$\sum b_i=\sum i$即可。</p>
<p>把每个$b_i$看做指针，那么就形成了一个置换，随便找一个环输出即可。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[maxn],vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),a[i]=i-a[i],vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(a[i]==i) {<span class="built_in">printf</span>(<span class="string">"1\n%d\n"</span>,i);<span class="keyword">return</span> ;}</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!vis[x]) vis[x]=<span class="number">1</span>,x=a[x];</span><br><span class="line">    <span class="keyword">int</span> v=a[x];<span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; ans;ans.pb(x);</span><br><span class="line">    <span class="keyword">while</span>(v!=x) ans.pb(v),v=a[v];</span><br><span class="line">    write(ans.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:ans) <span class="built_in">printf</span>(<span class="string">"%d "</span>,x);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>「CF712E」Memory and Casinos</title>
    <url>/2019/12/27/%E3%80%8CCF712E%E3%80%8DMemory-and-Casinos/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/712/E" target="_blank" rel="noopener"></a><a href="https://codeforces.com/problemset/problem/712/E" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/712/E</a>。</p>
<a id="more"></a>
<p>考虑我们需要知道什么信息才能合并两个区间（把两个区间拼接起来）。</p>
<p>如果能快速做这个就直接线段树做完了。</p>
<p>考虑记录$x$表示能支配(dominate)这个区间的概率，$p$表示当前站在这个区间最后一个点，能到下一个点的概率。</p>
<p>那么设第一个区间叫$x_1,p_1$，第二个叫$x_2,p_2$，那么总区间可以用一个无穷级数表示：</p>
<script type="math/tex; mode=display">
x=\sum_{i=0}^{\infty}x_1\big((1-x_2)p_1\big)^ix_2=\frac{x_1x_2}{1-(1-x_2)p_1}</script><script type="math/tex; mode=display">
\begin{align}
p&=p_2+\sum_{i=0}^{\infty}(1-p_2)p_1\big((1-x_2)p_1\big)^ix_2\\
&=p_2+\frac{(1-p_2)p_1x_2}{1-(1-x_2)p_1}
\end{align}</script><p>其中$i​$是在枚举在这两个区间之间往返几次。</p>
<p>简单线段树维护即可，复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> {</span>lf x,p;}t[maxn];</span><br><span class="line"> </span><br><span class="line">    <span class="function">data <span class="title">merge</span><span class="params">(data a,data b)</span> </span>{</span><br><span class="line">        data c;</span><br><span class="line">        c.x=a.x*b.x/(<span class="number">1</span>-(<span class="number">1</span>-b.x)*a.p);</span><br><span class="line">        c.p=b.p+(<span class="number">1</span>-b.p)*a.p*b.x/(<span class="number">1</span>-(<span class="number">1</span>-b.x)*a.p);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,lf v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[p].x=t[p].p=v,<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> modify(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        t[p]=merge(t[ls],t[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function">data <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> t[p];</span><br><span class="line">        <span class="keyword">if</span>(y&lt;=mid) <span class="keyword">return</span> query(ls,l,mid,x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;mid) <span class="keyword">return</span> query(rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> merge(query(ls,l,mid,x,y),query(rs,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;=n;i++) read(a),read(b),T.modify(<span class="number">1</span>,<span class="number">1</span>,n,i,<span class="number">1.0</span>*a/b);</span><br><span class="line">    <span class="keyword">while</span>(q--) {</span><br><span class="line">        <span class="keyword">int</span> op,l,r,x;read(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) read(x),read(l),read(r),T.modify(<span class="number">1</span>,<span class="number">1</span>,n,x,<span class="number">1.0</span>*l/r);</span><br><span class="line">        <span class="keyword">else</span> read(l),read(r),<span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>,T.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r).x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1268D」Invertation in Tournament</title>
    <url>/2019/12/25/%E3%80%8CCF1268D%E3%80%8DInvertation-in-Tournament/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1268/problem/D" target="_blank" rel="noopener"></a><a href="https://codeforces.com/contest/1268/problem/D" target="_blank" rel="noopener">https://codeforces.com/contest/1268/problem/D</a>。</p>
<p>太棒了，学到许多（？）</p>
<a id="more"></a>
<p>首先如果整个图是$\rm SCC$答案是$0$。</p>
<p>如果图是由$\geqslant 3$个$\rm SCC$组成的，因为竞赛图缩点之后会是个链状的东西，也就是每个点连向后面所有点的形状，所以如果我们反转中间的$\rm SCC$的任意一个点，假设头尾是$h,t$，反转的点是$u$，那么可以得到一个这样的环：$h\to  t\to u\to h$，那么这种情况只需要一次操作。</p>
<p>有一个结论是说，一个竞赛图如果强连通，那么一定可以找到一个长度为$n-1$的环，因为我们把一个点去掉之后，会剩下一个链，可以发现我们可以在这个链上去掉一个点他还是一个链。</p>
<p>所以如果是$2$个$\rm SCC$，并且如果有一个大小$\geqslant 4$，那么可以找到一个点使得翻转之后大的$\rm SCC$还是$\rm SCC$，那么这个时候两个$\rm SCC$会强连通，所以也只需要一次操作。</p>
<p>综上如果这个图$n&gt;6$，一定只需要$\leqslant 1$次操作。</p>
<p>有一个小技巧是说，注意到竞赛图缩点之后是条链，那么链的最后一个点是没有出边的，而且这些点是按出度排好的，所以我们如果反过来，按出度排序，如果有一个$x$满足$\sum_{i=1}^{x}d_i=x(x-1)/2$就说明这些点是最后一个$\rm SCC$，如果$x\ne n$就说明这个图不强连通，否则一定强连通。</p>
<p>所以如果$n\leqslant 6$就爆搜，否则枚举每个点然后判断，复杂度$O(n^2\log n)$。（排序可以换成桶排然后少一个$\log$）。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn],d[maxn],n,ans,a[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=d[i];</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) {</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(a[i]==i*(i<span class="number">-1</span>)/<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(i!=x) {</span><br><span class="line">            d[x]-=e[x][i],d[i]-=e[i][x];</span><br><span class="line">            swap(e[x][i],e[i][x]);</span><br><span class="line">            d[x]+=e[x][i],d[i]+=e[i][x];</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> m)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x==m+<span class="number">1</span>) <span class="keyword">return</span> ans+=check(),<span class="keyword">void</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) invert(i),dfs(x+<span class="number">1</span>,m),invert(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) e[i][j]=s[j]-<span class="string">'0'</span>,d[i]+=s[j]-<span class="string">'0'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(check()) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0 1"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">6</span>) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++) {</span><br><span class="line">            dfs(<span class="number">1</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(ans) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,ans),<span class="number">0</span>;</span><br><span class="line">        }<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) invert(i),ans+=check(),invert(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1 %d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>竞赛图</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI2019」斗主地</title>
    <url>/2019/12/19/%E3%80%8CNOI2019%E3%80%8D%E6%96%97%E4%B8%BB%E5%9C%B0/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3160" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/3160" target="_blank" rel="noopener">https://loj.ac/problem/3160</a>。</p>
<p>打表找规律（？）</p>
<a id="more"></a>
<p>打个表可以发现，无论怎么洗牌，权值都是关于位置的多项式，并且次数不会改变。</p>
<p>所以每次可以算出前三项，然后插值算出后面$a_{i+1}+1$开始的三项，这样就可以$\rm dp$出下一层前三项。</p>
<p>复杂度$O(m)$，反正只有三项，中间随便怎么暴力都行 <del>放飞自我</del>。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> data asd09123jdf02i3h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,t,a[maxn],f[<span class="number">4</span>],r[<span class="number">4</span>],s[<span class="number">4</span>],iv[<span class="number">4</span>],s1[<span class="number">4</span>],s2[<span class="number">4</span>],_[<span class="number">10</span>],*inv=_+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++) res*=(a-i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++) res/=i;<span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) {</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;<span class="keyword">if</span>(x==i) <span class="keyword">return</span> f[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(j!=i) res=<span class="number">1l</span>l*res*(x-j)%mod*inv[i-j]%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*res*f[i]%mod)%mod;</span><br><span class="line">    }<span class="keyword">return</span> (ans+mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    freopen(<span class="string">"landlords.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"landlords.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">    read(n),read(m),read(t);iv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) {</span><br><span class="line">        f[i]=<span class="built_in">pow</span>(i,t);</span><br><span class="line">        iv[i]=<span class="number">1l</span>l*iv[i<span class="number">-1</span>]*qpow(n-i+<span class="number">1</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    }</span><br><span class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>,inv[<span class="number">2</span>]=qpow(<span class="number">2</span>,mod<span class="number">-2</span>);</span><br><span class="line">    inv[<span class="number">-1</span>]=mod<span class="number">-1</span>,inv[<span class="number">-2</span>]=mod-inv[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">1</span>;p&lt;=m;p++) {</span><br><span class="line">        read(a[p]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) r[i]=f[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) s[i]=i+a[p]&lt;=n?get(i+a[p]):<span class="number">0</span>;</span><br><span class="line">        s1[<span class="number">0</span>]=s2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) {</span><br><span class="line">            f[i]=<span class="number">0</span>;</span><br><span class="line">            s1[i]=<span class="number">1l</span>l*s1[i<span class="number">-1</span>]*(a[p]-i+<span class="number">1</span>)%mod;</span><br><span class="line">            s2[i]=<span class="number">1l</span>l*s2[i<span class="number">-1</span>]*(n-a[p]-i+<span class="number">1</span>)%mod;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) {</span><br><span class="line">                f[i]=(f[i]+<span class="number">1l</span>l*c(i<span class="number">-1</span>,j<span class="number">-1</span>)*s1[j]%mod*s2[i-j]%mod*iv[i]%mod*r[j]%mod)%mod;</span><br><span class="line">                f[i]=(f[i]+<span class="number">1l</span>l*c(i<span class="number">-1</span>,j<span class="number">-1</span>)*s2[j]%mod*s1[i-j]%mod*iv[i]%mod*s[j]%mod)%mod;</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> q,x;read(q);</span><br><span class="line">    <span class="keyword">while</span>(q--) read(x),write(get(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>拉格朗日插值</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI2019」序列</title>
    <url>/2019/12/18/%E3%80%8CNOI2019%E3%80%8D%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3158" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/3158" target="_blank" rel="noopener">https://loj.ac/problem/3158</a>。</p>
<p>一开始写假了重构了一遍代码，我太难了QAQ</p>
<a id="more"></a>
<p>有一个比较好想的费用流模型，首先限制可以改为一对一对的选，一共只能选$k-L$对不相同的下标。</p>
<p>那么左右两排点，显然先对应连，然后建$a,b$两个辅助点，$a\to b$容量$k-L$费用$0$，$a_i\to a,b\to b_i$容量$1$费用$0$，这样就能满足限制了。</p>
<p>我一开始写的假算法就是说直接模拟这个费用流，但是好像不太行，有一种增广路我不会维护。。。</p>
<p>换种思路，想想这个增广的过程，会发现一旦选了两个下标，以后永远也不会撤销这一步，并且这个费用流每次都是选能选的和最大的两个。</p>
<p>那么直接贪心，维护几个堆就好了。</p>
<p>复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> hp priority_queue<span class="meta-string">&lt;pii &gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,l,a[maxn],b[maxn],r,ans,v1[maxn],v2[maxn];</span><br><span class="line"></span><br><span class="line">hp s1,s2,s3,s4,s5;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ep</span><span class="params">(hp &amp;x)</span> </span>{<span class="keyword">return</span> !x.empty();}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tp</span><span class="params">(hp &amp;x)</span> </span>{<span class="keyword">return</span> x.top().fr;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wh</span><span class="params">(hp &amp;x)</span> </span>{<span class="keyword">return</span> x.top().sc;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cl</span><span class="params">(hp &amp;x)</span> </span>{</span><br><span class="line">    <span class="keyword">while</span>(ep(x)) x.pop();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),read(l);r=k-l;r&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        read(b[i]),s1.push(mp(a[i]+b[i],i));</span><br><span class="line">        s2.push(mp(a[i],i));</span><br><span class="line">        s3.push(mp(b[i],i));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) {</span><br><span class="line">        <span class="keyword">while</span>(ep(s1)&amp;&amp;(v1[wh(s1)]||v2[wh(s1)])) s1.pop();</span><br><span class="line">        <span class="keyword">while</span>(ep(s2)&amp;&amp;(v1[wh(s2)]||v2[wh(s2)])) s2.pop();</span><br><span class="line">        <span class="keyword">while</span>(ep(s3)&amp;&amp;(v1[wh(s3)]||v2[wh(s3)])) s3.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(ep(s4)&amp;&amp;v2[wh(s4)]) s4.pop();</span><br><span class="line">        <span class="keyword">while</span>(ep(s5)&amp;&amp;v1[wh(s5)]) s5.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,z=<span class="number">0</span>,p=<span class="number">0</span>,q=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ep(s1)) x=tp(s1);</span><br><span class="line">        <span class="keyword">if</span>(ep(s4)&amp;&amp;ep(s2)) y=tp(s4)+tp(s2);</span><br><span class="line">        <span class="keyword">if</span>(ep(s5)&amp;&amp;ep(s3)) z=tp(s5)+tp(s3);</span><br><span class="line">        <span class="keyword">if</span>(ep(s4)&amp;&amp;ep(s5)) p=tp(s4)+tp(s5);</span><br><span class="line">        <span class="keyword">if</span>(ep(s2)&amp;&amp;ep(s3)&amp;&amp;r&gt;=<span class="number">2</span>) q=tp(s2)+tp(s3);</span><br><span class="line">        ans+=max(max(x,y),max(z,max(p,q)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x&gt;=y&amp;&amp;x&gt;=z&amp;&amp;x&gt;=p&amp;&amp;x&gt;=q) {</span><br><span class="line">            x=wh(s1),y=x;s1.pop();</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(y&gt;=z&amp;&amp;y&gt;=p&amp;&amp;y&gt;=q) {</span><br><span class="line">            x=wh(s2),y=wh(s4);s4.pop(),s2.pop();</span><br><span class="line">            s4.push(mp(b[x],x));</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(z&gt;=p&amp;&amp;z&gt;=q) {</span><br><span class="line">            x=wh(s5),y=wh(s3);s5.pop(),s3.pop();</span><br><span class="line">            s5.push(mp(a[y],y));</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(p&gt;=q) {</span><br><span class="line">            x=wh(s5),y=wh(s4);s4.pop(),s5.pop();r+=<span class="number">2</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            x=wh(s2),y=wh(s3);r-=<span class="number">2</span>;</span><br><span class="line">            s4.push(mp(b[x],x)),s5.push(mp(a[y],y));</span><br><span class="line">        }</span><br><span class="line">        v1[x]=v2[y]=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    write(ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">    cl(s1),cl(s2),cl(s3),cl(s4),cl(s5);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v1[i]=v2[i]=<span class="number">0</span>;ans=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    freopen(<span class="string">"sequence.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"sequence.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve(),clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>「PKUSC2018」星际穿越</title>
    <url>/2019/12/17/%E3%80%8CPKUSC2018%E3%80%8D%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/6435" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/6435" target="_blank" rel="noopener">https://loj.ac/problem/6435</a>。</p>
<a id="more"></a>
<p>考虑从$x$出发，显然第一步可以走到$[l_x,x)$。</p>
<p>考虑第二步可以走到哪里，设$d_i=\min _{j=i}^{n} l_j$，那么稍微想下就可以知道第二步可以走到$[d_{l_x},l_x)$。</p>
<p>以此类推，假设第$i$步最远可以走到$p$，那么$i+1$步可以走到$[d_p,p)$。</p>
<p>那么对这个数组倍增就好了，复杂度$O(n\log n)$。</p>
<p>具体可以维护一个$g_{i,j}$表示$i\to [f_{i,j},i)$的最短路之和，$f_{i,j}$是倍增数组。</p>
<p>边界判一判就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],f[maxn][<span class="number">20</span>],g[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a[x]&lt;=l) <span class="keyword">return</span> x-l;</span><br><span class="line">    <span class="keyword">int</span> w=<span class="number">1</span>,res=x-a[x];x=max(l,a[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;i--) {</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]&lt;l) <span class="keyword">continue</span>;</span><br><span class="line">        res+=w*(x-f[x][i])+g[x][i];</span><br><span class="line">        w+=<span class="number">1</span>&lt;&lt;i,x=f[x][i];</span><br><span class="line">    }<span class="keyword">if</span>(x!=l) res+=(w+<span class="number">1</span>)*(x-l);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) read(a[i]),f[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) f[i][<span class="number">0</span>]=min(f[i][<span class="number">0</span>],f[i+<span class="number">1</span>][<span class="number">0</span>]),g[i][<span class="number">0</span>]=i-f[i][<span class="number">0</span>];</span><br><span class="line">    g[n][<span class="number">0</span>]=n-f[n][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">20</span>;j++) {</span><br><span class="line">            f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">            g[i][j]=g[i][j<span class="number">-1</span>]+g[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>]+(<span class="number">1l</span>l&lt;&lt;(j<span class="number">-1</span>))*(f[i][j<span class="number">-1</span>]-f[i][j]);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">int</span> q;read(q);</span><br><span class="line">    <span class="keyword">while</span>(q--) {</span><br><span class="line">        <span class="keyword">int</span> x,l,r;read(l),read(r),read(x);</span><br><span class="line">        <span class="keyword">int</span> a=calc(x,l)-calc(x,r+<span class="number">1</span>),b=r-l+<span class="number">1</span>,g=__gcd(a,b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,a/g,b/g);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1034E」Little C Loves 3 III</title>
    <url>/2019/12/16/%E3%80%8CCF1034E%E3%80%8DLittle-C-Loves-3-III/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1034/problem/E" target="_blank" rel="noopener"></a><a href="https://codeforces.com/contest/1034/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1034/problem/E</a>。</p>
<p>很精妙的构造。</p>
<a id="more"></a>
<p>直接套用$\rm vfk$论文可以得到一个$O(2^nn^2)$的暴力，但是没什么用。。</p>
<p>出题人给出了一个很牛逼的方法：</p>
<p>设$f_{i}=a_i\cdot 4^{cnt(i)},g_{i}=b_i\cdot 4^{cnt(i)}$，$\rm cnt$是二进制下$1$的个数，$4$是模数，模数改一改正确性也不会有问题。</p>
<p>然后把$f,g$或卷积起来得到$h$，$\frac{h_i}{4^{cnt(i)}}\bmod 4$就是答案。</p>
<p>考虑下为什么，这实际上是把每一位都当成了一个小多项式，那么如果没有进位，每一位就是所有${\rm cnt}(x)+{\rm cnt}(y)=i​$的答案。</p>
<p>但是由于我们只需要最低位，所以考虑进位也不会有任何影响。</p>
<p>复杂度$O(2^nn)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2.1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cnt(x) __builtin_popcount(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;n;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                r[i+j+k]+=r[j+k]*op;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++) {</span><br><span class="line">        a[i]=(<span class="number">1l</span>l&lt;&lt;(cnt(i)&lt;&lt;<span class="number">1</span>))*(s[i]-<span class="string">'0'</span>);</span><br><span class="line">        b[i]=(<span class="number">1l</span>l&lt;&lt;(cnt(i)&lt;&lt;<span class="number">1</span>))*(t[i]-<span class="string">'0'</span>);</span><br><span class="line">    }</span><br><span class="line">    fwt(a,<span class="number">1</span>),fwt(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++) a[i]=a[i]*b[i];</span><br><span class="line">    fwt(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++) <span class="built_in">putchar</span>(((a[i]&gt;&gt;(cnt(i)&lt;&lt;<span class="number">1</span>))&amp;<span class="number">3</span>)+<span class="string">'0'</span>);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF963E」Circles of Waiting</title>
    <url>/2019/12/11/%E3%80%8CCF963E%E3%80%8DCircles-of-Waiting/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/963/E" target="_blank" rel="noopener"></a><a href="https://codeforces.com/problemset/problem/963/E" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/963/E</a>。</p>
<p>网格图高斯消元，学到的新操作。</p>
<a id="more"></a>
<p>显然可以列出$dp$方程消元，复杂度$O(r^6)$。</p>
<p>然后有一个牛逼的东西，其实也很简单，注意到图是网格图，如果我们从上到下，从左到右标号，那么每次当前方程只会有$x\sim x+2r$这个范围有值，并且只有可能是下面$2r$行当前列有值，把表打出来看看就知道了。</p>
<p>那么消元的时候注意下范围，去掉无用的枚举，复杂度就降为了$O(r^4)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,c,d,r,f[<span class="number">7900</span>][<span class="number">7900</span>],id[<span class="number">120</span>][<span class="number">120</span>],cnt,w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=min(cnt,i+r*<span class="number">2</span>);j++) {</span><br><span class="line">            <span class="keyword">if</span>(!f[j][i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t=<span class="number">1l</span>l*f[j][i]*qpow(f[i][i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=min(cnt,i+r*<span class="number">2</span>);k++)</span><br><span class="line">                f[j][k]=(f[j][k]<span class="number">-1l</span>l*t*f[i][k]%mod+mod)%mod;</span><br><span class="line">            f[j][cnt+<span class="number">1</span>]=(f[j][cnt+<span class="number">1</span>]<span class="number">-1l</span>l*t*f[i][cnt+<span class="number">1</span>]%mod+mod)%mod;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i;i--) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            f[i][cnt+<span class="number">1</span>]=(f[i][cnt+<span class="number">1</span>]<span class="number">-1l</span>l*f[i][j]*f[j][j]%mod+mod)%mod;</span><br><span class="line">        f[i][i]=<span class="number">1l</span>l*f[i][cnt+<span class="number">1</span>]*qpow(f[i][i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> x=id[w][w];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[x][x]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(r),read(a),read(b),read(c),read(d);</span><br><span class="line">    <span class="keyword">int</span> s=qpow(a+b+c+d,mod<span class="number">-2</span>);w=r+<span class="number">2</span>;</span><br><span class="line">    a=<span class="number">1l</span>l*a*s%mod,b=<span class="number">1l</span>l*b*s%mod,c=<span class="number">1l</span>l*c*s%mod,d=<span class="number">1l</span>l*d*s%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;=-r;i--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=-r;j&lt;=r;j++) {</span><br><span class="line">            <span class="keyword">if</span>(i*i+j*j&gt;r*r) <span class="keyword">continue</span>;</span><br><span class="line">            id[i+w][j+w]=++cnt;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;=-r;i--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=-r;j&lt;=r;j++) {</span><br><span class="line">            <span class="keyword">if</span>(i*i+j*j&gt;r*r) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> x=id[i+w][j+w],t;</span><br><span class="line">            f[x][x]=<span class="number">1</span>;</span><br><span class="line">            t=id[i<span class="number">-1</span>+w][j+w];<span class="keyword">if</span>(t) f[x][t]=mod-a;</span><br><span class="line">            t=id[i+w][j+w<span class="number">-1</span>];<span class="keyword">if</span>(t) f[x][t]=mod-b;</span><br><span class="line">            t=id[i+<span class="number">1</span>+w][j+w];<span class="keyword">if</span>(t) f[x][t]=mod-c;</span><br><span class="line">            t=id[i+w][j+w+<span class="number">1</span>];<span class="keyword">if</span>(t) f[x][t]=mod-d;</span><br><span class="line">            f[x][cnt+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF755G」PolandBall and Many Other Balls</title>
    <url>/2019/12/11/%E3%80%8CCF755G%E3%80%8DPolandBall-and-Many-Other-Balls/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/755/G" target="_blank" rel="noopener"></a><a href="https://codeforces.com/problemset/problem/755/G" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/755/G</a>。</p>
<p>计数题。大力出奇迹。</p>
<a id="more"></a>
<p><del>最近写了好多题都没写题解，这个题好像题解很好写 就来写一写</del></p>
<p>考虑$dp$，$f_{i,j}$表示前$i$个位置填了$j$个，转移：</p>
<script type="math/tex; mode=display">
f_{i,j}=f_{i-1,j}+f_{i-1,j-1}+f_{i-2,j-1}</script><p>对于一个固定的$i$，可以写成生成函数$F_i(x)=\sum f_{i,j}x^j$。</p>
<p>转移就是：</p>
<script type="math/tex; mode=display">
F_i(x)=(1+x)F_{i-1}(x)+xF_{i-2}(x)</script><p>这东西长得和斐波那契一样，类似的有两种优化方法。</p>
<p>第一种很显然，我们写成矩阵的形式：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}F_i(x)&F_{i-1}(x)\end{bmatrix}\cdot 
\begin{bmatrix}1+x&1\\x&0\end{bmatrix}=\begin{bmatrix}F_{i+1}(x)&F_i(x)\end{bmatrix}</script><p>这时候，只需要有坚定的信仰，大力出奇迹，就能巨大常数$O(n\log ^2 n)​$干过去了，代码在下面。</p>
<p>当然也可以通过特征方程找出通解：</p>
<p>特征方程就是$z^2=(1+x)z+x$，解出来就是：</p>
<script type="math/tex; mode=display">
z_{1,2}=\frac{(1+x)\pm \sqrt{x^2+6x+1}}{2}</script><p>后面的都一样：</p>
<script type="math/tex; mode=display">
a+b=F_0(x),az_1+bz_2=F_1(x)</script><p>很简单可以解出$a,b$，那么通式就是：</p>
<script type="math/tex; mode=display">
F_n(x)=az_1^n+bz_2^n</script><p>利用多项式开根和求逆可以求出上面的所有参数，利用多项式$\ln,\exp$可以快速计算，复杂度$O(n\log n)$。<del>感兴趣的同学自行实现好了，我太懒了不想写了</del></p>
<p>矩阵代码：（注意下这份代码由于在函数里面开了太大内存，不开栈运行不了<del>我找了好久才发现是这个原因，一开始都不能读入</del>）</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">7e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[maxn],pos[maxn],N=maxn<span class="number">-1</span>,bit,n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;=k&lt;&lt;<span class="number">1</span>;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> {</span></span><br><span class="line">    <span class="keyword">int</span> r[maxn];</span><br><span class="line"></span><br><span class="line">    poly () {<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">0</span>;}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                    <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                    r[j+k]=(x+y)%mod,r[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">                }</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">            <span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);reverse(r+<span class="number">1</span>,r+N);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;N;i++) r[i]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    poly <span class="keyword">operator</span> + (poly a) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) a.r[i]=(a.r[i]+r[i])%mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    poly <span class="keyword">operator</span> * (poly a) <span class="keyword">const</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) a.r[i]=<span class="number">1l</span>l*a.r[i]*r[i]%mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> {</span></span><br><span class="line">    poly a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    poly* <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) {<span class="keyword">return</span> a[x];}</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> * (matrix c) <span class="keyword">const</span> {</span><br><span class="line">        matrix res,b=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++) b[i][j].ntt(<span class="number">1</span>),c[i][j].ntt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">                    res[i][j]=res[i][j]+b[i][k]*c[k][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++) res[i][j].ntt(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> ^ (<span class="keyword">int</span> x) <span class="keyword">const</span> {</span><br><span class="line">        matrix b=*<span class="keyword">this</span>,res;res.a[<span class="number">0</span>][<span class="number">0</span>].r[<span class="number">0</span>]=res.a[<span class="number">1</span>][<span class="number">1</span>].r[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,b=b*b) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=res*b;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}st,tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);init();</span><br><span class="line">    st.a[<span class="number">0</span>][<span class="number">0</span>].r[<span class="number">0</span>]=st.a[<span class="number">0</span>][<span class="number">0</span>].r[<span class="number">1</span>]=st.a[<span class="number">0</span>][<span class="number">1</span>].r[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    tr.a[<span class="number">0</span>][<span class="number">0</span>]=st.a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    tr.a[<span class="number">1</span>][<span class="number">0</span>].r[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    tr.a[<span class="number">0</span>][<span class="number">1</span>].r[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    st=st*(tr^(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,st.a[<span class="number">0</span>][<span class="number">0</span>].r[i]);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
        <tag>NTT</tag>
      </tags>
  </entry>
  <entry>
    <title>笛卡尔树&amp;标准rmq算法</title>
    <url>/2019/12/04/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91-%E6%A0%87%E5%87%86rmq%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>两个挺偏门（？）的算法。</p>
<a id="more"></a>
<h2 id="笛卡尔树"><a href="#笛卡尔树" class="headerlink" title="笛卡尔树"></a>笛卡尔树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>笛卡尔树是一个维护数列的数据结构，它满足两个性质：</p>
<ul>
<li>中序遍历等于原序列，并且是二叉树（这就是$\rm BST$的性质）。</li>
<li>任意一个点的权值都要小于（或者大于）儿子的权值（这就是堆的性质）。</li>
</ul>
<p>所以根据定义容易得到一个暴力的构造方法：每次暴力找到当前区间的最小值，然后左右两边递归处理作为左右子树。</p>
<p>这个做法复杂度是$O(n^2)$的。</p>
<h3 id="线性构造"><a href="#线性构造" class="headerlink" title="线性构造"></a>线性构造</h3><p>线性构造其实很简单，考虑增量法，用一个栈来维护从根节点一直走右儿子的这条链，每次在序列最后添加一个值：</p>
<ul>
<li>如果它是全局最小值（即小于根节点），就把根节点接在它左儿子，然后暴力更新栈（清空栈，把当前点加进去）。</li>
<li>否则一路弹栈，直到栈顶比当前点小，把当前点接在栈顶右儿子下，弹掉的那条链接在当前点左儿子下。</li>
</ul>
<p>每个点只会被弹栈入栈一次，复杂度$O(n)$。</p>
<p>正确性显然。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>我是真的没找到什么题。。就两三个的样子。</p>
<h4 id="POJ2201-Cartesian-Tree"><a href="#POJ2201-Cartesian-Tree" class="headerlink" title="[POJ2201] Cartesian Tree"></a>[POJ2201] Cartesian Tree</h4><p>模板题，放下代码吧（头文件之类的东西太占地方就去掉了）：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> {</span><span class="keyword">int</span> k,x,id;}a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,ls[maxn],rs[maxn],val[maxn],rt,sta[maxn],top,cnt,s[maxn],fa[maxn],t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> x=++cnt;val[x]=v;s[id]=x,t[x]=id;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;val[sta[top]]&gt;v) p=sta[top],top--;</span><br><span class="line">    <span class="keyword">if</span>(top) rs[sta[top]]=x,fa[x]=sta[top];</span><br><span class="line">    <span class="keyword">else</span> rt=x;</span><br><span class="line">    ls[x]=p,sta[++top]=x;</span><br><span class="line">    <span class="keyword">if</span>(p) fa[p]=x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(info x,info y)</span> </span>{<span class="keyword">return</span> x.k&lt;y.k;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i].k),read(a[i].x),a[i].id=i;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(a[i].x,a[i].id);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,t[fa[s[x]]],t[ls[s[x]]],t[rs[s[x]]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="BZOJ2616-SPOJ-PERIODNI"><a href="#BZOJ2616-SPOJ-PERIODNI" class="headerlink" title="[BZOJ2616] SPOJ PERIODNI"></a>[BZOJ2616] SPOJ PERIODNI</h4><p>考虑把小根笛卡尔树搞出来，每个点$x$看做是一个$(val_x-val_{fa})\times size_x$的矩形，那么所有点的总和就是题目给出的图形。</p>
<p>考虑$\rm dp$，设$f_{x,i}$表示$x$子树放了$i$个点的方案数，那么首先弄一个辅助数组$t_i=\sum_{j=0}^{i} f_{ls,j}\cdot f_{rs,i-j}$表示子树的方案。</p>
<p>那么转移考虑枚举$x$代表的矩形放了几个：</p>
<script type="math/tex; mode=display">
f_{x,i}=\sum_{j=0}^{i}t_{i-j}\cdot \binom{size_x-(i-j)}{j}\binom{val_x-val_{fa}}{j}j!</script><p>复杂度$O(nk^2)$。</p>
<p><del>代码没啥重要的东西就不放了</del></p>
<h4 id="uoj424-【集训队作业2018】count"><a href="#uoj424-【集训队作业2018】count" class="headerlink" title="[uoj424]【集训队作业2018】count"></a>[uoj424]【集训队作业2018】count</h4><p><del>多项式不想写，O(n)做法看不懂，所以咕咕咕咕咕</del></p>
<h2 id="标准rmq"><a href="#标准rmq" class="headerlink" title="标准rmq"></a>标准rmq</h2><h3 id="问题转化"><a href="#问题转化" class="headerlink" title="问题转化"></a>问题转化</h3><p>标准$\rm rmq$是一种预处理$O(n)$，每次询问$O(1)$的$\rm rmq$做法。</p>
<p>我们先把序列建成笛卡尔树，比较容易的可以得知，两个点之间的最小值就是笛卡尔树上的$\rm LCA$的权值。</p>
<p>问题转化为如何$O(n)-O(1)$求$\rm LCA$。</p>
<p>这个做法非常巧妙，首先我们可以利用欧拉序把$\rm LCA$再转化成深度的$\rm rmq$问题，而这个序列有一个性质：$|a_i-a_{i-1}|=1$一定成立。</p>
<p>根据这个性质我们可以得到一个$O(n)-O(1)$的特殊序列的$\rm rmq$算法，这个算法好像也被叫做$\rm \pm 1 rmq$或者约束$\rm rmq$。</p>
<p>接下来将阐述约束$\rm rmq$的做法。</p>
<h3 id="约束rmq"><a href="#约束rmq" class="headerlink" title="约束rmq"></a>约束rmq</h3><p>首先对序列分块，设块大小$B=\dfrac{\log_2 n}{2}$，为什么待会解释。</p>
<p>那么首先很容易解决整块之间的询问：直接上$O(n\log n)$的$\rm ST$表就好了，因为一共只有$\dfrac{n}{B}=\dfrac{2n}{\log_2 n}$个块，所以这部分复杂度为$O(n)$。</p>
<p>现在难点就在如何求不全的块的贡献，注意到现在我们还没用到$\rm \pm1​$的特殊性质。</p>
<p>我们考虑一共有多少个不等价的块，我们说两个块等价当且仅当他们的大小关系相同，或者也可以表述为他们的差分数组不同：因为每次只有可能$\rm \pm 1$，所以说这两句话是完全等价的。</p>
<p>考虑一共有多少个本质不同的差分序列，容易发现个数为$2^{B-1}=2^{(\log _2 n)/2-1}= O(\sqrt n)$。</p>
<p>这就是为什么设块大小的时候要除以$2$，这么一来我们可以暴力预处理出$f_{s,i,j}$表示第$s$种块$[i,j]$的最小值位置在哪里，那么只需要一开始给每个块标号就好了，标号的复杂度是$O(n)$，预处理$f$的复杂度是$O(\sqrt n \log ^2 n)$。</p>
<p>所以总预处理的复杂度是$O(n)$，而询问显然可以根据上面的东西做到$O(1)$。</p>
<p>放个代码吧，由于我太懒了，所以只实现了$O(n)-O(1)$的$\rm LCA$。</p>
<p><del>并且说实话这东西没啥大用</del>，可能是我实现有点慢，反正就只比带log的算法快了一倍，但是凭空多了$100$行代码。。。</p>
<p>以下这份代码可以通过<a href="https://www.luogu.com.cn/problem/P3379" target="_blank" rel="noopener">洛谷LCA模板</a>。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1.5e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],tot,n,rt,q,cnt,dfn[maxn],dep[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">pii r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    dep[x]=dep[fa]+<span class="number">1</span>,r[dfn[x]=++cnt]=mp(dep[x],x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) dfs(e[i].to,x),r[++cnt]=mp(dep[x],x);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bel[maxn],B,m,id[maxn],t[<span class="number">20</span>],st[maxn],lg[maxn];</span><br><span class="line">pii w[<span class="number">17</span>][maxn&gt;&gt;<span class="number">3</span>],f[<span class="number">1500</span>][<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">min</span><span class="params">(pii a,pii b)</span> </span>{<span class="keyword">return</span> a.fr&lt;b.fr?a:b;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> s)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x==B+<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=B;i++) {</span><br><span class="line">            f[s][i][i]=mp(t[i],i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=B;j++)</span><br><span class="line">                f[s][i][j]=min(f[s][i][j<span class="number">-1</span>],mp(t[j],j));</span><br><span class="line">        }<span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    t[x]=t[x<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    search(x+<span class="number">1</span>,s&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    t[x]=t[x<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">    search(x+<span class="number">1</span>,s&lt;&lt;<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rmq_init</span><span class="params">()</span> </span>{</span><br><span class="line">    B=log2(cnt)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) bel[i]=(i<span class="number">-1</span>)/B+<span class="number">1</span>;m=bel[cnt];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) w[<span class="number">0</span>][i].fr=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) w[<span class="number">0</span>][bel[i]]=min(w[<span class="number">0</span>][bel[i]],r[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lg[m];j++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            w[j][i]=min(w[j<span class="number">-1</span>][i],w[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">    search(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i+=B) {</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">0</span>;st[bel[i]]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;i+B;j++)</span><br><span class="line">            <span class="keyword">if</span>(r[j].fr&gt;r[j<span class="number">-1</span>].fr) s=s&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;<span class="keyword">else</span> s&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        id[bel[i]]=s;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> p=f[id[x]][a-st[x]+<span class="number">1</span>][b-st[x]+<span class="number">1</span>].sc;</span><br><span class="line">    <span class="keyword">return</span> r[st[x]+p<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">block_rmq</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> x=lg[b-a+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> min(w[x][a],w[x][b-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">rmq</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">    <span class="keyword">if</span>(bel[a]==bel[b]) <span class="keyword">return</span> get(bel[a],a,b);</span><br><span class="line">    pii res=mp(<span class="number">1e9</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(bel[a]!=bel[b]<span class="number">-1</span>) res=block_rmq(bel[a]+<span class="number">1</span>,bel[b]<span class="number">-1</span>);</span><br><span class="line">    res=min(res,min(get(bel[a],a,st[bel[a]]+B<span class="number">-1</span>),get(bel[b],st[bel[b]],b)));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q),read(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),ins(x,y),ins(y,x);</span><br><span class="line">    dfs(rt,<span class="number">0</span>);</span><br><span class="line">    rmq_init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> l,r;read(l),read(r);</span><br><span class="line">        write(rmq(dfn[l],dfn[r]).sc);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>「IOI2018」狼人</title>
    <url>/2019/12/03/%E3%80%8CIOI2018%E3%80%8D%E7%8B%BC%E4%BA%BA/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/407" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/407" target="_blank" rel="noopener">http://uoj.ac/problem/407</a>。</p>
<p>套路题。</p>
<a id="more"></a>
<p>显然是问你，从起点开始只走$\geqslant l$的点能到的点集和从终点开始走$\leqslant r$的点集有没有交。</p>
<p>搞两个$\rm Kruskal$重构树出来，一个最大生成树，一个最小生成树，然后把$\rm dfs$序搞出来，问题就变成，存不存在一个点$x$，在第一棵树上$\rm dfs$序在一个区间内，第二棵在另一个区间内。</p>
<p>这是经典的二维数点问题，离线就好了，复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"werewolf.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dat</span> {</span><span class="keyword">int</span> u,v,w;};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kruskal_rebuild_tree</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> {</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    dat a[maxn];</span><br><span class="line">    <span class="keyword">int</span> fa[maxn],cnt,val[maxn],f[maxn][<span class="number">20</span>],mn[maxn],mx[maxn],s[maxn][<span class="number">2</span>],dfn_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(dat a,dat b)</span> </span>{<span class="keyword">return</span> a.w&lt;b.w;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(dat a,dat b)</span> </span>{<span class="keyword">return</span> a.w&gt;b.w;}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!s[x][<span class="number">0</span>]) <span class="keyword">return</span> mn[x]=mx[x]=++dfn_cnt,<span class="keyword">void</span>();</span><br><span class="line">        dfs(s[x][<span class="number">0</span>]),dfs(s[x][<span class="number">1</span>]);</span><br><span class="line">        mn[x]=mn[s[x][<span class="number">0</span>]],mx[x]=mx[s[x][<span class="number">1</span>]];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">        sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>,[&amp;](dat a,dat b){<span class="keyword">return</span> op?(a.w&lt;b.w):(a.w&gt;b.w);});</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++) fa[i]=i;cnt=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">            <span class="keyword">int</span> u=find(a[i].u),v=find(a[i].v);</span><br><span class="line">            <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">            val[++cnt]=a[i].w;</span><br><span class="line">            f[u][<span class="number">0</span>]=f[v][<span class="number">0</span>]=cnt;</span><br><span class="line">            fa[u]=fa[v]=cnt;s[cnt][<span class="number">0</span>]=u,s[cnt][<span class="number">1</span>]=v;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">                f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        dfs(cnt);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">pii <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;i--) {</span><br><span class="line">            <span class="keyword">if</span>(!f[x][i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>((op&amp;&amp;val[f[x][i]]&gt;=v)||(!op&amp;&amp;val[f[x][i]]&lt;=v)) x=f[x][i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> mp(mn[x],mx[x]);</span><br><span class="line">    }</span><br><span class="line">}s,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot,pps[maxn],ans[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qqq</span> {</span><span class="keyword">int</span> x,l,r,op,id;}r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(qqq a,qqq b)</span> </span>{<span class="keyword">return</span> a.x&lt;b.x;}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x) t[x]++;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ans=<span class="number">0</span>)</span> </span>{<span class="keyword">for</span>(;x;x-=x&amp;-x) ans+=t[x];<span class="keyword">return</span> ans;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{<span class="keyword">return</span> qry(r)-(l&gt;<span class="number">1</span>?qry(l<span class="number">-1</span>):<span class="number">0</span>);}</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="function">vec <span class="title">check_validity</span><span class="params">(<span class="keyword">int</span> nn,vec x,vec y,vec ss,vec e,vec l,vec rr)</span> </span>{</span><br><span class="line">    n=nn,m=x.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) {</span><br><span class="line">        x[i]++,y[i]++;</span><br><span class="line">        s.a[i+<span class="number">1</span>]=(dat){x[i],y[i],max(x[i],y[i])};</span><br><span class="line">        t.a[i+<span class="number">1</span>]=(dat){x[i],y[i],min(x[i],y[i])};</span><br><span class="line">    }s.solve(<span class="number">1</span>),t.solve(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> q=ss.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++) {</span><br><span class="line">        ss[i]++,e[i]++,l[i]++,rr[i]++;</span><br><span class="line">        pii a=t.get(ss[i],l[i],<span class="number">1</span>),b=s.get(e[i],rr[i],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(b.fr&gt;<span class="number">1</span>) r[++tot]=(qqq){b.fr<span class="number">-1</span>,a.fr,a.sc,<span class="number">-1</span>,i};</span><br><span class="line">        r[++tot]=(qqq){b.sc,a.fr,a.sc,<span class="number">1</span>,i};</span><br><span class="line">    }</span><br><span class="line">    sort(r+<span class="number">1</span>,r+tot+<span class="number">1</span>,cmp);<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pps[s.mn[i]]=t.mn[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        T.add(pps[i]);</span><br><span class="line">        <span class="keyword">while</span>(p&lt;tot&amp;&amp;r[p+<span class="number">1</span>].x==i) p++,ans[r[p].id]+=r[p].op*T.get(r[p].l,r[p].r);</span><br><span class="line">    }</span><br><span class="line">    vec res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++) res.pb((<span class="keyword">bool</span>)ans[i]);</span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Kruskal重构树</tag>
      </tags>
  </entry>
  <entry>
    <title>「IOI2018」组合动作</title>
    <url>/2019/12/02/%E3%80%8CIOI2018%E3%80%8D%E7%BB%84%E5%90%88%E5%8A%A8%E4%BD%9C/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/405" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/405" target="_blank" rel="noopener">http://uoj.ac/problem/405</a>。</p>
<p>好玩的构造题，<del>我居然会做</del>。</p>
<a id="more"></a>
<p>显然这个$n+2$能提示你你大概需要每次询问得到一位。</p>
<p>考虑先用$3$次得到第一位，假设是<code>Y</code>，其他的也一样，然后从前往后得到每一位。</p>
<p>假设当前得到的串是$s$，那么每次询问这样的串：<code>SA SBA SBB SBX</code>空格是帮助看清楚），那么假设当前串长为$x$，如果下一位是<code>A</code>则返回$x+1$；<code>B</code>则返回$x+2$；<code>X</code>则返回$x​$。</p>
<p>最后一位不能这样搞，就暴力问两次好了，那么一共就是$n+3$次，多了一次。。。</p>
<p>显然要么最后少一次要么第一位少一次，然后我就意识到一开始只要问两次就可以得到第一位了，类似于二分，先问<code>AB</code>，那么就变成了二选一。</p>
<p>注意特判$n=1$。。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"combo.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get press</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">guess_sequence</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">if</span>(get(<span class="string">"A"</span>)) <span class="keyword">return</span> <span class="string">"A"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(get(<span class="string">"B"</span>)) <span class="keyword">return</span> <span class="string">"B"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(get(<span class="string">"X"</span>)) <span class="keyword">return</span> <span class="string">"X"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"Y"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">string</span> ans=<span class="string">""</span>,a,b,c;</span><br><span class="line">    <span class="keyword">if</span>(get(<span class="string">"AB"</span>)) {</span><br><span class="line">        a=<span class="string">"X"</span>,b=<span class="string">"Y"</span>;</span><br><span class="line">        <span class="keyword">if</span>(get(<span class="string">"A"</span>)) ans+=<span class="string">"A"</span>,c=<span class="string">"B"</span>;</span><br><span class="line">        <span class="keyword">else</span> ans+=<span class="string">"B"</span>,c=<span class="string">"A"</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        a=<span class="string">"A"</span>,b=<span class="string">"B"</span>;</span><br><span class="line">        <span class="keyword">if</span>(get(<span class="string">"X"</span>)) ans+=<span class="string">"X"</span>,c=<span class="string">"Y"</span>;</span><br><span class="line">        <span class="keyword">else</span> ans+=<span class="string">"Y"</span>,c=<span class="string">"X"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) {</span><br><span class="line">        <span class="built_in">string</span> res=ans+a + ans+b+a + ans+b+b + ans+b+c;</span><br><span class="line">        <span class="keyword">int</span> x=get(res)-i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x) ans+=c;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>) ans+=a;</span><br><span class="line">        <span class="keyword">else</span> ans+=b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(get(ans+a)==n) ans+=a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(get(ans+b)==n) ans+=b;</span><br><span class="line">    <span class="keyword">else</span> ans+=c;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>「集训队作业2018」小Z的礼物</title>
    <url>/2019/12/02/%E3%80%8C%E9%9B%86%E8%AE%AD%E9%98%9F%E4%BD%9C%E4%B8%9A2018%E3%80%8D%E5%B0%8FZ%E7%9A%84%E7%A4%BC%E7%89%A9/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/422" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/422" target="_blank" rel="noopener">http://uoj.ac/problem/422</a>。</p>
<a id="more"></a>
<p>考虑$\rm min-max$容斥<del>(我随机选的题为啥全是min-max容斥。。)</del>，那么就有一个很简单的暴力：枚举集合，假设有$x$种方案会碰到一个黑点，那么贡献就是$(-1)^{|s|}\cdot \dfrac{2nm-n-m}{x}​$，分子是总方案数。</p>
<p>我们发现需要知道的东西只有集合大小和$x$，并且$x$是$O(nm)$级别的，很容易得到一个$\rm dp$：$f_{i,s,k}$表示考虑了前$i$列，最后一列选择的状态是$s$，$x=k$的方案数。注意到我们没有必要把大小开在状态里，只需要每次转移的时候乘上一个$(-1)^{|s|}​$的因子就好了。</p>
<p>因为要枚举状态然后$O(2^n)$转移，复杂度就是$O(2^{2n}nm^2)​$，这个东西稍微大了点过不了。。<del>我卡了好久的常没卡过。。害得我重构代码</del></p>
<p>考虑优化，可以利用轮廓线$\rm dp$，因为当前点增加的贡献只取决于他上面那个点和左边那个点，那么加一维状态$x$表示当前处理完$(x,i)$这个点，并且$s$前$i$位是第$i$行的状态，后面是$i-1$的状态，转移就变成了$O(1)​$了。</p>
<p>复杂度$O(2^nn^2m^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cnt __builtin_popcount</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,f[<span class="number">2</span>][<span class="number">7</span>][<span class="number">66</span>][<span class="number">1222</span>];</span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">7</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss[i]+<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>][n][<span class="number">0</span>][<span class="number">0</span>]=mod<span class="number">-1</span>;<span class="keyword">int</span> all=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;i&lt;=m;i++,p^=<span class="number">1</span>) {</span><br><span class="line">        <span class="built_in">memset</span>(f[p],<span class="number">0</span>,<span class="keyword">sizeof</span> f[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">memcpy</span>(f[p][<span class="number">0</span>],f[p^<span class="number">1</span>][n],<span class="keyword">sizeof</span> f[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) {</span><br><span class="line">            <span class="keyword">auto</span> make=[&amp;] (<span class="keyword">int</span> s) {</span><br><span class="line">                <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">1</span>&amp;&amp;(s&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-2</span>)))) x++;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;(s&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)))) x++;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*i*n-i-n;k++) </span><br><span class="line">                    add(f[p][j][s&amp;(all-(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)))][k+x],f[p][j<span class="number">-1</span>][s][k]);</span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">if</span>(ss[j][i]==<span class="string">'.'</span>) {</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;n;s++) make(s);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;n;s++) {</span><br><span class="line">                    make(s);</span><br><span class="line">                    <span class="keyword">int</span> x=(j&gt;<span class="number">1</span>)+(i&gt;<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*i*n-i-n;k++)</span><br><span class="line">                        add(f[p][j][s|(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][k+x],(mod-f[p][j<span class="number">-1</span>][s][k])%mod);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;n;s++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>*n*m-n-m;k++) </span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*f[m&amp;<span class="number">1</span>][n][s][k]*qpow(k,mod<span class="number">-2</span>)%mod)%mod;</span><br><span class="line">    ans=<span class="number">1l</span>l*ans*(<span class="number">2</span>*n*m-n-m)%mod;</span><br><span class="line">    write((ans+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>「集训队作业2018」喂鸽子</title>
    <url>/2019/12/02/%E3%80%8C%E9%9B%86%E8%AE%AD%E9%98%9F%E4%BD%9C%E4%B8%9A2018%E3%80%8D%E5%96%82%E9%B8%BD%E5%AD%90/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/449" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/449" target="_blank" rel="noopener">http://uoj.ac/problem/449</a>。</p>
<p>学到了多项式新操作。</p>
<a id="more"></a>
<p>先用$\min-\max$容斥搞一下，那么答案就是：</p>
<script type="math/tex; mode=display">
ans=\sum_{s}(-1)^{|s|+1}f(s)=\sum_{i=1}^{n}\binom{n}{i}(-1)^{i+1}f(i)</script><p>$f$表示集合$s$期望多少步之后某一只鸽子最先被喂饱，此时其他鸽子都没饱，因为每个鸽子是一样的，所以等价于任意$i$个鸽子。</p>
<p>假设我们现在要算$f(c)$，我们硬点集合内的某只鸽子最先被喂饱，那么最后把答案乘$c$就好了。</p>
<p>假设某只鸽子是一号鸽子，那么喂鸽子的序列一定满足：一号鸽子出现了$k$次且最后一次是一号，剩下的鸽子出现次数小于$k$。</p>
<p>我们可以搞一个$\rm EGF$把这种序列的方案数算出来：</p>
<script type="math/tex; mode=display">
g_c(x)=\frac{x^k}{(k-1)!}\left(\sum_{i=0}^{k-1}\frac{x^i}{i!}\right)^{c-1}</script><p>那么恰好$i$次能喂饱第一只鸽子的概率就是$\dfrac{i!}{n^i}[x^i]g_c(x)$，中括号是取系数。</p>
<p>而因为每期望$\dfrac{n}{c}$次才会出现一次在当前集合里的鸽子，所以长度为$i$的序列的贡献就是$\dfrac{ni}{c}​$，所以答案就是：</p>
<script type="math/tex; mode=display">
f(c)=c\sum_{i=k}^{nk-n+1}\frac{ni}{c}\cdot \frac{i!}{c^i}[x^i]g_c(x)</script><p>复杂度$O(n^2k^2)$，用$\rm NTT$可以优化到$O(n^2k\log k)$。</p>
<p><del>但是由于突然不想写ntt并且正好从别人博客学到了一个做法</del>，考虑能不能更快的算出$g$。</p>
<p>设$a(x)$：</p>
<script type="math/tex; mode=display">
a(x)=(\sum_{i=0}^{k}\frac{x^i}{i!})^c</script><p>和上面的东西是一样的，考虑对它求导：</p>
<script type="math/tex; mode=display">
a'(x)=c(\sum_{i=0}^{k}\frac{x^i}{i!})^{c-1}\cdot \sum_{i=0}^{k-1}\frac{x^i}{i!}\\
a'(x)=c(\sum_{i=0}^{k}\frac{x^i}{i!})^{c-1}\cdot (\sum_{i=0}^{k}\frac{x^i}{i!}-\frac{x^k}{k!})\\
a'(x)=c\cdot a(x)-\frac{cx^k}{k!}(\sum_{i=0}^{k}\frac{x^i}{i!})^{c-1}</script><p>可以对照系数递推：设$f_{c,i}$表示$c$次方的第$i$项系数，可得：</p>
<script type="math/tex; mode=display">
f_{c,i}=\frac{c}{i}(f_{c,i-1}-\frac{1}{k!}f_{c-1,i-k-1})</script><p>复杂度就被优化成了$O(n^2k)$。</p>
<p><del>不用写ntt了，好！</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,f[<span class="number">52</span>][<span class="number">50002</span>],fac[maxn],ifac[maxn],inv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;<span class="keyword">int</span> m=n*k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) inv[i]=<span class="number">1l</span>l*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">    ifac[m]=qpow(fac[m],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">()</span> </span>{</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=n;c++) {</span><br><span class="line">        f[c][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c*(k<span class="number">-1</span>);i++) {</span><br><span class="line">            f[c][i]=f[c][i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=k) f[c][i]=(f[c][i]<span class="number">-1l</span>l*ifac[k<span class="number">-1</span>]*f[c<span class="number">-1</span>][i-(k<span class="number">-1</span>)<span class="number">-1</span>]%mod+mod)%mod;</span><br><span class="line">            f[c][i]=<span class="number">1l</span>l*f[c][i]*c%mod*inv[i]%mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);</span><br><span class="line">    gen();dp();<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>,p=<span class="number">1</span>;x&lt;=n;x++,p=-p) {</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k,iv=qpow(inv[x],k);i&lt;=x*k-x+<span class="number">1</span>;i++,iv=<span class="number">1l</span>l*iv*inv[x]%mod) </span><br><span class="line">            res=(res+<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*iv%mod*i%mod*n%mod*inv[x]%mod*f[x<span class="number">-1</span>][i-k]%mod*ifac[k<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">        res=<span class="number">1l</span>l*res*x%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*p*res*fac[n]%mod*ifac[n-x]%mod*ifac[x]%mod)%mod;</span><br><span class="line">    }write((ans+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF1261F」Xor-Set</title>
    <url>/2019/11/29/%E3%80%8CCF1261F%E3%80%8DXor-Set/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1261/problem/F" target="_blank" rel="noopener"></a><a href="https://codeforces.com/contest/1261/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1261/problem/F</a>。</p>
<a id="more"></a>
<p>考虑如果我们把一个区间扔到$[0,2^{60}-1]$的线段树上，它就会被拆解成$\log$个形如 二进制下最高的若干位固定，低位任意 的东西。</p>
<p>我们发现这个形式非常好，因为他可以快速的合并两个区间，那么如此一来我们暴力的复杂度就是$O(n^2\log^2 v\log (n^2\log^2v))$（$v$是值域）。</p>
<p>然而这样的复杂度还是有点爆炸，考虑如何优化。</p>
<p>注意到如果我们要合并两个区间，其中第一个区间前$a$位固定，第二个区间前$b$位固定且$a&lt;b$，那么如果把后一个区间只固定前$a$位是等价的。</p>
<p>换句话说如果两个区间在线段树上深度不同，那么深度大的那个可以等价的变成他的深度为$a$的祖先。</p>
<p>那么如果我们把一个集合线段树询问的时候经过的所有点都记下来，另一个只记最底下的点，那么只需要合并深度相同的点即可。</p>
<p>根据线段树的复杂度证明我们可以知道每次询问的时候每个深度只会有$O(1)$个点被经过，所以复杂度是$O(n^2\log v\log (n^2\log v))​$，足以通过。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">499122177</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii &gt; t[<span class="number">62</span>],s[<span class="number">62</span>],ans,t2[<span class="number">62</span>],s2[<span class="number">62</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(op) s[d].pb(mp(l,r));</span><br><span class="line">    <span class="keyword">else</span> t2[d].pb(mp(l,r));</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) {</span><br><span class="line">        <span class="keyword">if</span>(!op) t[d].pb(mp(l,r));</span><br><span class="line">        <span class="keyword">else</span> s2[d].pb(mp(l,r));</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) get(l,mid,x,y,d+<span class="number">1</span>,op);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) get(mid+<span class="number">1</span>,r,x,y,d+<span class="number">1</span>,op);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{<span class="keyword">return</span> (l+r)%mod*((r-l+<span class="number">1</span>)%mod)%mod*inv2%mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l,r;i&lt;=n;i++) read(l),read(r),get(<span class="number">0</span>,(<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>)<span class="number">-1</span>,l,r,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l,r;i&lt;=m;i++) read(l),read(r),get(<span class="number">0</span>,(<span class="number">1l</span>l&lt;&lt;<span class="number">60</span>)<span class="number">-1</span>,l,r,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">61</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:t[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> y:s[i]) ans.pb(mp(x.fr^y.fr,(x.fr^y.fr)+x.sc-x.fr));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">61</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:t2[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> y:s2[i]) ans.pb(mp(x.fr^y.fr,(x.fr^y.fr)+x.sc-x.fr));</span><br><span class="line">    sort(ans.begin(),ans.end());</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:ans) {</span><br><span class="line">        p=max(p,x.fr<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(x.sc&gt;p) res=(res+get_sum(p+<span class="number">1</span>,x.sc))%mod,p=x.sc;</span><br><span class="line">    }write(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>「集训队作业2018」复读机</title>
    <url>/2019/11/27/%E3%80%8C%E9%9B%86%E8%AE%AD%E9%98%9F%E4%BD%9C%E4%B8%9A2018%E3%80%8D%E5%A4%8D%E8%AF%BB%E6%9C%BA/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/450" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/450" target="_blank" rel="noopener">http://uoj.ac/problem/450</a>。</p>
<a id="more"></a>
<p>对于$d=1$答案直接就是$k^n$。</p>
<p>对于$d=2$其实挺经典的，偶数序列的生成函数是：</p>
<script type="math/tex; mode=display">
\frac{e^x+e^{-x}}{2}</script><p>答案就是：</p>
<script type="math/tex; mode=display">
[x^n](\frac{e^x+e^{-x}}{2})^k</script><p>二项式展开就可以做到$O(k)$。</p>
<p>对于$d=3$考虑单位根反演：</p>
<script type="math/tex; mode=display">
\begin{align}
&(\sum_{i=0}^{\infty}[3|i]\frac{x^i}{i!})^k\\
=&(\sum_{i=0}^{\infty}\left(\frac{1}{3}\sum_{j=0}^{2}\omega_3^{ij}\right)\frac{x^i}{i!})^k\\
=&\frac{1}{3^k}(\sum_{j=0}^{2}e^{\omega_3^jx})^k
\end{align}</script><p>其实我一开始没看清数据范围。。以为这里要$O(k)$做结果一直不会。。</p>
<p>可以$O(k^2)​$的话直接暴力二项式展开即可。</p>
<p><del>原根是7，我懒得算就直接上<a href="https://www.wolframalpha.com/input/?i=Primitive+Root+of+19491001" target="_blank" rel="noopener">wolframalpha</a>查了。。</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">19491001</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,d,fac[maxn],ifac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    ifac[k]=qpow(fac[k],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),read(d);gen();</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">1</span>) write(qpow(k,n));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(d==<span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++) ans=(ans+<span class="number">1l</span>l*c(k,i)*qpow(<span class="number">2</span>*i-k,n)%mod)%mod;</span><br><span class="line">        ans=(<span class="number">1l</span>l*ans*qpow(qpow(<span class="number">2</span>,k),mod<span class="number">-2</span>)%mod+mod)%mod;</span><br><span class="line">        write(ans);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,a=qpow(<span class="number">7</span>,(mod<span class="number">-1</span>)/<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++) {</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++) {</span><br><span class="line">                <span class="keyword">int</span> t=(<span class="number">1l</span>l*(i-j)*a%mod+j)%mod;</span><br><span class="line">                t=(t+<span class="number">1l</span>l*(k-i)*a%mod*a%mod)%mod;</span><br><span class="line">                res=(res+<span class="number">1l</span>l*c(i,j)*qpow(t,n)%mod)%mod;</span><br><span class="line">            }</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*c(k,i)*res%mod)%mod;</span><br><span class="line">        }write(<span class="number">1l</span>l*ans*qpow(qpow(<span class="number">3</span>,k),mod<span class="number">-2</span>)%mod);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>单位根反演</tag>
      </tags>
  </entry>
  <entry>
    <title>「UNR #3」百鸽笼</title>
    <url>/2019/11/27/%E3%80%8CUNR-3%E3%80%8D%E7%99%BE%E9%B8%BD%E7%AC%BC/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/390" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/390" target="_blank" rel="noopener">http://uoj.ac/problem/390</a>。</p>
<a id="more"></a>
<p>如果我们加一只鸽子，那么问题就变成了第$x$列笼子最后一个满的概率。</p>
<p>考虑容斥，我们枚举谁比$x$后满，答案就是$\sum_ s (-1)^{|s|}f(s)$，$f$就是至少$s$集合比$x$后满的概率。</p>
<p>考虑如何算$f(s)$，容易发现除了$s$和$x$其他的列不会对答案产生影响，而且鸽子飞入的序列一定形如有$a_x$个$x$和$&lt;a_j$个$j$（$j\in s$），并且最后以$x$结尾。</p>
<p>这样的序列如果长度为$l​$，那么可以造成$1/(|s|+1)^l​$的贡献。</p>
<p>可以利用背包去算这样的序列的方案数，背包是$O(n^4)$的，所以复杂度$O(2^nn^5)$。</p>
<p>注意到一个序列的贡献只和长度和$|s|$有关，所以枚举子集其实是很不必要的，我们可以考虑给背包加一个状态表示当前用到了几个列，那么算答案的时候根据这一维乘个系数就好了，复杂度$O(n^6)$。</p>
<p>考虑如何优化，注意到枚举一开始的$x$的时候，背包每次只会少一个元素，在新增一个元素，那么把原来的背包撤销掉那个元素就可以去掉一个$n$了，复杂度$O(n^5)$。</p>
<p><del>题解里的生成函数做法太仙啦，我完全看不懂</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">910</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn];</span><br><span class="line"><span class="keyword">int</span> c[maxn][maxn],ipw[maxn][maxn],f[<span class="number">31</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) c[i][j]=(c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> x=qpow(i,mod<span class="number">-2</span>);ipw[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) ipw[i][j]=<span class="number">1l</span>l*ipw[i][j<span class="number">-1</span>]*x%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;~j;j--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;a[x]&amp;&amp;k&lt;=j;k++)</span><br><span class="line">                f[i][j]=(f[i][j]+<span class="number">1l</span>l*f[i<span class="number">-1</span>][j-k]*c[j][k]%mod+mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;a[x]&amp;&amp;k&lt;=j;k++)</span><br><span class="line">                f[i][j]=(f[i][j]<span class="number">-1l</span>l*f[i<span class="number">-1</span>][j-k]*c[j][k]%mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),m+=a[i];</span><br><span class="line">    gen();f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        erase(i);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=m-a[i];k++)</span><br><span class="line">                ans=(ans+<span class="number">1l</span>l*(j&amp;<span class="number">1</span>?<span class="number">-1</span>:<span class="number">1</span>)*f[j][k]*c[k+a[i]<span class="number">-1</span>][a[i]<span class="number">-1</span>]%mod*ipw[j+<span class="number">1</span>][k+a[i]]%mod)%mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,(ans+mod)%mod);</span><br><span class="line">        insert(i);</span><br><span class="line">    }<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>「UNR #2」黎明前的巧克力</title>
    <url>/2019/11/25/%E3%80%8CUNR-2%E3%80%8D%E9%BB%8E%E6%98%8E%E5%89%8D%E7%9A%84%E5%B7%A7%E5%85%8B%E5%8A%9B/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/contest/39/problem/310" target="_blank" rel="noopener"></a><a href="http://uoj.ac/contest/39/problem/310" target="_blank" rel="noopener">http://uoj.ac/contest/39/problem/310</a>。</p>
<a id="more"></a>
<p>好仙啊这个题。。</p>
<p>首先容易知道，如果我们枚举他俩集合的并集，假设为$s$，如果$s$的异或和为$0$，那么$s$的任意一个子集和它的补集都构成一种方案，所以贡献为$2^{|s|}$。</p>
<p>那么容易得到答案的生成函数：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^{n}(2x^{a_i}+1)</script><p>生成函数乘积定义为异或卷积。</p>
<p>一个很朴素的想法就是把每一项都$\rm FWT$起来，复杂度$O(nm2^m)$（令$m=20$，就是值域的二进制位数），一个点都过不了。。。</p>
<p>注意到每一项只有两项是有值的，如果直接上$\rm FWT$也太浪费了点，考虑找一下规律看看能发现什么，首先异或$\rm FWT$的式子是长这样的：</p>
<script type="math/tex; mode=display">
{\rm FWT}(f)_i=\sum_{j=0}^{2^m-1}f_i\cdot (-1)^{{\rm bitcnt}(i\&j)}</script><p>那么显然对于$f_0=1$，每一位都会加上$1$，而对于$f_{a_i}$，有些位会$+2$，有些$-2$，换句话说我们$\rm FWT$完了后每一位只可能是$-1$或$3​$。</p>
<p>接下来的过程比较魔幻……我们换一种思路，本来我们是想求$\rm FWT$完了后每一位的乘积，现在我们只需要求有多少个项在当前位是$-1$就好了，假设有$x$个那么当前位的答案就是$(-1)^x\cdot 3^{n-x}$。</p>
<p>考虑怎么搞出这个信息，注意到把这些式子加起来是可以很快做到的，因为我们可以把原式子加起来再$\rm FWT$，因为$\rm FWT$的本质也是系数表达式和点值表达式的转换。</p>
<p>那么我们就可以得到一个方程：$(-1)\cdot x+3(n-x)=a$，那么就可以得到当前位是多少，最后在$\rm FWT$回去就好了。</p>
<p>复杂度$O(n+m2^m)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1.1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">499122177</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=r[i+j+k];</span><br><span class="line">                r[j+k]=(x+y)%mod,r[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">                <span class="keyword">if</span>(op&lt;<span class="number">0</span>) r[j+k]=<span class="number">1l</span>l*r[j+k]*inv2%mod,r[i+j+k]=<span class="number">1l</span>l*r[i+j+k]*inv2%mod;</span><br><span class="line">            }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(m);n=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=m;i++) read(x),f[x]+=<span class="number">2</span>,f[<span class="number">0</span>]++;</span><br><span class="line">    fwt(f,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) {</span><br><span class="line">        <span class="keyword">int</span> x=((m+f[i])%mod)/<span class="number">4</span>;</span><br><span class="line">        f[i]=<span class="number">1l</span>l*qpow(<span class="number">3</span>,x)*((m-x)&amp;<span class="number">1</span>?mod<span class="number">-1</span>:<span class="number">1</span>)%mod;</span><br><span class="line">    }</span><br><span class="line">    fwt(f,<span class="number">-1</span>);</span><br><span class="line">    write((f[<span class="number">0</span>]<span class="number">-1</span>+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>UOJ Round做题记录</title>
    <url>/2019/11/20/UOJ-Round%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><del>我又懒的新建文章了</del></p>
<p>据说这些题还不错，就来做做。</p>
<a id="more"></a>
<h2 id="【UR-1】缩进优化"><a href="#【UR-1】缩进优化" class="headerlink" title="【UR #1】缩进优化"></a>【UR #1】缩进优化</h2><p>对于确定的$x$，答案是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}\lfloor \frac{a_i}{x}\rfloor +a_i- \lfloor \frac{a_i}{x}\rfloor \cdot x</script><p>也就是说要算$\sum \lfloor a_i/x\rfloor $。</p>
<p>其实只需要考虑题目给出来的模型就好了，每次枚举$k$，会对答案造成$\sum [a_i\geqslant kx]$的贡献，开个桶后缀和一下就可以$O(1)$求。</p>
<p>复杂度$O(n\log n)$。</p>
<p><a href="http://uoj.ac/submission/373061" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-1】外星人"><a href="#【UR-1】外星人" class="headerlink" title="【UR #1】外星人"></a>【UR #1】外星人</h2><p>设$f_i$表示当前值为$i$，并且$&gt;i$的数全部处理完毕的方案数。</p>
<p>考虑枚举$j$，可以转移到$f_{i\bmod j}$，那么现在$(i\bmod j,i]$的数都不会影响答案了，可以随便填，乘个组合数就好了。</p>
<p><a href="http://uoj.ac/submission/373076" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-2】猪猪侠再战括号序列"><a href="#【UR-2】猪猪侠再战括号序列" class="headerlink" title="【UR #2】猪猪侠再战括号序列"></a>【UR #2】猪猪侠再战括号序列</h2><p>因为给了$n$次操作，可以考虑把序列构造成<code>(((())))</code>的形式。</p>
<p>每次找到最左边那个右括号，然后找到离它最近的右边的左括号，翻转这一段，这样最多只有$n$次操作。</p>
<p>显然翻转的右端点单调递增，注意到翻转的时候中间的一段全都是右括号，所以每次翻转只需要交换两个值，复杂度$O(n)$。</p>
<p><a href="http://uoj.ac/submission/373078" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-3】核聚变反应强度"><a href="#【UR-3】核聚变反应强度" class="headerlink" title="【UR #3】核聚变反应强度"></a>【UR #3】核聚变反应强度</h2><p>次大公约数就是$\gcd$除掉一个最小的质因子。</p>
<p>所以先把$a_1$分解，然后对后面先求个$\gcd$，然后拿质数从小到大试一下能不能除就好了。</p>
<p><a href="http://uoj.ac/submission/373091" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-3】铀仓库"><a href="#【UR-3】铀仓库" class="headerlink" title="【UR #3】铀仓库"></a>【UR #3】铀仓库</h2><p>根据调整法容易得知选的点上必然有箱子。</p>
<p>考虑二分答案，问题转化成了求叠出$k$个箱子的最小时间。</p>
<p>注意到确定起点之后选的箱子一定是连续的一段，并且这段的左右端点随着起点的增加是单调递增的，所以可以用两个指针维护一下，顺便维护下两端的使用个数，因为两端不一定选满了。</p>
<p>计算答案可以把式子写出来之后，发现只需要维护$a_i$的前缀和和$a_i\cdot x_i$的前缀和即可。</p>
<p>复杂度$O(n\log (\sum a_i))$。</p>
<p><a href="http://uoj.ac/submission/373093" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-4】元旦三侠的游戏"><a href="#【UR-4】元旦三侠的游戏" class="headerlink" title="【UR #4】元旦三侠的游戏"></a>【UR #4】元旦三侠的游戏</h2><p>简单博弈题，直接爆搜加个记忆化就能过了。</p>
<p>注意特判下$b=1,a&gt;\sqrt n$的情况，这种情况下只能$a$加一，那么状态数就被减少到了$\sqrt n$。</p>
<p><a href="http://uoj.ac/submission/373096" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-4】元旦激光炮"><a href="#【UR-4】元旦激光炮" class="headerlink" title="【UR #4】元旦激光炮"></a>【UR #4】元旦激光炮</h2><p>好神奇的题啊，看了题解才会的。</p>
<p>考虑令$p=\lfloor \frac{k}{3}\rfloor$，然后对$a,b,c$都询问一遍$p$这个位置的值，假设最小的是$a$，显然$a$最大的排名为$3p-2$，那么就是说$a$及小于$a$的数都不可能是答案，所以我们可以直接删掉$a$的前$p$位，那么可以得到一个$k=k-p$的子问题。</p>
<p>当$k\leqslant 2$的时候直接暴力问就好了。</p>
<p>这样最多问$\lceil \log_{3/2} n\rceil +6$次，足矣通过此题。</p>
<p><a href="http://uoj.ac/submission/373101" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-5】怎样提高智商"><a href="#【UR-5】怎样提高智商" class="headerlink" title="【UR #5】怎样提高智商"></a>【UR #5】怎样提高智商</h2><p>很有意思的构造题，如果我们每一道题都填<code>A 0 0 0 0</code>，答案就是$4\cdot 3^{n-1}$，因为除了最后一题其他的都有三种填法。</p>
<p><del>证明咕咕咕了，可以去看<a href="http://vfleaking.blog.uoj.ac/blog/62" target="_blank" rel="noopener">官方题解</a></del></p>
<p><a href="http://uoj.ac/submission/373164" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-5】怎样跑得更快"><a href="#【UR-5】怎样跑得更快" class="headerlink" title="【UR #5】怎样跑得更快"></a>【UR #5】怎样跑得更快</h2><p>感觉这种题都挺套路的。。。做起来还是比较简单的。</p>
<p>首先把式子变换一下，套一个莫反上去：</p>
<script type="math/tex; mode=display">
\begin{align*}
\sum_{j = 1}^{n} \gcd(i, j)^c \cdot {\rm lcm}(i, j)^d \cdot x_j &\equiv b_i \pmod{p}\\
\sum_{j=1}^{n} \gcd(i,j)^{c-d}~j^dx_j &\equiv \frac{b_i}{i^d} \pmod{p}\\
\sum_{w|i}^nw^{c-d}\sum_{j=1}^{n/w} j^dw^dx_{jw}[\gcd(i/w,j)=1]&\equiv \frac{b_i}{i^d} \pmod{p}\\
\sum_{w|i}^nw^{c}\sum_{j=1}^{n/w} j^dx_{jw}\sum_{t|i/w,t|j}\mu(t)&\equiv \frac{b_i}{i^d} \pmod{p}\\
\sum_{w|i}^nw^{c}\sum_{wt|i}\mu(t)t^d\sum_{j=1}^{n/wt} j^dx_{jwt}&\equiv \frac{b_i}{i^d} \pmod{p}\\
\sum_{T|i}\left(\sum_{w|T}^nw^{c-d}\mu(\frac{T}{w})T^d\right)\sum_{j=1}^{n/T}j^dx_{jT}&\equiv \frac{b_i}{i^d} \pmod{p}\\
\end{align*}</script><p>都是比较好懂的变换就不说了。注意到前面一块可以预处理，设：</p>
<script type="math/tex; mode=display">
f(T)=\sum_{w|T}^nw^{c-d}\mu(\frac{T}{w})T^d\\
g(T,x)=\sum_{j=1}^{n/T}j^dx_{jT}</script><p>这一来式子就很简洁了：</p>
<script type="math/tex; mode=display">
\sum_{T|i}f(T)g(T,x)\equiv \frac{b_i}{i^d} \pmod{p}</script><p>我们把$f(T)g(T,x)$当做一个未知数，那么这就是一个系数都为$1$的方程，注意到每个方程左边未知量总和为$\sum n/i=O(n\log n)$，所以可以暴力解方程，代码大概是这样的：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i) g[j]-=g[i];</span><br></pre></td></tr></tbody></table></figure>
<p>然后把$f(T)$的系数除掉之后，可以得到一个每个方程形如：</p>
<script type="math/tex; mode=display">
\sum_{j=1}^{n/T}j^dx_{jT}=g(T,x)</script><p>右边是知道的，左边也只有$O(n\log n)$个项，所以也可以暴力解，代码长这样（你就把它当伪代码好了）：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i) g[i]-=g[j]*<span class="built_in">pow</span>(j/i,d);</span><br></pre></td></tr></tbody></table></figure>
<p>然后就做完了，复杂度$O(n\log n)$。</p>
<p>注意判无解情况，无解只有可能是某个方程变成了$0\cdot x=1$形式。</p>
<p>多解情况其实不需要管，如果出现了一个$0\cdot x=0$的方程，代码会自动附成$0$的 <del>总觉得这句话很奇怪，但是就是不知道该怎么说，就这样吧</del>。</p>
<p><a href="http://uoj.ac/submission/373192" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-6】破解密码"><a href="#【UR-6】破解密码" class="headerlink" title="【UR #6】破解密码"></a>【UR #6】破解密码</h2><p>发现可以得到一堆的方程，观察一下可以发现这个方程很好解：只需要把第$i$个方程乘上$26$再减去第$i+1$个方程，可以得到：</p>
<script type="math/tex; mode=display">
(26^n-1)x_i=26h_{i-1}-h_i</script><p>然后写完交一发发现被卡成$50$分。。。看了数据才发现是少考虑了$26^n=1$的情况。</p>
<p>这种情况下$h_i=26h_{i-1}$，所以我们只需要构造一个字符串满足$h_0$就好了，可以发现后面的一定满足条件，那么我们直接$26$进制拆分即可。</p>
<p><a href="http://uoj.ac/submission/373365" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-6】智商锁"><a href="#【UR-6】智商锁" class="headerlink" title="【UR #6】智商锁"></a>【UR #6】智商锁</h2><p>太神啦，我完全没想法只好看题解了。</p>
<p>题解给出来的做法是真的神奇，我复述一下好了：</p>
<p>首先我们随机$1000$个$12$个点的联通无向图，利用矩阵树求出生成树个数，为了让生成树个数多一点，我们多随机点边，具体来说每条边有$0.8$的概率会被加入。</p>
<p>然后对于每个$k$，我么试图找到一个四元组满足他们乘起来等于$k$，这里直接利用折半搜索即可。</p>
<p>这个做法的正确性是极其接近$1​$的，具体证明可以看<a href="http://vfleaking.blog.uoj.ac/blog/180" target="_blank" rel="noopener">原题解</a><del>（证明咕咕咕了）</del>。</p>
<p><a href="http://uoj.ac/submission/373374" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-7】水题生成器"><a href="#【UR-7】水题生成器" class="headerlink" title="【UR #7】水题生成器"></a>【UR #7】水题生成器</h2><p>我太菜了又不会做。。</p>
<p>看了题解发现我之前想的贪心是对的。。。就是说把约数全部搞出来然后从大到小贪心，能加就加，这样加的次数一定不超过$n$。</p>
<p>然后有一种更好的解法，考虑一个叫【反阶乘进位制】的东西，其实很好理解，就是说第$k$位的位值为$n^{\underline k}$，也就是下降幂 <del>所以我觉得这玩意叫下降幂进位制是不是更好</del>，那么这个数可以分解成$\sum_{i=0}^{n}a_i\cdot n^{\underline i}$，显然可以知道$a_i&lt;n-i$，否则可以进位。根据这个也很容易证明上面的贪心。</p>
<p><a href="http://uoj.ac/submission/373384" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UER-1】猜数"><a href="#【UER-1】猜数" class="headerlink" title="【UER #1】猜数"></a>【UER #1】猜数</h2><p>最大值是$g+l$，最小值是$2\sqrt {gl}$。</p>
<p><a href="http://uoj.ac/submission/373394" target="_blank" rel="noopener">code</a>。<del>别问我为啥int128，别问为啥写的这么复杂，问就是我傻QAQ</del></p>
<h2 id="【UER-1】DZY-Loves-Graph"><a href="#【UER-1】DZY-Loves-Graph" class="headerlink" title="【UER #1】DZY Loves Graph"></a>【UER #1】DZY Loves Graph</h2><p><del>我以前一直以为UER真的很ez</del></p>
<p>不过这题是真的不难，考虑因为加的边是递增的，所以最小生成树一定是尽可能选早加进去的，所以可以拿可撤销并查集维护，也就是按秩合并不写路径优化的并查集，这个东西每次只会改$O(1)​$的值。</p>
<p>那么现在只有一种操作不能维护了，就是<code>Delete</code>后面马上跟一个<code>Return</code>，其实也简单，我么特判这种情况，每次把删除操作的答案算出来，不进行删除操作即可。</p>
<p>那么只需要记录下当前答案的组成，如果最靠后那条边被删掉了，原图一定不连通，否则答案不改变。</p>
<p>复杂度$O(n\log n)$。</p>
<p><a href="http://uoj.ac/submission/373404" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UER-2】手机的生产"><a href="#【UER-2】手机的生产" class="headerlink" title="【UER #2】手机的生产"></a>【UER #2】手机的生产</h2><p>注意到一段长度为$x$的变量$\&amp;$起来会产生$1$个答案为$1$的状态和$x$个答案为$0$的状态。</p>
<p>或起来也同理，答案就是所有前缀积相加。</p>
<p><a href="http://uoj.ac/submission/373408" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UR-8】赴京赶考"><a href="#【UR-8】赴京赶考" class="headerlink" title="【UR #8】赴京赶考"></a>【UR #8】赴京赶考</h2><p>注意到由于只有$0,1$两种取值，如果$a_i\ne a_{i+1}$那么任意一种$(i,j)\to (i+1,j)$的走法都会花费时间，否则不会。</p>
<p>所以每一步只会取决于一维，分开求直接过去还是反方向过去的最小值加起来就好了。</p>
<p><a href="http://uoj.ac/submission/373495" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UNR-2】黎明前的巧克力"><a href="#【UNR-2】黎明前的巧克力" class="headerlink" title="【UNR #2】黎明前的巧克力"></a>【UNR #2】黎明前的巧克力</h2><p><a href="https://hyscere.github.io/2019/11/25/%E3%80%8CUNR-2%E3%80%8D%E9%BB%8E%E6%98%8E%E5%89%8D%E7%9A%84%E5%B7%A7%E5%85%8B%E5%8A%9B/" target="_blank" rel="noopener">题解在这里</a>。</p>
<h2 id="【UNR-3】鸽子固定器"><a href="#【UNR-3】鸽子固定器" class="headerlink" title="【UNR #3】鸽子固定器"></a>【UNR #3】鸽子固定器</h2><p>枚举右端点把左端点往前扫，用一个堆来维护当前的集合，如果右端点被弹堆了就不做了，因为再做下去答案肯定不优。</p>
<p>这样搞其实对复杂度没帮助，还是$O(n^2\log m)$，但是注意到如果当前有一个点不能被加入堆，那么由于右端点是从左往右扫的，它永远也不会被加入堆了，所以我们可以搞一个链表维护一下，复杂度$O(nm\log m)$。</p>
<p><a href="http://uoj.ac/submission/373530" target="_blank" rel="noopener">code</a>。</p>
<p><del>话说这题怎么这么卡我常啊，可能是我用太多stl了，然后我又懒得手写，就只好开O2混过去了</del></p>
<h2 id="【UNR-3】To-Do-Tree"><a href="#【UNR-3】To-Do-Tree" class="headerlink" title="【UNR #3】To Do Tree"></a>【UNR #3】To Do Tree</h2><p>贪心，很好猜但是我不会证 <del>看起来就很对吧</del></p>
<p>证明看<a href="http://wuhongxun.blog.uoj.ac/blog/3670" target="_blank" rel="noopener">官方题解</a>好了。</p>
<p><a href="http://uoj.ac/submission/373533" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UNR-3】配对树"><a href="#【UNR-3】配对树" class="headerlink" title="【UNR #3】配对树"></a>【UNR #3】配对树</h2><p>注意到一条边如果会被算到答案，只有可能是当前区间在这条边子树里的有奇数个，才会有一个点连出来，否则直接在子树里两两配对一定优。</p>
<p>那么如果在序列上把在子树里的点标为$1$，其他的标为$0$，就很好统计方案数了，具体来说，我们搞一个前缀和$s$，那么一个区间$[l,r]$会被统计到当且仅当$(r-l+1)\bmod 2=0,s_r-s_{l-1}\bmod 2=1$。</p>
<p>所以我们可以搞一个线段树维护这个，注意到实际上我们需要的信息是$[l-1,r]$，所以可以在统计区间的时候搞成左闭右开什么的。</p>
<p>那么直接上线段树合并就好了，复杂度$O(n\log n)$。</p>
<p><a href="http://uoj.ac/submission/373555" target="_blank" rel="noopener">code</a>。</p>
<h2 id="【UNR-3】百鸽笼"><a href="#【UNR-3】百鸽笼" class="headerlink" title="【UNR #3】百鸽笼"></a>【UNR #3】百鸽笼</h2><p><a href="https://hyscere.github.io/2019/11/27/%E3%80%8CUNR-3%E3%80%8D%E7%99%BE%E9%B8%BD%E7%AC%BC/" target="_blank" rel="noopener">sol</a>。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解合集</category>
      </categories>
  </entry>
  <entry>
    <title>「luogu 4931」情侣？给我烧了！</title>
    <url>/2019/11/20/%E3%80%8Cluogu-4931%E3%80%8D%E6%83%85%E4%BE%A3%EF%BC%9F%E7%BB%99%E6%88%91%E7%83%A7%E4%BA%86%EF%BC%81/</url>
    <content><![CDATA[<p>题目链接：<a href="https://www.luogu.org/problem/P4931" target="_blank" rel="noopener"></a><a href="https://www.luogu.org/problem/P4931" target="_blank" rel="noopener">https://www.luogu.org/problem/P4931</a>。</p>
<a id="more"></a>
<p>蛮有意思的题，我一开始的想法是这样的：</p>
<p>设$f_k$表示至少$k$对情侣坐在一起，那么考虑枚举这$k$对是怎么坐的，剩下的随便填，式子就是：</p>
<script type="math/tex; mode=display">
f_k=\binom{n}{k}^22^kk!(2n-2k)!</script><p>显然可以把恰好容斥出来，但是这样每次算都要$O(n)$，复杂度就是$O(Tn^2)$，不太能过。</p>
<p>然后有一个很有意思的东西就是说，可以设$f_n$表示$n$对情侣没有一对坐在一起的方案数，那么可以直接把答案表示出来：</p>
<script type="math/tex; mode=display">
ans_{n,k}=\binom{n}{k}^22^kk!f_{n-k}</script><p>其实和上面是一样的，只是说这次填剩下的人的时候保证了两两不坐在一起，那么这个东西就是恰好。</p>
<p>注意到$f$不依赖于某个$n$，也就是说如果我们可以$O(n^2)$算$f$，那么复杂度就降为了$O(Tn+n^2)$，可以通过没加强的版本。</p>
<p>算$f$有个比较显然的办法就是，还是用至少$k$个坐在一起的方案数去容斥，这次只需要容斥恰好$0$个坐在一起的方案数，那么容易写出式子：</p>
<script type="math/tex; mode=display">
f_n=\sum_{i=0}^{n}(-1)^i\binom{n}{i}^22^ii!(2n-2i)!</script><p>这样就可以通过未加强版了。</p>
<p><del>然后我就不会加强版了。。。</del></p>
<p>去瞄了一眼题解，发现有神仙使劲优化上面式子然后得到了递推式。。但是我太菜了没看懂。。。这里有个小清新的想法 <del>看题解看来的</del>：</p>
<p>现在忘记之前的容斥，我们考虑找到一个$f$的递推关系，我们枚举第一排坐的是谁，因为这俩不能是情侣所以有$2n(2n-2)$种情况，那么考虑对应的两个人是怎么坐的，有两种情况：</p>
<ul>
<li>他们俩坐一起了，那么对其他人不影响了，方案数就是$2(n-1)f_{n-2}$。</li>
<li>否则我们硬点他俩不能坐一起，方案数就是$f_{n-1}$。</li>
</ul>
<p>所以递推式就是$f_n=4n(n-1)f_{n-1}+8n(n-1)^2f_{n-2}$。</p>
<p>复杂度$O(n+T)$（针对加强版题面）。</p>
<p>给个加强版的代码：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],fac[maxn],ifac[maxn],pw2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">1e7</span>;fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=pw2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod,pw2[i]=<span class="number">1l</span>l*pw2[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    ifac[n]=qpow(fac[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>,f[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) f[i]=<span class="number">2l</span>l*i*<span class="number">2l</span>l*(i<span class="number">-1</span>)%mod*(f[i<span class="number">-1</span>]+<span class="number">2l</span>l*(i<span class="number">-1</span>)*f[i<span class="number">-2</span>]%mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    gen();<span class="keyword">int</span> t;read(t);</span><br><span class="line">    <span class="keyword">while</span>(t--) {</span><br><span class="line">        <span class="keyword">int</span> n,i;read(n),read(i);</span><br><span class="line">        write(<span class="number">1l</span>l*c(n,i)*c(n,i)%mod*pw2[i]%mod*fac[i]%mod*f[n-i]%mod);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>计数</tag>
        <tag>容斥</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOI 2019 Final」独特的城市</title>
    <url>/2019/11/19/%E3%80%8CJOI-2019-Final%E3%80%8D%E7%8B%AC%E7%89%B9%E7%9A%84%E5%9F%8E%E5%B8%82/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3014" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/3014" target="_blank" rel="noopener">https://loj.ac/problem/3014</a>。</p>
<a id="more"></a>
<p>注意到以$x$为根，答案只可能是直径远的那一端到$x$路径上的点。</p>
<p>所以我们可以拉一条直径出来，然后从两个端点开始分别$\rm dfs$，那么答案只有可能是根到当前点路径上的点了。</p>
<p>用一个栈来维护当前的答案点的集合，对树长链剖分（其实也没怎么用到长链剖分的性质，只是长的比较像而已），假设重儿子深度为$a$，其他儿子深度最大为$b$，那么如果$\rm dfs$重儿子，就需要把$x$上面距离$\leqslant b$的点全部弹栈，其他儿子就需要把$\leqslant a$的点弹栈，那么显然先$\rm dfs$重儿子，这样就不需要恢复多弹的那些点了。</p>
<p>对于特产就记个桶每次加一减一的时候判一下答案变不变就行了。</p>
<p>复杂度$O(n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,head[maxn],tot,a[maxn],cnt,dep[maxn],d[maxn],s[maxn],ans[maxn],sta[maxn],top,r[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    d[x]=d[fa]+<span class="number">1</span>;s[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) {</span><br><span class="line">            get(e[i].to,x);</span><br><span class="line">            <span class="keyword">if</span>(dep[e[i].to]&gt;dep[s[x]]) s[x]=e[i].to;</span><br><span class="line">        }</span><br><span class="line">    dep[x]=dep[s[x]]+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(!r[a[x]]) cnt++;</span><br><span class="line">    r[a[x]]++;sta[++top]=x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> x=sta[top])</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(r[a[x]]==<span class="number">1</span>) cnt--;r[a[x]]--;top--;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa&amp;&amp;e[i].to!=s[x]) mx=max(mx,dep[e[i].to]);</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;d[x]-d[sta[top]]&lt;=mx) pop();</span><br><span class="line">    push(x);<span class="keyword">if</span>(s[x]) solve(s[x],x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa&amp;&amp;e[i].to!=s[x]) {</span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;d[x]-d[sta[top]]&lt;=dep[s[x]]) pop();push(x);</span><br><span class="line">            solve(e[i].to,x);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">while</span>(top&amp;&amp;d[x]-d[sta[top]]&lt;=dep[s[x]]) pop();</span><br><span class="line">    ans[x]=max(ans[x],cnt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),ins(x,y),ins(y,x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    get(<span class="number">1</span>,<span class="number">0</span>);<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]&gt;d[x]) x=i;</span><br><span class="line">    get(x,<span class="number">0</span>);solve(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]&gt;d[x]) x=i;</span><br><span class="line">    get(x,<span class="number">0</span>),solve(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) write(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>「SNOI2017」遗失的答案</title>
    <url>/2019/11/19/%E3%80%8CSNOI2017%E3%80%8D%E9%81%97%E5%A4%B1%E7%9A%84%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2257" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/2257" target="_blank" rel="noopener">https://loj.ac/problem/2257</a>。</p>
<a id="more"></a>
<p>可以一开始令$L=L/G$，显然$G\not \mid L$的时候答案全是$0$，那么现在只需要考虑$L$的约数即可。</p>
<p>对于每个$L$的质因数，考虑选出来的数的当前质因数的指数，显然要满足最小值为$0$，最大值等于$L$的指数。</p>
<p>注意到$L$的质因数最多$8$个，并且约数个数不超过$1000$个，我们可以状压$\rm dp$：设$f_{i,s,t}$表示考虑了前$i$个约数，有$s$这些质因数达到了最小值，$t$达到了最大值。</p>
<p>由于我们现在有一个限制条件是说必须选$x$这个数，所以我们在搞出一个$g$表示后缀的$\rm dp$值，那么每次把$f_{i-1},g_{i+1}$合并一下就可以得到需要的$\rm dp$值。</p>
<p>注意到这是个或卷积，可以$\rm FWT$优化。</p>
<p>假设当前卷积出来的东西是$h_s$，那么答案就是$\sum _{t\mid state_x=all}h_t$，利用$\rm FWT​$做一遍超集和就好了。（我写完了才发现这地方直接暴力预处理就好了。。。不需要这么花里胡哨。。<del>我亏了</del>）</p>
<p>复杂度很玄学。。预处理看起来像$2^{16}\cdot 16\cdot 1000$，但是实际上没有数可以卡慢，因为质因数达到最大值之后约数个数就不多了，反之也是一样的。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,G,l,f[<span class="number">1002</span>][(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)+<span class="number">1</span>],g[<span class="number">1002</span>][(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)+<span class="number">1</span>],h[<span class="number">1002</span>][(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)+<span class="number">1</span>],q,r[maxn],cnt,pri[maxn],tot,ms[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=l;i++) {</span><br><span class="line">        <span class="keyword">if</span>(l%i) <span class="keyword">continue</span>;</span><br><span class="line">        r[++cnt]=i;</span><br><span class="line">        <span class="keyword">if</span>(i*i!=l) r[++cnt]=l/i;</span><br><span class="line">    }sort(r+<span class="number">1</span>,r+cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x=l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++) {</span><br><span class="line">        <span class="keyword">if</span>(x%i) <span class="keyword">continue</span>;</span><br><span class="line">        pri[++tot]=i;</span><br><span class="line">        <span class="keyword">while</span>(x%i==<span class="number">0</span>) x/=i;</span><br><span class="line">    }<span class="keyword">if</span>(x!=<span class="number">1</span>) pri[++tot]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) {</span><br><span class="line">            <span class="keyword">if</span>(r[i]%pri[j]) ms[i]|=<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>((l/r[i])%pri[j]) ms[i]|=<span class="number">1</span>&lt;&lt;(j+tot<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(r[cnt]*G&gt;n) cnt--;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt_or</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;(tot*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                <span class="keyword">if</span>(op&gt;<span class="number">0</span>) update(r[i+j+k],r[j+k]);</span><br><span class="line">                <span class="keyword">else</span> r[i+j+k]=(r[i+j+k]-r[j+k]+mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt_and</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;(tot*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                <span class="keyword">if</span>(op&gt;<span class="number">0</span>) update(r[j+k],r[i+j+k]);</span><br><span class="line">                <span class="keyword">else</span> r[j+k]=(r[j+k]-r[i+j+k]+mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(G),read(l),read(q);</span><br><span class="line">    <span class="keyword">if</span>(l%G) {<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) <span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">return</span> <span class="number">0</span>;}</span><br><span class="line">    l/=G;gen();</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=g[cnt+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;(tot*<span class="number">2</span>);s++) {</span><br><span class="line">            update(f[i+<span class="number">1</span>][s],f[i][s]);</span><br><span class="line">            update(f[i+<span class="number">1</span>][s|ms[i+<span class="number">1</span>]],f[i][s]);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt+<span class="number">1</span>;i&gt;<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;(tot*<span class="number">2</span>);s++) {</span><br><span class="line">            update(g[i<span class="number">-1</span>][s],g[i][s]);</span><br><span class="line">            update(g[i<span class="number">-1</span>][s|ms[i<span class="number">-1</span>]],g[i][s]);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) {</span><br><span class="line">        fwt_or(f[i<span class="number">-1</span>],<span class="number">1</span>),fwt_or(g[i+<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;(tot*<span class="number">2</span>);s++) h[i][s]=<span class="number">1l</span>l*f[i<span class="number">-1</span>][s]*g[i+<span class="number">1</span>][s]%mod;</span><br><span class="line">        fwt_or(h[i],<span class="number">-1</span>);</span><br><span class="line">        fwt_and(h[i],<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> x;read(x);</span><br><span class="line">        <span class="keyword">if</span>(x%G) {<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;}</span><br><span class="line">        x/=G;</span><br><span class="line">        <span class="keyword">if</span>(l%x||x&gt;n) {<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;}</span><br><span class="line">        <span class="keyword">int</span> p=lower_bound(r+<span class="number">1</span>,r+cnt+<span class="number">1</span>,x)-r;</span><br><span class="line">        write(h[p][(<span class="number">1</span>&lt;&lt;(tot*<span class="number">2</span>))<span class="number">-1</span>-ms[p]]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>JOISC 2018 简要题解</title>
    <url>/2019/11/13/JOISC-2018-%E7%AE%80%E8%A6%81%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problems/search?keyword=joisc+2018" target="_blank" rel="noopener"></a><a href="https://loj.ac/problems/search?keyword=joisc+2018" target="_blank" rel="noopener">https://loj.ac/problems/search?keyword=joisc+2018</a>。</p>
<a id="more"></a>
<h2 id="「JOISC-2018-Day-1」道路建设"><a href="#「JOISC-2018-Day-1」道路建设" class="headerlink" title="「JOISC 2018 Day 1」道路建设"></a>「JOISC 2018 Day 1」道路建设</h2><p>用$\rm LCT$维护颜色，显然每条实链里的颜色是一样的。</p>
<p>那个操作和$\rm access$也是一样的，所以可以在$\rm access$的时候把颜色段记录下来，然后用树状数组求偏序，顺便再$\rm splay$上打标记把这条链都染上给定的颜色。</p>
<p>代码还挺好写的，复杂度$O(n\log ^2 n)$。</p>
<p><a href="https://loj.ac/submission/674163" target="_blank" rel="noopener">code</a>。</p>
<h2 id="「JOISC-2018-Day-1」帐篷"><a href="#「JOISC-2018-Day-1」帐篷" class="headerlink" title="「JOISC 2018 Day 1」帐篷"></a>「JOISC 2018 Day 1」帐篷</h2><p>普及组$\rm dp$题，$f_{i,j}$表示$i\times j$的矩形的答案，转移的时候考虑新增一列就行了。</p>
<p><a href="https://loj.ac/submission/674755" target="_blank" rel="noopener">code</a>。</p>
<h2 id="「JOISC-2018-Day-2」修行"><a href="#「JOISC-2018-Day-2」修行" class="headerlink" title="「JOISC 2018 Day 2」修行"></a>「JOISC 2018 Day 2」修行</h2><p>好仙啊，研究了半天题解才搞明白。</p>
<p>首先可以把方案数转成概率，即恰好$k-1$个$a_i&gt;a_{i+1}$的概率。</p>
<p>然后这个东西等价于$n$个$[0,1)$的随机变量，恰好$k-1$个$a_i&gt;a_{i+1}$的概率。</p>
<p>考虑通过$a_i$构造一组$b_i\in [0,1)$，使得$b_i$的前缀和的小数部分等于$a_i$，那么显然每个$a_i&gt;a_{i+1}$的位置$b_i$前缀和的整数部分都要加一。</p>
<p>显然$a_i,b_i$是一一对应的。</p>
<p>也就是说这个东西等价于现在有$n$个$[0,1)$的随机变量$b_i$满足$k-1\leqslant \sum b_i&lt;k$的概率。</p>
<p>考虑这个东西怎么算，首先我们只需要求$&lt;k​$的概率，最后在减一下就好了。</p>
<p>考虑$n=3$的情况，实际上这个概率就等于一个$1\times 1\times 1$的立方体被一个斜着的面切掉一部分之后剩下的体积，这个斜着的面满足解析式$x+y+z=k$。</p>
<p>那么高维情况是一样的，也是算一个体积。</p>
<p>考虑利用容斥去掉$[0,1)$的限制，枚举至少$x$个$b_i\geqslant 1$，那么限制就变成了$\sum b_i&lt;k-x$，其中$b_i\in [0,+\infty)​$。</p>
<p>这样就很好算了，这就相当于坐标系的一个象限被截出来的体积，三维情况体积就是$(k-x)^3/6$。</p>
<p>注意到每增加一位相当于多了一重积分，所以$n$维的体积就是$(k-x)^n/n!$。</p>
<p>复杂度$O(n\log n)$。<del>我是不是想太复杂了啊，后面这部分是我自己yy的。。不知道准不准确</del></p>
<p><a href="https://loj.ac/submission/675006" target="_blank" rel="noopener">code</a>。</p>
<h2 id="「JOISC-2018-Day-2」最差记者-3"><a href="#「JOISC-2018-Day-2」最差记者-3" class="headerlink" title="「JOISC 2018 Day 2」最差记者 3"></a>「JOISC 2018 Day 2」最差记者 3</h2><p>注意到每个人的行动都是形如：先停$x$步之后，马上瞬移到$x$步之后，也就是前面那个人之后。</p>
<p>设$f_i$表示第$i$个人的循环节长度，那么：</p>
<ul>
<li>如果$d_i\leqslant f_{i-1}$，那么$f_i=f_{i-1}$。</li>
<li>否则$f_i=\lceil d_i/f_{i-1}\rceil *f_{i-1}$。</li>
</ul>
<p>注意到$f_i$要么不变要么至少翻倍，所以如果我们把$f_i$相等的缩起来，一共就只有$O(\log n)$段，那么直接暴力就好了。</p>
<p><a href="https://loj.ac/submission/675419" target="_blank" rel="noopener">code</a>。</p>
<h2 id="「JOISC-2018-Day-3」比太郎的聚会"><a href="#「JOISC-2018-Day-3」比太郎的聚会" class="headerlink" title="「JOISC 2018 Day 3」比太郎的聚会"></a>「JOISC 2018 Day 3」比太郎的聚会</h2><p>注意到$\sum y_i\leqslant 10^5$，那么我们可以对$y_i$的大小分块讨论。</p>
<p>如果当前$y_i&gt;\sqrt {n}$那么直接暴力$\rm dp$一遍，一共$O(n\sqrt n)$。</p>
<p>否则我们预处理出每个点最远的$\sqrt n$个点是哪些，然后每次查询就好了。</p>
<p>总复杂度$O(n\sqrt n)$。预处理还是挺巧妙的，我之前写的带$\log$的就$\rm TLE$了。</p>
<p><a href="https://loj.ac/submission/676193" target="_blank" rel="noopener">code</a>。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解合集</category>
      </categories>
  </entry>
  <entry>
    <title>「APIO 2019」桥梁</title>
    <url>/2019/11/12/%E3%80%8CAPIO-2019%E3%80%8D%E6%A1%A5%E6%A2%81/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3145" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/3145" target="_blank" rel="noopener">https://loj.ac/problem/3145</a>。</p>
<a id="more"></a>
<p>考虑对操作分块，那么每次处理当前块的时候，先对块内的操作和不会在这个块内被修改的边按权值排序，然后从大到小用并查集维护连通性。</p>
<p>那么对于每个询问，只需要暴力扫一遍块内的修改，判一下要不要加进去就行了，然后得到答案之后把这些操作撤销。</p>
<p>撤销操作可以利用按秩合并的并查集，这个东西可以每次$\log n$的操作，并且每次操作只会修改$O(1)$的值，那么暴力撤回就行。</p>
<p>假设分块的大小为$B$，复杂度就是$O((B^2+m\log m)\cdot \frac{q}{B})$。</p>
<p>那么$B=\sqrt {m\log m}$的时候复杂度为$O(q\sqrt{m\log m})$。</p>
<p><del>我也不知道复杂度是不是这样的，反正我卡卡常练炼金就过了</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">opr</span> {</span></span><br><span class="line">    <span class="keyword">int</span> op,x,v,ans,t;</span><br><span class="line">}a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,p[maxn];</span><br><span class="line">pii e[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii &gt; c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DSU</span> {</span></span><br><span class="line">    <span class="keyword">int</span> rk[maxn],fa[maxn],top,sz[maxn];</span><br><span class="line">    pair&lt;<span class="keyword">int</span>*,<span class="keyword">int</span> &gt; sta[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,rk[i]=<span class="number">0</span>,sz[i]=<span class="number">1</span>;}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:find(fa[x]);}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">        u=find(u),v=find(v);<span class="keyword">if</span>(u==v) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(rk[u]&lt;=rk[v]) {</span><br><span class="line">            <span class="keyword">if</span>(op) {</span><br><span class="line">                sta[++top]=mp(fa+u,fa[u]);</span><br><span class="line">                sta[++top]=mp(sz+v,sz[v]);</span><br><span class="line">            }</span><br><span class="line">            fa[u]=v,sz[v]+=sz[u];</span><br><span class="line">            <span class="keyword">if</span>(rk[u]==rk[v]) {</span><br><span class="line">                <span class="keyword">if</span>(op) sta[++top]=mp(rk+v,rk[v]);</span><br><span class="line">                rk[v]++;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span>(op) {</span><br><span class="line">                sta[++top]=mp(fa+v,fa[v]);</span><br><span class="line">                sta[++top]=mp(sz+u,sz[u]);</span><br><span class="line">            }</span><br><span class="line">            fa[v]=u,sz[u]+=sz[v];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(top) *sta[top].fr=sta[top].sc,top--;</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> u,v,w;}t[maxn];</span><br><span class="line"></span><br><span class="line">pii s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(edge a,edge b)</span> </span>{<span class="keyword">return</span> a.w&gt;b.w;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(opr a,opr b)</span> </span>{<span class="keyword">return</span> a.v&gt;b.v;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp3</span><span class="params">(opr a,opr b)</span> </span>{<span class="keyword">return</span> a.t&lt;b.t;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> st=clock();</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> u,v,w;read(u),read(v),read(w);</span><br><span class="line">        e[i]=mp(u,v),c[i].pb(mp(<span class="number">0</span>,w));</span><br><span class="line">    }</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        read(a[i].op),read(a[i].x),read(a[i].v);a[i].t=i;</span><br><span class="line">        <span class="keyword">if</span>(a[i].op==<span class="number">1</span>) c[a[i].x].pb(mp(i,a[i].v));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> B=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>;w&lt;=q;w++) {</span><br><span class="line">        <span class="keyword">if</span>((w<span class="number">-1</span>)%B) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l=w,r=min(q,w+B<span class="number">-1</span>),cnt=<span class="number">0</span>;</span><br><span class="line">        T.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">            <span class="keyword">if</span>(p[i]==(<span class="keyword">int</span>)c[i].size()<span class="number">-1</span>||c[i][p[i]+<span class="number">1</span>].fr&gt;r)</span><br><span class="line">                t[++cnt]=(edge){e[i].fr,e[i].sc,c[i][p[i]].sc};</span><br><span class="line">        sort(t+<span class="number">1</span>,t+cnt+<span class="number">1</span>,cmp1);</span><br><span class="line">        sort(a+l,a+r+<span class="number">1</span>,cmp2);</span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) <span class="keyword">if</span>(a[i].op==<span class="number">1</span>) b[++tt]=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) {</span><br><span class="line">            <span class="keyword">if</span>(a[i].op==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(pos&lt;cnt&amp;&amp;t[pos+<span class="number">1</span>].w&gt;=a[i].v) pos++,T.ins(t[pos].u,t[pos].v,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tt;j++) {</span><br><span class="line">                <span class="keyword">int</span> x=b[j].x;</span><br><span class="line">                <span class="keyword">if</span>(b[j].t&lt;=a[i].t) {</span><br><span class="line">                    <span class="keyword">if</span>(!s[x].fr||s[x].fr&lt;b[j].t)</span><br><span class="line">                        s[x]=mp(b[j].t,b[j].v);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span>(!s[x].fr) s[x]=c[x][p[x]];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tt;j++) {</span><br><span class="line">                <span class="keyword">int</span> x=b[j].x;</span><br><span class="line">                <span class="keyword">if</span>(s[x].sc&gt;=a[i].v) T.ins(e[x].fr,e[x].sc,<span class="number">1</span>);</span><br><span class="line">                s[x]=mp(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">            a[i].ans=T.sz[T.find(a[i].x)];</span><br><span class="line">            T.undo();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">while</span>(p[i]!=(<span class="keyword">int</span>)c[i].size()<span class="number">-1</span>&amp;&amp;c[i][p[i]+<span class="number">1</span>].fr&lt;=r) p[i]++;</span><br><span class="line">    }</span><br><span class="line">    sort(a+<span class="number">1</span>,a+q+<span class="number">1</span>,cmp3);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) <span class="keyword">if</span>(a[i].op==<span class="number">2</span>) write(a[i].ans);</span><br><span class="line">    <span class="built_in">cerr</span>&lt;&lt;(lf)(clock()-st)/<span class="number">1e3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>分块</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>「APIO 2019」奇怪装置</title>
    <url>/2019/11/12/%E3%80%8CAPIO-2019%E3%80%8D%E5%A5%87%E6%80%AA%E8%A3%85%E7%BD%AE/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3144" target="_blank" rel="noopener"></a><a href="https://loj.ac/problem/3144" target="_blank" rel="noopener">https://loj.ac/problem/3144</a>。</p>
<a id="more"></a>
<p>注意到$x,y​$的增长都是具有循环节的，那么合并成二元组也一定有循环节。</p>
<p>第一对$(x,y)$是$(0,0)$，那么只要找什么时候再次出现$(0,0)$就能找到循环节长度了。</p>
<p>那么可以得到：</p>
<script type="math/tex; mode=display">
t+\frac{t}{b}\equiv 0\pmod a</script><p>并且$b|t$，所以可以化简一下：</p>
<script type="math/tex; mode=display">
\begin{align}
(b+1)\frac{t}{b}&\equiv 0\pmod a\\
\frac{t}{b}&\equiv 0\pmod {\frac{a}{\gcd(a,b+1)}}\\
t&\equiv 0\pmod {\frac{ab}{\gcd(a,b+1)}}\\
\end{align}</script><p>也就是说最小的$t$就是$ab/\gcd(a,b+1)$。</p>
<p>那么直接线段覆盖就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a,b,sum,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> {</span><span class="keyword">int</span> l,r;}t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(a),read(b);<span class="keyword">int</span> g=__gcd(a,b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> r=a*b/g;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1.00</span>*a*b/g&gt;<span class="number">1e18</span>) r=<span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">int</span> x,y;read(x),read(y),sum+=y-x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y-x+<span class="number">1</span>&gt;=r) t[++cnt]=(info){<span class="number">0</span>,r<span class="number">-1</span>};</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y%r&gt;=x%r) t[++cnt]=(info){x%r,y%r};</span><br><span class="line">        <span class="keyword">else</span> t[++cnt]=(info){<span class="number">0</span>,y%r},t[++cnt]=(info){x%r,r<span class="number">-1</span>};</span><br><span class="line">    }</span><br><span class="line">    sort(t+<span class="number">1</span>,t+cnt+<span class="number">1</span>,[](info a,info b) {<span class="keyword">return</span> a.l&lt;b.l;});</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,mx=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sum+=max(<span class="number">0l</span>l,t[i].r-max(t[i].l<span class="number">-1</span>,mx)),mx=max(mx,t[i].r);</span><br><span class="line">    write(sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>2019省选题选做</title>
    <url>/2019/11/10/2019%E7%9C%81%E9%80%89%E9%A2%98%E9%80%89%E5%81%9A/</url>
    <content><![CDATA[<p><del>由于写博客太麻烦了干脆开到一篇来写好了</del></p>
<p>题目各大$\rm oj$都找得到。</p>
<p><del>还有一些不是最近写的也写进来好了，但是估计题解没几句话</del></p>
<a id="more"></a>
<h2 id="十二省联考"><a href="#十二省联考" class="headerlink" title="十二省联考"></a>十二省联考</h2><h3 id="「十二省联考-2019」异或粽子"><a href="#「十二省联考-2019」异或粽子" class="headerlink" title="「十二省联考 2019」异或粽子"></a>「十二省联考 2019」异或粽子</h3><p>可持久化$\rm trie$树板子题。</p>
<p><a href="https://loj.ac/submission/449674" target="_blank" rel="noopener">code</a>。</p>
<h3 id="「十二省联考-2019」字符串问题"><a href="#「十二省联考-2019」字符串问题" class="headerlink" title="「十二省联考 2019」字符串问题"></a>「十二省联考 2019」字符串问题</h3><p><a href="https://www.cnblogs.com/hbyer/p/10763571.html" target="_blank" rel="noopener">sol</a>。</p>
<p><del>以前写了题解就扔个链接吧</del></p>
<h3 id="「十二省联考-2019」春节十二响"><a href="#「十二省联考-2019」春节十二响" class="headerlink" title="「十二省联考 2019」春节十二响"></a>「十二省联考 2019」春节十二响</h3><p><a href="https://www.cnblogs.com/hbyer/p/10761097.html" target="_blank" rel="noopener">sol</a>。</p>
<h2 id="HNOI"><a href="#HNOI" class="headerlink" title="HNOI"></a>HNOI</h2><h3 id="「HNOI2019」校园旅行"><a href="#「HNOI2019」校园旅行" class="headerlink" title="「HNOI2019」校园旅行"></a>「HNOI2019」校园旅行</h3><p><a href="https://www.cnblogs.com/hbyer/p/10671405.html" target="_blank" rel="noopener">sol</a>。</p>
<h3 id="「HNOI2019」白兔之舞"><a href="#「HNOI2019」白兔之舞" class="headerlink" title="「HNOI2019」白兔之舞"></a>「HNOI2019」白兔之舞</h3><p><a href="https://hyscere.github.io/2019/10/07/%E3%80%8CHNOI2019%E3%80%8D%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E/" target="_blank" rel="noopener">sol</a>。</p>
<h2 id="GXOI"><a href="#GXOI" class="headerlink" title="GXOI"></a>GXOI</h2><h3 id="「GXOI-GZOI2019」与或和"><a href="#「GXOI-GZOI2019」与或和" class="headerlink" title="「GXOI / GZOI2019」与或和"></a>「GXOI / GZOI2019」与或和</h3><p>逐位考虑，可以发现问题就是求一个$01$矩阵的全$0$子矩形个数。</p>
<p>那么我们可以用一个上升的单调栈来求这个，总复杂度$O(n^2\log v)$。</p>
<p><a href="https://loj.ac/submission/449184" target="_blank" rel="noopener">code</a>。</p>
<h3 id="「GXOI-GZOI2019」逼死强迫症"><a href="#「GXOI-GZOI2019」逼死强迫症" class="headerlink" title="「GXOI / GZOI2019」逼死强迫症"></a>「GXOI / GZOI2019」逼死强迫症</h3><p><a href="https://www.cnblogs.com/hbyer/p/10845206.html" target="_blank" rel="noopener">sol</a>。</p>
<h3 id="「GXOI-GZOI2019」旅行者"><a href="#「GXOI-GZOI2019」旅行者" class="headerlink" title="「GXOI / GZOI2019」旅行者"></a>「GXOI / GZOI2019」旅行者</h3><p>考虑最短路一定在两个不同的点之间，换句话说就是这两个点编号二进制下一定有至少一位不同。</p>
<p>那么枚举二进制位，以这一位为$1$的点为起点跑多源最短路，然后取最小值即可。</p>
<p><a href="https://loj.ac/submission/665961" target="_blank" rel="noopener">code</a>。</p>
<h3 id="「GXOI-GZOI2019」旧词"><a href="#「GXOI-GZOI2019」旧词" class="headerlink" title="「GXOI / GZOI2019」旧词"></a>「GXOI / GZOI2019」旧词</h3><p>把询问离线下来，按$x$从小到大排序，把每个点的权值和父亲节点差分一下，那么只需要支持链加和链上求和操作即可。</p>
<p>树剖维护，复杂度$O(n\log ^2 n)$。</p>
<p><a href="https://loj.ac/submission/667030" target="_blank" rel="noopener">code</a>。</p>
<h2 id="BJOI"><a href="#BJOI" class="headerlink" title="BJOI"></a>BJOI</h2><h3 id="「BJOI2019」奥术神杖"><a href="#「BJOI2019」奥术神杖" class="headerlink" title="「BJOI2019」奥术神杖"></a>「BJOI2019」奥术神杖</h3><p>把式子取个$\log$就变成了$\frac{1}{n}\sum_{i=1}^{n}\log v_i$，就变成了$\rm 01$分数规划问题，那么可以二分答案。</p>
<p>二分检查的时候建立$ac$自动机$\rm dp$就好了，复杂度$O(n^2\log v)$。</p>
<p><a href="https://loj.ac/submission/668619" target="_blank" rel="noopener">code</a>。</p>
<h3 id="「BJOI2019」排兵布阵"><a href="#「BJOI2019」排兵布阵" class="headerlink" title="「BJOI2019」排兵布阵"></a>「BJOI2019」排兵布阵</h3><p>普及组$\rm dp$题。</p>
<p><a href="https://loj.ac/submission/668876" target="_blank" rel="noopener">code</a>。</p>
<h3 id="「BJOI2019」光线"><a href="#「BJOI2019」光线" class="headerlink" title="「BJOI2019」光线"></a>「BJOI2019」光线</h3><p>设$f_i$表示前$i$块玻璃叠起来从第一块玻璃射入的透光率，$g_i$表示从第$i$块玻璃射入的反射率。</p>
<p>不难得到：</p>
<script type="math/tex; mode=display">
\begin{align}
f_i&=f_{i-1}a_i\sum_{x=0}^{\infty}(b_ig_{i-1})^x\\
g_i&=b_{i-1}+g_{i-1}a^2_i\sum_{x=0}^{\infty}(b_ig_{i-1})^x
\end{align}</script><p>显然后面的无穷级数收敛，且等于$\dfrac{1}{1-b_ig_{i-1}}$。</p>
<p>暴力递推就好了。</p>
<p><a href="https://loj.ac/submission/669092" target="_blank" rel="noopener">code</a>。</p>
<h2 id="SNOI"><a href="#SNOI" class="headerlink" title="SNOI"></a>SNOI</h2><h3 id="「SNOI2019」字符串"><a href="#「SNOI2019」字符串" class="headerlink" title="「SNOI2019」字符串"></a>「SNOI2019」字符串</h3><p><a href="https://hyscere.github.io/2019/10/05/%E3%80%8CSNOI2019%E3%80%8D%E5%AD%97%E7%AC%A6%E4%B8%B2/" target="_blank" rel="noopener">sol</a>。</p>
<h3 id="「SNOI2019」数论"><a href="#「SNOI2019」数论" class="headerlink" title="「SNOI2019」数论"></a>「SNOI2019」数论</h3><p>枚举$a_i$，那么我们要找形如$a_i+P\cdot t$的数$\bmod Q\in B$的个数。</p>
<p>可以发现$(a_i+P\cdot t)\bmod Q$会形成一个环，具体来说环长为$Q/\gcd(P,Q)$，一共有$\gcd(P,Q)$那么多个环。</p>
<p>那么可以一开始把环全处理出来，然后把$b$当做贡献加进去，那么破环成链之后统计前缀和即可。</p>
<p><a href="https://loj.ac/submission/669454" target="_blank" rel="noopener">code</a>。</p>
<h3 id="「SNOI2019」纸牌"><a href="#「SNOI2019」纸牌" class="headerlink" title="「SNOI2019」纸牌"></a>「SNOI2019」纸牌</h3><p>显然三叠$(i,i+1,i+2)$可以合并成三个形如$(i,i,i)$的叠。</p>
<p>那么每种$(i,i+1,i+2)$最多出现两次，那么$f_{i,j,k}$表示当前$\rm dp$到$i$了，$i-1$开头的叠出现了$j$次，$i$开头的出现了$k$次，就可以转移了。</p>
<p>由于后两维状态很少，可以矩阵优化，那么只要在每个有下限的位置改下转移矩阵就好了。</p>
<p><a href="https://loj.ac/submission/669763" target="_blank" rel="noopener">code</a>。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解合集</category>
      </categories>
  </entry>
  <entry>
    <title>「清华集训2016」如何优雅地求和</title>
    <url>/2019/11/07/%E3%80%8C%E6%B8%85%E5%8D%8E%E9%9B%86%E8%AE%AD2016%E3%80%8D%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<p>题目链接：<a href="http://uoj.ac/problem/269" target="_blank" rel="noopener"></a><a href="http://uoj.ac/problem/269" target="_blank" rel="noopener">http://uoj.ac/problem/269</a>。</p>
<a id="more"></a>
<p><del>这就涉及到我的知识盲区了</del></p>
<p>学到了一个叫下降幂多项式的操作，就是说我们可以把一个多项式写成这样的形式：</p>
<script type="math/tex; mode=display">
f(x)=\sum_{i=0}^{m}a_i\binom{x}{i}</script><p>这样有时候可以帮助我们消掉一些组合数。</p>
<p>假设我们可以得到$a_i$，把式子带进去试试：</p>
<script type="math/tex; mode=display">
\begin{align}
ans&=\sum_{k=0}^{n}\sum_{i=0}^{m}a_i\binom{k}{i}\binom{n}{k}x^k(1-x)^{n-k}\\
&=\sum_{k=0}^{n}\sum_{i=0}^{m}a_i\binom{n}{i}\binom{n-i}{k-i}x^k(1-x)^{n-k}\\
&=\sum_{i=0}^{m}a_i\binom{n}{i}\sum_{k=i}^{n}\binom{n-i}{k-i}x^k(1-x)^{n-k}\\
&=\sum_{i=0}^{m}a_i\binom{n}{i}x^i\sum_{k=0}^{n-i}\binom{n-i}{k}x^k(1-x)^{n-k}\\
&=\sum_{i=0}^{m}a_i\binom{n}{i}x^i\\
\end{align}</script><p>最后一步是$(x+1-x)^{n-i}$的二项式展开。</p>
<p>也就是说如果我们得到了$a_i$就可以暴力算出答案。</p>
<p>而显然二项式反演一下就可以得到$a_i​$：</p>
<script type="math/tex; mode=display">
\begin{align}
f(x)&=\sum_{i=0}^{x}a_i\binom{x}{i}\\
a_x&=\sum_{i=0}^{x}(-1)^{x-i}\binom{x}{i}f(i)\\
\frac{a_x}{x!}&=\sum_{i=0}^{x}\frac{(-1)^{x-i}}{(x-i)!}\cdot \frac{f(i)}{i!}\\
\end{align}</script><p>显然$\rm NTT$优化，复杂度$O(m\log m)$。</p>
<p><del>为啥有人暴力卷积过了啊，数据范围为哈开这么小啊</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],fac[maxn],ifac[maxn],n,m,x,a[maxn],w[maxn],pos[maxn],N,bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    ifac[m]=qpow(fac[m],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;=m&lt;&lt;<span class="number">1</span>;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                r[j+k]=(x+y)%mod,r[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        <span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);reverse(r+<span class="number">1</span>,r+N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(x);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) read(f[i]),f[i]=<span class="number">1l</span>l*f[i]*ifac[i]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) a[i]=((i&amp;<span class="number">1</span>?<span class="number">-1</span>:<span class="number">1</span>)*ifac[i]+mod)%mod;</span><br><span class="line">    ntt(a,<span class="number">1</span>),ntt(f,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) a[i]=<span class="number">1l</span>l*a[i]*f[i]%mod;</span><br><span class="line">    ntt(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) a[i]=<span class="number">1l</span>l*a[i]*fac[i]%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,c=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">if</span>(i) c=<span class="number">1l</span>l*(n-i+<span class="number">1</span>)*qpow(i,mod<span class="number">-2</span>)%mod*c%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*a[i]*c%mod*qpow(x,i)%mod)%mod;</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>「CF1246E」To Make 1</title>
    <url>/2019/11/06/%E3%80%8CCF1246E%E3%80%8DTo-Make-1/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1246/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1246/problem/E</a>。</p>
<a id="more"></a>
<p>考虑如果一系列操作之后能变成$1​$，那么一定能构造出某个序列$b_i​$满足$\sum_{i=1}^{n}a_ik^{-b_i}=1​$。</p>
<p>反过来也成立，考虑如果我们构造出了一组$b_i$，那么一定对应着一个操作序列，可以如下构造：</p>
<p>先找出最大的$b_i$，假设为$x$，显然存在大于等于两个$b_i=x$的位置，因为题目保证了$k\not \mid a_i$，如果只有一个位置，等式左边就会是一个实数，显然矛盾。然后任意选出两个$b_i=x$的位置然后合并，剩下的又变成了子问题。</p>
<p>那么我们可以根据这个$dp$，设$f_{s,x}$表示用$s$集合这些数能不能构造出一组$b_i$使得$\sum_{i=1}^{n}a_ik^{-b_i}=x$。</p>
<p>转移比较显然：考虑每次多加进去一个$b_i=0$的数，$f_{s,x}\leftarrow f_{s \setminus \{i\},x-a_i}$；或者每次把所有$b_i$加一，$f_{s,x}\leftarrow f_{s,x/k}$。</p>
<p>可以利用$\rm bitset$优化转移，复杂度$O(2^n(\sum a_i)\cdot (1+n/\omega))$。</p>
<p>输出方案就逆推转移方程搞出$b_i$，然后利用上面的构造就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,k;</span><br><span class="line"><span class="built_in">bitset</span>&lt;2001 &gt; f[(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(!s) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(;t&lt;=<span class="number">2000</span>;t*=k,c++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">            <span class="keyword">if</span>(t&gt;=a[i+<span class="number">1</span>]&amp;&amp;(s&amp;(<span class="number">1</span>&lt;&lt;i))&amp;&amp;f[s-(<span class="number">1</span>&lt;&lt;i)][t-a[i+<span class="number">1</span>]]) {</span><br><span class="line">                b[i+<span class="number">1</span>]=c;dfs(s-(<span class="number">1</span>&lt;&lt;i),t-a[i+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>;s&lt;<span class="number">1</span>&lt;&lt;n;s++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;i)) f[s]|=f[s-(<span class="number">1</span>&lt;&lt;i)]&lt;&lt;a[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2000</span>;i;i--) <span class="keyword">if</span>(i%k==<span class="number">0</span>) f[s][i/k]=f[s][i/k]|f[s][i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(!f[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>),<span class="number">0</span>;</span><br><span class="line">    dfs((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">multiset</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; &gt; s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; &gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s.insert(mp(-b[i],a[i]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++) {</span><br><span class="line">        pii p=*s.begin();s.erase(s.begin());</span><br><span class="line">        pii q=*s.begin();s.erase(s.begin());</span><br><span class="line">        ans.pb(mp(p.sc,q.sc));</span><br><span class="line">        p.sc+=q.sc;<span class="keyword">int</span> x=p.sc;</span><br><span class="line">        <span class="keyword">while</span>(x%k==<span class="number">0</span>) x/=k,p.fr++;</span><br><span class="line">        s.insert(mp(p.fr,x));</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:ans) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x.fr,x.sc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title>「CF923E」Perpetual Subtraction</title>
    <url>/2019/11/04/%E3%80%8CCF923E%E3%80%8DPerpetual-Subtraction/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/923/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/923/problem/E</a>。</p>
<a id="more"></a>
<p>首先假设原概率的生成函数为$F(x)=\sum_{i=0}^{n}f_ix^i$，那么一次操作之后显然会变成：</p>
<script type="math/tex; mode=display">
F^*(x)=\sum_{i=0}^{n}\sum_{j=i}^{n}\frac{f_j}{j+1}x^i</script><p>然后对这个式子进行一些魔幻的操作，先简单变一下：</p>
<script type="math/tex; mode=display">
\begin{align}
F^*(x)&=\sum_{j=0}^{n}\frac{f_j}{j+1}\sum_{i=0}^{j}x^i\\
&=\sum_{j=0}^{n}\frac{f_j}{j+1}\frac{x^{j+1}-1}{x-1}\\
&=\frac{1}{x-1}\sum_{j=0}^{n}f_j\frac{x^{j+1}-1}{j+1}\\
\end{align}</script><p>注意后面那一项看起来就很像积分公式，套进去试试：</p>
<script type="math/tex; mode=display">
\begin{align}
F^*(x)&=\frac{1}{x-1}\sum_{j=0}^{n}f_j\int_1^xt^j{\rm d}t\\
&=\frac{\int_1^xF(t){\rm d}t}{x-1}
\end{align}</script><p>上面那个积分下限是$1$，而且分母是$x-1$，看起来就很不爽，没法继续变了。</p>
<p>可以设$G(x)=F(x+1)$，那么可以得到：</p>
<script type="math/tex; mode=display">
G^*(x)=\frac{\int_1^{x+1}F(t){\rm d}t}{x}=\frac{\int_0^{x}G(t){\rm d}t}{x}</script><p>这一来式子就简单多了，第$i$项变化之后可以很方便的写出来：</p>
<script type="math/tex; mode=display">
g^*_i=\frac{g_i}{i+1}</script><p>那么变$m$次之后就是：</p>
<script type="math/tex; mode=display">
g^*_i=\frac{g_i}{(i+1)^m}</script><p>最后就只需要考虑如何在$F,G​$之间转换了：</p>
<script type="math/tex; mode=display">
G(x)=\sum_{i=0}^{n}f_i(x+1)^i=\sum_{i=0}^{n}f_i\sum_{j=0}^{i}\binom{i}{j}x^j</script><p>也就是说：</p>
<script type="math/tex; mode=display">
g_i=\sum_{j=i}^{n}\binom{j}{i}f_j\\i!g_i=\sum_{j=i}^{n}\frac{j!f_j}{(j-i)!}</script><p>所以直接上$\rm NTT$就好了，换个方向也是同理。</p>
<p>复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],g[maxn],n,w[maxn],N,bit,pos[maxn],fac[maxn],ifac[maxn];</span><br><span class="line">ll m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;=n&lt;&lt;<span class="number">1</span>;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    ifac[N]=qpow(fac[N],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                r[j+k]=(x+y)%mod,r[i+j+k]=(x-y+mod)%mod;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        <span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);reverse(r+<span class="number">1</span>,r+N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;m);init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) read(f[i]),f[i]=<span class="number">1l</span>l*f[i]*fac[i]%mod,g[i]=ifac[i];</span><br><span class="line">    reverse(f,f+n+<span class="number">1</span>);ntt(f,<span class="number">1</span>),ntt(g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) g[i]=<span class="number">1l</span>l*f[i]*g[i]%mod;</span><br><span class="line">    ntt(g,<span class="number">-1</span>);</span><br><span class="line">    reverse(g,g+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) g[i]=<span class="number">1l</span>l*g[i]*ifac[i]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;N;i++) g[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) g[i]=<span class="number">1l</span>l*g[i]*qpow(qpow(i+<span class="number">1</span>,m%(mod<span class="number">-1</span>)),mod<span class="number">-2</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) f[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) f[i]=<span class="number">1l</span>l*ifac[i]*(i&amp;<span class="number">1</span>?mod<span class="number">-1</span>:<span class="number">1</span>)%mod,g[i]=<span class="number">1l</span>l*g[i]*fac[i]%mod;</span><br><span class="line">    reverse(g,g+n+<span class="number">1</span>);ntt(f,<span class="number">1</span>),ntt(g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) f[i]=<span class="number">1l</span>l*f[i]*g[i]%mod;</span><br><span class="line">    ntt(f,<span class="number">-1</span>);reverse(f,f+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="number">1l</span>l*f[i]*ifac[i]%mod);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>「NOI2018」归程</title>
    <url>/2019/11/03/%E3%80%8CNOI2018%E3%80%8D%E5%BD%92%E7%A8%8B/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2718" target="_blank" rel="noopener">https://loj.ac/problem/2718</a>。</p>
<a id="more"></a>
<p>感觉这更像是个算法学习笔记。。。</p>
<p>介绍一个叫$\rm Kruskal$重构树的东西，这个东西可以很方便的处理出，从给定的点$x$出发，只经过边权$\leqslant s$的边能到的点是哪些。</p>
<p>首先很显然，如果我们把最小生成树搞出来，其他边删掉，答案还是不会改变，因为如果可以通过其他边到另外的点，最小生成树就可以利用这些边变得更小。</p>
<p>那么如何利用这个东西呢，考虑用$\rm Kruskal$算法求最小生成树的的时候，假设当前这条边能合并左右两个块，我们就新建一个点出来，连向左右两边重构树的根节点，然后把这个点作为合并后的块的重构树的根节点。</p>
<p>那么最后我们会得到一颗$2n-1$个点的树，其中所有的原来就有的点都是叶子，非叶子节点都是新建的点，并且是二叉树。</p>
<p>如果我们每次新建点的时候把边权赋给这个点作为点权，那么显然可以知道，从$x$出发只经过边权$\leqslant s$的边能到的点 就是 从$x$每次往父亲跳，直到父亲点权大于$x$，此时当前点子树里的所有点。<del>感觉我表达能力好差</del></p>
<p>那么这题就差不多做完了，一开始跑个最短路，然后把重构树建出来，记一下子树里叶子离$1$号点距离最小的是多少，每次倍增跳一下就好了。</p>
<p>复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,dis[maxn],cnt,val[maxn],id[maxn],f[maxn][<span class="number">20</span>],tot,head[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> {</span><span class="keyword">int</span> u,v,w;}a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(info x,info y)</span> </span>{<span class="keyword">return</span> x.w&lt;y.w;}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dsu</span> {</span></span><br><span class="line">    <span class="keyword">int</span> fa[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line">}s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">()</span> </span>{</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; &gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">63</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    q.push(mp(<span class="number">0</span>,<span class="number">1</span>));dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> w=-q.top().fr,x=q.top().sc;q.pop();</span><br><span class="line">        <span class="keyword">if</span>(dis[x]&lt;w) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dis[e[i].to]&gt;dis[x]+e[i].w)</span><br><span class="line">                dis[e[i].to]=dis[x]+e[i].w,q.push(mp(-dis[e[i].to],e[i].to));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);s.init();cnt=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,l,aa;i&lt;=m;i++) {</span><br><span class="line">        read(u),read(v),read(l),read(aa);</span><br><span class="line">        ins(u,v,l),ins(v,u,l);</span><br><span class="line">        a[i]=(info){u,v,-aa};</span><br><span class="line">    }</span><br><span class="line">    get_dis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) id[i]=i;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> u=s.find(a[i].u),v=s.find(a[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u!=v) {</span><br><span class="line">            s.fa[u]=v;</span><br><span class="line">            val[++cnt]=a[i].w;</span><br><span class="line">            f[id[u]][<span class="number">0</span>]=f[id[v]][<span class="number">0</span>]=cnt;</span><br><span class="line">            dis[cnt]=min(dis[id[u]],dis[id[v]]);</span><br><span class="line">            id[v]=cnt;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    read(q);<span class="keyword">int</span> k,s;read(k),read(s);</span><br><span class="line">    <span class="keyword">int</span> la=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> v,p;read(v),read(p);</span><br><span class="line">        v=(v+k*la<span class="number">-1</span>)%n+<span class="number">1</span>,p=(p+k*la)%(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">18</span>;~j;j--)</span><br><span class="line">            <span class="keyword">if</span>(f[v][j]&amp;&amp;-val[f[v][j]]&gt;p) v=f[v][j];</span><br><span class="line">        write(la=dis[v]);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// freopen("return.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("return.out","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve(),clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Kruskal重构树</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Bye 2017(CF Contest 908)</title>
    <url>/2019/10/29/Good-Bye-2017-CF-Contest-908/</url>
    <content><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/908" target="_blank" rel="noopener">https://codeforces.com/contest/908</a>。</p>
<a id="more"></a>
<h2 id="D-New-Year-and-Arbitrary-Arrangement"><a href="#D-New-Year-and-Arbitrary-Arrangement" class="headerlink" title="D. New Year and Arbitrary Arrangement"></a>D. New Year and Arbitrary Arrangement</h2><p>期望$dp$一般考虑从当前状态到终点状态的期望，不然有可能会出问题。</p>
<p>所以设$f_{i,j}$表示当前有$i$个$a$，$j$个$ab$，把剩下的东西补齐最后的$ab$个数的期望。</p>
<p>边界就是$f_{i,j}=j~(j\geqslant k)$。</p>
<p>还有就是当$i\geqslant k$的时候，用无穷级数算一下期望放多少个$a$之后会放一个$b$。</p>
<p>注意到一开始可以无限的放$b$，但是对答案不造成影响，所以就硬点第一个是$a$，答案就是$f_{1,0}$。</p>
<p>转移用记忆化搜索实现即可。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pa,pb,k,r[<span class="number">1002</span>][<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(b&gt;=k) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=k) <span class="keyword">return</span> (a+b+<span class="number">1l</span>l*pa*qpow(pb,mod<span class="number">-2</span>)%mod)%mod;</span><br><span class="line">    <span class="keyword">if</span>(r[a][b]) <span class="keyword">return</span> r[a][b];</span><br><span class="line">    <span class="keyword">return</span> r[a][b]=(<span class="number">1l</span>l*pa*f(a+<span class="number">1</span>,b)+<span class="number">1l</span>l*pb*f(a,b+a)%mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(k),read(pa),read(pb);<span class="keyword">int</span> t=qpow(pa+pb,mod<span class="number">-2</span>);</span><br><span class="line">    pa=<span class="number">1l</span>l*pa*t%mod,pb=<span class="number">1l</span>l*pb*t%mod;</span><br><span class="line">    write(f(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-New-Year-and-Entity-Enumeration"><a href="#E-New-Year-and-Entity-Enumeration" class="headerlink" title="E. New Year and Entity Enumeration"></a>E. New Year and Entity Enumeration</h2><p>好神仙啊。。</p>
<p>考虑对于一个集合$s$，如果他要变成好的，要生成一些什么样的数。</p>
<p>对于第$i$位，设$f_i$表示能被生成的数中包含第$i$位的数中包含$1$的个数最小的那个是什么。</p>
<p>注意到因为有取反操作，所以每一个$f_i$都是有值的。</p>
<p>现在有一个结论是说，对于$i,j$，如果$f_i\ne f_j$，那么$f_i\&amp;f_j=0$.</p>
<p>考虑反证，假设不等于$0$，首先显然$f_j$第$i$位不可能是$1$，否则$f_i\&amp;f_j$一定比$f_i$更优，这一来就会更新$f_i$。</p>
<p>如果$f_j$的第$i$位为$0$，$f_i\&amp;(\text{~}f_j)$就会更新$f_i$。</p>
<p>那么可以发现这个集合里的所有数都只有可能是若干个$f_i$或起来的，就是说这些个$f_i$是最小的单元。</p>
<p>那么现在回到题目，首先把$T$的$f_i$求出来，考虑我们可以通过引入一些数来任意的分割任意一个$f_i$，使其变成若干个更小的单元。</p>
<p>那么答案就是一堆贝尔数相乘，也就是说把$n$个元素分成任意堆的方案数。</p>
<p>贝尔数有个递推公式，<del>不过我懒的想那个东西了，</del>也可以不用那个公式直接把一堆的第二类斯特林数加起来。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">52</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn],fa[maxn],n,m,s[maxn][maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    x=find(x),y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) fa[x]=y,cnt[y]+=cnt[x];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,cnt[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) {</span><br><span class="line">            <span class="keyword">int</span> bo=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++) <span class="keyword">if</span>(ss[k][i]!=ss[k][j]) bo=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(bo) link(i,j);</span><br><span class="line">        }</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            s[i][j]=(<span class="number">1l</span>l*j*s[i<span class="number">-1</span>][j]%mod+s[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            b[i]=(b[i]+s[i][j])%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(fa[i]==i) ans=<span class="number">1l</span>l*ans*b[cnt[i]]%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-New-Year-and-Rainbow-Roads"><a href="#F-New-Year-and-Rainbow-Roads" class="headerlink" title="F. New Year and Rainbow Roads"></a>F. New Year and Rainbow Roads</h2><p>普及组贪心题。</p>
<p>考虑每个绿色的作为关键点，两个绿色点之间有两种连法：</p>
<ul>
<li>绿蓝绿连成一条链，绿红绿一条链。</li>
<li>绿色相连，那么上面的两条链就可以分别断掉一条边。</li>
</ul>
<p>特判下两头的非绿色点就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,d[maxn],p[maxn],top;</span><br><span class="line"><span class="keyword">char</span> c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        read(d[i]),<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c[i]);</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="string">'G'</span>) p[++top]=i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(!top) {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,cc=<span class="number">0</span>,dd=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="string">'B'</span>) cc=d[i],a=a?a:d[i];</span><br><span class="line">            <span class="keyword">else</span> dd=d[i],b=b?b:d[i];</span><br><span class="line">        write(dd-b+cc-a);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=top;i++) {</span><br><span class="line">        <span class="keyword">int</span> l=p[i<span class="number">-1</span>]+<span class="number">1</span>,r=p[i]<span class="number">-1</span>,pre=p[i<span class="number">-1</span>],t=<span class="number">0</span>,tt=<span class="number">0</span>,pp=p[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;=r;j++)</span><br><span class="line">            <span class="keyword">if</span>(c[j]==<span class="string">'R'</span>) t=max(t,d[j]-d[pre]),pre=j;</span><br><span class="line">            <span class="keyword">else</span> tt=max(tt,d[j]-d[pp]),pp=j;</span><br><span class="line">        t=max(t,d[p[i]]-d[pre]),tt=max(tt,d[p[i]]-d[pp]);</span><br><span class="line">        ans+=min(<span class="number">2</span>*(d[p[i]]-d[p[i<span class="number">-1</span>]]),<span class="number">3</span>*(d[p[i]]-d[p[i<span class="number">-1</span>]])-t-tt);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> p1=p[<span class="number">1</span>],p2=p[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p[<span class="number">1</span>]<span class="number">-1</span>;i;i--)</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="string">'R'</span>) ans+=d[p1]-d[i],p1=i;</span><br><span class="line">        <span class="keyword">else</span> ans+=d[p2]-d[i],p2=i;</span><br><span class="line">    p1=p[top],p2=p[top];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p[top];i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="string">'R'</span>) ans+=d[i]-d[p1],p1=i;</span><br><span class="line">        <span class="keyword">else</span> ans+=d[i]-d[p2],p2=i;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="G-New-Year-and-Original-Order"><a href="#G-New-Year-and-Original-Order" class="headerlink" title="G. New Year and Original Order"></a>G. New Year and Original Order</h2><p>观察下可以发现，对于一个排好序的数，我们对数位差分一下可以发现这个数是由九个形如$1111\cdots111$的数加起来得到的。</p>
<p>更具体的说，对于$x~(1\leqslant x\leqslant 9)$，如果有$k$个大于等于它的数位，那么他就贡献了一个$k$个$1$的数字。</p>
<p>那么直接数位$dp$，$f_{i,j,k,0/1}$表示当前$dp$了前$i$位，有$j$个大于等于$k$的数位，有没有贴紧上界的方案数。</p>
<p>转移很简单，暴力就好了。</p>
<p><del>感觉难度好不均匀啊，为啥第五题那么难，后面的简单些啊</del></p>
<p><del>果然是我太菜了吗</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">700</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn][<span class="number">10</span>][<span class="number">2</span>],n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>),n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]-=<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)  f[<span class="number">0</span>][<span class="number">0</span>][i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">9</span>;k++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++) {</span><br><span class="line">                <span class="keyword">if</span>(j||s[i]&lt;k) add(f[i][j][k][<span class="number">1</span>],f[i<span class="number">-1</span>][j-(s[i]&gt;=k)][k][<span class="number">1</span>]);</span><br><span class="line">                add(f[i][j][k][<span class="number">0</span>],<span class="number">1l</span>l*f[i<span class="number">-1</span>][j][k][<span class="number">0</span>]*k%mod);</span><br><span class="line">                <span class="keyword">if</span>(j) add(f[i][j][k][<span class="number">0</span>],<span class="number">1l</span>l*f[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">0</span>]*(<span class="number">10</span>-k)%mod);</span><br><span class="line">                add(f[i][j][k][<span class="number">0</span>],<span class="number">1l</span>l*f[i<span class="number">-1</span>][j][k][<span class="number">1</span>]*min(k,(<span class="keyword">int</span>)s[i])%mod);</span><br><span class="line">                <span class="keyword">if</span>(j) add(f[i][j][k][<span class="number">0</span>],<span class="number">1l</span>l*f[i<span class="number">-1</span>][j<span class="number">-1</span>][k][<span class="number">1</span>]*max(s[i]-k,<span class="number">0</span>)%mod);</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">9</span>;k++) {</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">            r=(<span class="number">1l</span>l*r*<span class="number">10</span>+<span class="number">1</span>)%mod;</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*r*(f[n][i][k][<span class="number">0</span>]+f[n][i][k][<span class="number">1</span>])%mod)%mod;</span><br><span class="line">        }</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="H-New-Year-and-Boolean-Bridges"><a href="#H-New-Year-and-Boolean-Bridges" class="headerlink" title="H. New Year and Boolean Bridges"></a>H. New Year and Boolean Bridges</h2><p>这个图显然是弱联通的。</p>
<p>容易发现$\rm AND$表示这两个点强连通，那么可以先缩一波点，对于每个$size\geqslant 2$的强连通块，最少需要$size$条边把他们连成一个环。</p>
<p>剩下的连成一条链就可以满足条件了。</p>
<p>考虑怎么减少边数，显然如果我们把两个强连通块合并，就会少一条链的边，因为强连通块要求$size\geqslant 2$，所以一共只有$n/2$个，可以状压。</p>
<p>设$f_s$表示$s$这些点可不可以弄成一个强连通块，这是因为$\rm XOR$关系不能在一个强连通块中。</p>
<p>设$g_{k,s}$表示用$k$条链边能不能把$s$这些点连起来。</p>
<p>那么$g_{k,s}=\sum_{t\subset s} g_{k-1,t}f_{s-t}$。</p>
<p>显然这可以看做是一个或卷积，因为$s-t$和$t$实际上如果重合了答案也不会错。</p>
<p>所以每次拿$g$卷上$f$，直到$g_{all-1}$不为$0$就得到了最优解。</p>
<p>那么使用$\rm fwt$优化即可，复杂度$O(n^22^{n/2})$。</p>
<p>复杂度还是有点高，考虑如何优化，注意到不需要每次都$\rm fwt$，因为$\rm fwt$操作其实是子集和，所以我们可以每次利用子集容斥把$g_{all-1}$一项搞出来，那么只需要$\rm fwt$一次即可。</p>
<p>复杂度$O(n\cdot 2^{n/2})$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = (<span class="number">1</span>&lt;&lt;<span class="number">23</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,fa[maxn],sz[maxn],id[maxn],m;</span><br><span class="line"><span class="keyword">int</span> f[maxm],g[maxm],a[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    a=find(a),b=find(b);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) fa[a]=b,sz[b]+=sz[a];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> *r)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;m;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) r[i+j+k]+=r[j+k];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>),fa[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">'A'</span>) get(i,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v;i&lt;=n;i++) <span class="keyword">if</span>((v=find(i))==i) <span class="keyword">if</span>(sz[v]&gt;=<span class="number">2</span>) id[v]=++m;</span><br><span class="line">    <span class="keyword">if</span>(!m) <span class="keyword">return</span> write(n<span class="number">-1</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==<span class="string">'X'</span>) {</span><br><span class="line">                <span class="keyword">int</span> u=find(i),v=find(j);</span><br><span class="line">                <span class="keyword">if</span>(u==v) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(!id[u]||!id[v]) <span class="keyword">continue</span>;</span><br><span class="line">                f[(<span class="number">1</span>&lt;&lt;(id[u]<span class="number">-1</span>))|(<span class="number">1</span>&lt;&lt;(id[v]<span class="number">-1</span>))]=<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">    fwt(f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++) f[i]=!f[i];</span><br><span class="line">    fwt(f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++) g[i]=f[i],a[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;;x++) {</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++) t+=(__builtin_popcount((<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>-i)&amp;<span class="number">1</span>?<span class="number">1</span>:<span class="number">-1</span>)*g[i];</span><br><span class="line">        <span class="keyword">if</span>(t) <span class="keyword">return</span> write(n+x),<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++) g[i]=g[i]*f[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>「CEOI2019」立方填词</title>
    <url>/2019/10/24/%E3%80%8CCEOI2019%E3%80%8D%E7%AB%8B%E6%96%B9%E5%A1%AB%E8%AF%8D/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3164" target="_blank" rel="noopener"> https://loj.ac/problem/3164 </a>。</p>
<a id="more"></a>
<p>设$\Sigma$为字符集大小，显然可以得到一个$O(n+\Sigma ^8)$的暴力，枚举每个角是啥，拿个桶记录下$a$开始$b$结束的本质不同串的个数，乘起来就好了。</p>
<p>然后我想了个$O(n+\Sigma^6)$的暴力$\rm dp$，首先给点标个号，底下一圈叫$1,2,3,4$，上面对应的一圈为$5,6,7,8$，那么枚举$1,2$是什么，然后$dp$转移到$5,6$，然后是$3,4$，$1,2$，最后算一下就好了，转移复杂度为$O(\Sigma^4)$。</p>
<p>题解给出了个$O(n+\Sigma^5)$的做法，先枚举$1,2,3,4$是什么，然后我们考虑$5$是什么，那么这个时候$1$其实是没有用的，那么不需要记录$1$这个状态，同理继续考虑后面的是什么，每次都只在状态里记录了$4$个点，状态为$O(\Sigma^4)$的，每次转移$O(\Sigma)$。</p>
<p>正解是这样的，注意到这个图是一个二分图，左右各四个点，那么预处理出$f_{a,b,c}$表示三个串，由任意一个点开头，分别以$a,b,c$结尾的方案数，那么枚举二分图左边为$a,b,c,d$，这种情况的方案数就是$f_{a,b,c}\cdot f_{a,b,d}\cdot f_{a,c,d}\cdot f_{b,c,d}$，复杂度$O(n+\Sigma^4)$，常数有点大，需要一点小优化才能过。</p>
<p><del>别人写string好方便啊。。。我为啥要用char啊啊啊啊啊难写死了</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>* &gt; t[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn][<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> n,ans,f[<span class="number">63</span>][<span class="number">63</span>][<span class="number">63</span>],c[<span class="number">63</span>][<span class="number">63</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> v[<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>]={{{<span class="number">24</span>,<span class="number">12</span>},{<span class="number">12</span>,<span class="number">4</span>}},{{<span class="number">12</span>,<span class="number">6</span>},{<span class="number">4</span>,<span class="number">1</span>}}};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">char</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="string">'a'</span>&amp;&amp;x&lt;=<span class="string">'z'</span>) <span class="keyword">return</span> x-<span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="string">'A'</span>&amp;&amp;x&lt;=<span class="string">'Z'</span>) <span class="keyword">return</span> x-<span class="string">'A'</span>+<span class="number">26</span>;</span><br><span class="line">    <span class="keyword">return</span> x-<span class="string">'0'</span>+<span class="number">52</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;b[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eq</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="keyword">if</span>(a[i]!=b[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);len=x;</span><br><span class="line">    sort(t[x].begin(),t[x].end(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t[x].size();i++) {</span><br><span class="line">        <span class="keyword">if</span>(i&amp;&amp;eq(t[x][i],t[x][i<span class="number">-1</span>])) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> p=get(t[x][i][<span class="number">1</span>]),q=get(t[x][i][x]);</span><br><span class="line">        c[p][q]++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">61</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="number">61</span>;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=<span class="number">61</span>;k++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;=<span class="number">61</span>;r++)</span><br><span class="line">                    add(f[i][j][k],<span class="number">1l</span>l*c[r][i]*c[r][j]%mod*c[r][k]%mod);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">61</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="number">61</span>;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=<span class="number">61</span>;k++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> r=k;r&lt;=<span class="number">61</span>;r++)       </span><br><span class="line">                    add(ans,<span class="number">1l</span>l*v[i==j][j==k][k==r]*f[i][j][k]%mod*f[i][j][r]%mod*f[i][k][r]%mod*f[j][k][r]%mod);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// int st=clock();</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);<span class="keyword">int</span> x;</span><br><span class="line">        t[x=<span class="built_in">strlen</span>(s[i]+<span class="number">1</span>)].pb(s[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=x;j++) s[n+i][j]=s[i][j];</span><br><span class="line">        reverse(s[n+i]+<span class="number">1</span>,s[n+i]+x+<span class="number">1</span>);</span><br><span class="line">        t[x].pb(s[n+i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">10</span>;i++) solve(i);</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(lf)(clock()-st)/1e3&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>「CEOI2019」动态直径</title>
    <url>/2019/10/23/%E3%80%8CCEOI2019%E3%80%8D%E5%8A%A8%E6%80%81%E7%9B%B4%E5%BE%84/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3163" target="_blank" rel="noopener"> https://loj.ac/problem/3163 </a>。</p>
<a id="more"></a>
<p>和<a href="https://codeforces.com/contest/1149/problem/C" target="_blank" rel="noopener">这个</a>题是一样的。。。。<del>我也不知道是谁出了原题，也可能是撞车了2333</del></p>
<p>首先把边权下放到点上，好处理一些。</p>
<p>考虑两点之间的距离怎么求，显然有一个式子：</p>
<script type="math/tex; mode=display">
{\rm dep}(a,b)={\rm dep}(a)+{\rm dep}(b)-{\rm dep}({\rm LCA}(a,b))</script><p>注意到$\rm LCA$有一种求法是说，考虑这棵树的欧拉序 <del>我也不知道是不是叫欧拉序</del>，反正就是说遍历的时候对于每条边的两个点标个号，也就是说一个点会在这个序列中出现点度次，那么$a,b$的$\rm LCA$就是$[a,b]$中$\rm dep$最小的那个。</p>
<p>那么直径的式子就可以写成：</p>
<script type="math/tex; mode=display">
\max_{a\leqslant b\leqslant c}\{~{\rm dep(a)}+{\rm dep(c)}-2*{\rm dep(b})\}</script><p>拿线段树维护就好了，复杂度$O(n\log n)$。</p>
<p><del>当然也可以拿树剖和矩阵维护动态dp莽过去，但是多个log而且常数巨大</del></p>
<p><del>主要是代码难写</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],tot,n,q,val[maxn],id[maxn],rev[maxn],cnt,dep[maxn],w,in[maxn],out[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w,id;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> i)</span> </span>{e[++tot]=(edge){v,head[u],w,i},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    rev[in[x]=++cnt]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">if</span>((v=e[i].to)==fa) <span class="keyword">continue</span>;</span><br><span class="line">        val[v]=e[i].w,id[e[i].id]=v,dep[v]=dep[x]+val[v];</span><br><span class="line">        dfs(v,x);rev[++cnt]=x;</span><br><span class="line">    }</span><br><span class="line">    out[x]=cnt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> mx[maxn],ab[maxn],bc[maxn],res[maxn],tag[maxn],mn[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        mx[p]=max(mx[ls],mx[rs]);</span><br><span class="line">        mn[p]=min(mn[ls],mn[rs]);</span><br><span class="line">        res[p]=max(res[ls],res[rs]);</span><br><span class="line">        res[p]=max(res[p],max(ab[ls]+mx[rs],mx[ls]+bc[rs]));</span><br><span class="line">        ab[p]=max(max(ab[ls],ab[rs]),mx[ls]<span class="number">-2</span>*mn[rs]);</span><br><span class="line">        bc[p]=max(max(bc[ls],bc[rs]),<span class="number">-2</span>*mn[ls]+mx[rs]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        tag[p]+=v,mx[p]+=v,mn[p]+=v,ab[p]-=v,bc[p]-=v;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        push(ls,tag[p]),push(rs,tag[p]),tag[p]=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> push(p,v),<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,y,v);</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) modify(rs,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">        update(p);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) {</span><br><span class="line">            <span class="keyword">int</span> a=dep[rev[l]];</span><br><span class="line">            mx[p]=mn[p]=a,ab[p]=bc[p]=-a;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        }build(ls,l,mid),build(rs,mid+<span class="number">1</span>,r),update(p);</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q),read(w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;i++) read(x),read(y),read(z),ins(x,y,z,i),ins(y,x,z,i);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> la=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> a,b;read(a),read(b);</span><br><span class="line">        a=(a+la)%(n<span class="number">-1</span>)+<span class="number">1</span>,b=(b+la)%w;</span><br><span class="line">        a=id[a];</span><br><span class="line">        T.modify(<span class="number">1</span>,<span class="number">1</span>,cnt,in[a],out[a],b-val[a]),val[a]=b;</span><br><span class="line">        write(la=T.res[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Global Round 1</title>
    <url>/2019/10/23/Codeforces-Global-Round-1/</url>
    <content><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/1110" target="_blank" rel="noopener"> https://codeforces.com/contest/1110 </a>。</p>
<a id="more"></a>
<h2 id="D-Jongmah"><a href="#D-Jongmah" class="headerlink" title="D. Jongmah"></a>D. Jongmah</h2><p>注意到如果操作$(x-2,x-1,x)$使用了三次，那么可以转换成三个形如$(x,x,x)$的操作，那么$x$这个操作最多只被使用了两次。</p>
<p>那么暴力$dp$，状态存一下顺子使用的次数就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> t[maxn],n,m,f[maxn][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">if</span>(y&gt;x) x=y;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) read(x),t[x]++;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-63</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">2</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=m;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;=<span class="number">2</span>&amp;&amp;x&lt;=t[i];x++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;=<span class="number">2</span>;p++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;=<span class="number">2</span>;q++) {</span><br><span class="line">                    <span class="keyword">if</span>(f[i<span class="number">-1</span>][p][q]&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(t[i<span class="number">-1</span>]&lt;p+x) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(t[i<span class="number">-2</span>]&lt;q+x+p) <span class="keyword">continue</span>;</span><br><span class="line">                    chmax(f[i][x][p],f[i<span class="number">-1</span>][p][q]+x+(t[i<span class="number">-2</span>]-q-x-p)/<span class="number">3</span>);</span><br><span class="line">                }</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">2</span>;j++)</span><br><span class="line">            chmax(ans,f[m][i][j]+(t[m]-i)/<span class="number">3</span>+(t[m<span class="number">-1</span>]-j-i)/<span class="number">3</span>);</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Magic-Stones"><a href="#E-Magic-Stones" class="headerlink" title="E. Magic Stones"></a>E. Magic Stones</h2><p>考虑差分数组$b_i=a_i-a_{i-1}$，那么如果对$a_i$进行操作，仔细分析下这次操作等价于${\rm swap}(b_i,b_{i+1})$。</p>
<p>那么只需要判断一下两个序列的差分数组排序之后相不相同就行了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(b[i]);</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>]!=b[<span class="number">1</span>]||a[n]!=b[n]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) a[i]-=a[i<span class="number">-1</span>],b[i]-=b[i<span class="number">-1</span>];</span><br><span class="line">    sort(a+<span class="number">2</span>,a+n+<span class="number">1</span>),sort(b+<span class="number">2</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="keyword">if</span>(a[i]!=b[i]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-Nearest-Leaf"><a href="#F-Nearest-Leaf" class="headerlink" title="F. Nearest Leaf"></a>F. Nearest Leaf</h2><p>把询问离线下来，对于$1$号点的询问，直接建一棵线段树就好了。</p>
<p>然后利用换根$dp$的思想，每次移动根节点的时候改一下线段树就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q,head[maxn],tot,ans[maxn],sz[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> {</span><span class="keyword">int</span> l,r,id;};</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;info &gt; a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn&lt;&lt;<span class="number">2</span>],tag[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v)</span> </span>{tag[p]+=v,t[p]+=v;}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{push(ls,tag[p]),push(rs,tag[p]),tag[p]=<span class="number">0</span>;}</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cov</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[p]=v,<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) cov(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> cov(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        t[p]=min(t[ls],t[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> push(p,v),<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,y,v);</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) modify(rs,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">        t[p]=min(t[ls],t[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> t[p];</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1e18</span>;pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) ans=min(ans,query(ls,l,mid,x,y));</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) ans=min(ans,query(rs,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> bo=<span class="number">1</span>;sz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) get(e[i].to,x,d+e[i].w),bo=<span class="number">0</span>,sz[x]+=sz[e[i].to];</span><br><span class="line">    <span class="keyword">if</span>(bo) T.cov(<span class="number">1</span>,<span class="number">1</span>,n,x,d);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:a[x]) ans[t.id]=T.query(<span class="number">1</span>,<span class="number">1</span>,n,t.l,t.r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">if</span>((v=e[i].to)==fa) <span class="keyword">continue</span>;</span><br><span class="line">        T.modify(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,n,e[i].w);</span><br><span class="line">        T.modify(<span class="number">1</span>,<span class="number">1</span>,n,v,v+sz[v]<span class="number">-1</span>,<span class="number">-2</span>*e[i].w);</span><br><span class="line">        solve(v,x);</span><br><span class="line">        T.modify(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,n,-e[i].w);</span><br><span class="line">        T.modify(<span class="number">1</span>,<span class="number">1</span>,n,v,v+sz[v]<span class="number">-1</span>,<span class="number">2</span>*e[i].w);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,p,x;i&lt;=n;i++) read(p),read(x),ins(i,p,x),ins(p,i,x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l,r,v;i&lt;=q;i++) read(v),read(l),read(r),a[v].pb((info){l,r,i});</span><br><span class="line">    <span class="built_in">memset</span>(T.t,<span class="number">63</span>,<span class="keyword">sizeof</span> T.t);</span><br><span class="line">    get(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),solve(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) write(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="G-Tree-Tac-Toe"><a href="#G-Tree-Tac-Toe" class="headerlink" title="G. Tree-Tac-Toe"></a>G. Tree-Tac-Toe</h2><p>神仙题。。图源自$\rm CF$官方题解。</p>
<p>首先我们可以把白色的点换成这样：</p>
<p><img src="https://codeforces.com/predownloaded/6e/1a/6e1a42fedf20604a6eeba21b0748c7ae638694ed.png" alt=""></p>
<p>那么如果白色一开始就放了$A$点，黑色一定只能放$B$点，这样的开局一定不比什么都不干劣。</p>
<p>那么考虑这棵新的树：</p>
<ul>
<li>如果有一个点点度$\geqslant 4$显然白色赢。</li>
<li>如果有一个点点度$\geqslant 3$并且有$\geqslant 2$个儿子点度不为$1$，那么白色先放点度$3$的那个点，显然白色赢。</li>
<li>根据上面那一条可以推出最多只有两个点点度为$3$，其他的都为$1,2$。</li>
</ul>
<p>如果有两个点度为$3$，那么除开上面的情况，这个图一定长这样：</p>
<p><img src="https://codeforces.com/predownloaded/b3/90/b390b4c8150bbcf6211f8f0e606d96bf74b2cc41.png" alt=""></p>
<p>把左边那个点度为$3$的点标号为$1$，然后一路往右标号直到$k$，即水平的那条链。</p>
<p>那么如果$k$为奇数则白色必胜，因为白色可以先放$2$，那么黑色一定放$1$，然后白色$4$，黑色$3\cdots$，最后白色会把$k-1,k$都放了，此时显然白色必胜。</p>
<p>容易知道其他的情况就只有链和类似于上面那张图从中间切开只要一边的情况，显然会和局。</p>
<p>复杂度$O(n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn],n,c,cnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; e[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);cnt=n,c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear(),d[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),d[x]++,d[y]++,e[x].pb(y),e[y].pb(x);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(s[i]==<span class="string">'W'</span>) d[i]++,c++,cnt+=<span class="number">3</span>,e[i].pb(cnt),d[cnt]=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(d[i]&gt;=<span class="number">4</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"White"</span>),<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d[i]==<span class="number">3</span>) c++;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"White"</span>),<span class="keyword">void</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(d[i]==<span class="number">3</span>) {</span><br><span class="line">            <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> x:e[i]) <span class="keyword">if</span>(d[x]&gt;=<span class="number">2</span>) b++;</span><br><span class="line">            <span class="keyword">if</span>(b&gt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"White"</span>),<span class="keyword">void</span>();</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="number">2</span>&amp;&amp;(cnt&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"White"</span>),<span class="keyword">void</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Draw"</span>);</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>CERC2018简要题解</title>
    <url>/2019/10/21/CERC2018%E7%AE%80%E8%A6%81%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>题目大部分$\rm LOJ$有中文翻译，我就在那里做了。</p>
<p>链接：<a href="https://loj.ac/problems/search?keyword=cerc2018" target="_blank" rel="noopener"> https://loj.ac/problems/search?keyword=cerc2018 </a>。</p>
<a id="more"></a>
<h2 id="A-The-ABCD-Murderer"><a href="#A-The-ABCD-Murderer" class="headerlink" title="A. The ABCD Murderer"></a>A. The ABCD Murderer</h2><p>利用$\rm AC$自动机求出以串中每个字符结尾的最大单词的长度，$\rm dp$一下就好了。</p>
<p>我好像写的好复杂。。。没必要用线段树转移，单调队列就行了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,tr[maxn][<span class="number">26</span>],fail[maxn],cnt,vis[maxn],fa[maxn],dep[maxn],f[maxn],g[maxn],h[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) {</span><br><span class="line">        <span class="keyword">int</span> r=t[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[now][r]) tr[now][r]=++cnt,fa[cnt]=now,dep[cnt]=dep[now]+<span class="number">1</span>;</span><br><span class="line">        now=tr[now][r];</span><br><span class="line">    }vis[now]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="keyword">if</span>(tr[<span class="number">0</span>][i]) q.push(tr[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[x]) h[x]=dep[x];</span><br><span class="line">        <span class="keyword">else</span> h[x]=h[fail[x]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(tr[x][i]) {</span><br><span class="line">                fail[tr[x][i]]=tr[fail[x]][i];</span><br><span class="line">                q.push(tr[x][i]);</span><br><span class="line">            } <span class="keyword">else</span> tr[x][i]=tr[fail[x]][i];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_suf</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        x=tr[x][s[i]-<span class="string">'a'</span>],f[i]=h[x];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[p]=v,<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> modify(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        t[p]=min(t[ls],t[rs]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> t[p];</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) ans=min(ans,query(ls,l,mid,x,y));</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) ans=min(ans,query(rs,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(m);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>),ins();</span><br><span class="line">    build_fail();</span><br><span class="line">    get_suf();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(f[i]==i) g[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(f[i]) g[i]=T.query(<span class="number">1</span>,<span class="number">1</span>,n,i-f[i],i<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> g[i]=<span class="number">1e9</span>;</span><br><span class="line">        T.modify(<span class="number">1</span>,<span class="number">1</span>,n,i,g[i]&gt;<span class="number">1e9</span>?<span class="number">1e9</span>:g[i]);</span><br><span class="line">    }write(g[n]&gt;=<span class="number">1e9</span>?<span class="number">-1</span>:g[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Clockwork-ange"><a href="#C-Clockwork-ange" class="headerlink" title="C. Clockwork ||ange"></a>C. Clockwork ||ange</h2><p>注意到答案最大为$6$次，爆搜$6$层，加个记忆化剪枝，把$01$串压缩一下就过了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned ll </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">6</span>;ull all;</span><br><span class="line"><span class="keyword">char</span> ss[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;ull,<span class="keyword">int</span> &gt; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c,ull s)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=ans) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(s==all) {ans=min(ans,x);<span class="keyword">return</span> ;}</span><br><span class="line">    <span class="keyword">if</span>(c&gt;=n) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(t[s]) <span class="keyword">return</span> ;t[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++) dfs(x+<span class="number">1</span>,c&lt;&lt;<span class="number">1</span>,s|((s&gt;&gt;(k&amp;<span class="number">31</span>))&gt;&gt;(k&amp;<span class="number">32</span>)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// int st=clock();</span></span><br><span class="line">    ull x=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ss+<span class="number">1</span>);<span class="keyword">if</span>(ss[<span class="number">1</span>]==<span class="string">'0'</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">    n=<span class="built_in">strlen</span>(ss+<span class="number">1</span>);all=(<span class="number">1u</span>ll&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) x=x&lt;&lt;<span class="number">1</span>|(ss[i]-<span class="string">'0'</span>);</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>,x);write(ans);</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(lf)(clock()-st)/1e3&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Trees-Gump"><a href="#E-Trees-Gump" class="headerlink" title="E. Trees Gump"></a>E. Trees Gump</h2><p>每次选出最靠左边的一个点，然后把这个点当做根，然后剩下的点极角排序，根据每个儿子子树大小一路划分过去就好了。</p>
<p>复杂度$O(n^2\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],tot,sz[maxn],n,f[maxn],rev[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x,y,id;</span><br><span class="line"></span><br><span class="line">    P <span class="keyword">operator</span> - (<span class="keyword">const</span> P &amp;r) <span class="keyword">const</span> {<span class="keyword">return</span> (P){x-r.x,y-r.y};}</span><br><span class="line">    ll <span class="keyword">operator</span> * (<span class="keyword">const</span> P &amp;r) <span class="keyword">const</span> {<span class="keyword">return</span> <span class="number">1l</span>l*x*r.y-y*r.x;}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    sz[x]=<span class="number">1</span>;f[x]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) dfs(e[i].to,x),sz[x]+=sz[e[i].to];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(P x,P y)</span> </span>{<span class="keyword">return</span> x.x&lt;y.x||(x.x==y.x&amp;&amp;x.y&lt;y.y);}</span><br><span class="line"></span><br><span class="line">P pp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(P x,P y)</span> </span>{<span class="keyword">return</span> (x-pp)*(y-pp)&gt;<span class="number">0</span>;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="built_in">vector</span>&lt;P &gt; t)</span> </span>{</span><br><span class="line">    sort(t.begin(),t.end(),cmp1);</span><br><span class="line">    <span class="keyword">auto</span> xx=t.begin();xx++;pp=t[<span class="number">0</span>];</span><br><span class="line">    sort(xx,t.end(),cmp);</span><br><span class="line">    rev[x]=t[<span class="number">0</span>].id;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;<span class="keyword">if</span>(v==f[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;P &gt; tt;tt.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=p;w&lt;p+sz[v];w++) tt.pb(t[w]);</span><br><span class="line">        solve(v,tt);p+=sz[v];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,rev[x]<span class="number">-1</span>,rev[e[i].to]<span class="number">-1</span>),dfs2(e[i].to,x);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">vector</span>&lt;P &gt; a;read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),x++,y++,ins(x,y),ins(y,x);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=n;i++) read(x),read(y),a.pb((P){x,y,i});</span><br><span class="line">    solve(<span class="number">1</span>,a);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="I-The-Silence-of-the-Lamps"><a href="#I-The-Silence-of-the-Lamps" class="headerlink" title="I. The Silence of the Lamps"></a>I. The Silence of the Lamps</h2><p>显然可以$n\log n$枚举约数处理出以每个数为乘积的方案数，前缀和之后就可以$O(1)$回答了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],g[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">1e6</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=i) <span class="keyword">if</span>(i&lt;j/i) g[j]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i,t;j&lt;=n;j+=i) {</span><br><span class="line">            f[j]+=g[t=j/i];</span><br><span class="line">            <span class="keyword">if</span>(j!=<span class="number">1</span>&amp;&amp;t%i==<span class="number">0</span>&amp;&amp;t/i!=i) f[j]--;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]/=<span class="number">3</span>,f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    gen();<span class="keyword">int</span> t;read(t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,i=<span class="number">1</span>;i&lt;=t;i++) read(x),write(f[x]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="J-Matrice"><a href="#J-Matrice" class="headerlink" title="J. Matrice"></a>J. Matrice</h2><p>如果只有一种方向，那么直接$\rm dp$就好了，否则就把矩阵翻转一下做四次。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,p[maxn][maxn],f[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j;j--)</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==s[i][j+<span class="number">1</span>]) p[i][j]=p[i][j+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> p[i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++) f[<span class="number">2</span>][i]=(s[<span class="number">1</span>][i]==s[<span class="number">2</span>][i]&amp;&amp;s[<span class="number">2</span>][i]==s[<span class="number">2</span>][i+<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(s[i][j]==s[i<span class="number">-1</span>][j]) f[i][j]=min(f[i<span class="number">-1</span>][j]+<span class="number">1</span>,p[i][j]);</span><br><span class="line">            <span class="keyword">else</span> f[i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++) res+=f[i][j]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    ans+=calc();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) reverse(s[i]+<span class="number">1</span>,s[i]+m+<span class="number">1</span>); </span><br><span class="line">    ans+=calc();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++) swap(s[i][j],s[n-i+<span class="number">1</span>][j]);</span><br><span class="line">    ans+=calc();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) reverse(s[i]+<span class="number">1</span>,s[i]+m+<span class="number">1</span>);</span><br><span class="line">    ans+=calc();write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解合集</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Grand Contest 037</title>
    <url>/2019/10/15/AtCoder-Grand-Contest-037/</url>
    <content><![CDATA[<p>比赛链接：<a href="https://atcoder.jp/contests/agc037/tasks" target="_blank" rel="noopener"> https://atcoder.jp/contests/agc037/tasks </a>。</p>
<a id="more"></a>
<h2 id="A-Dividing-a-String"><a href="#A-Dividing-a-String" class="headerlink" title="A - Dividing a String"></a>A - Dividing a String</h2><p>注意到最优解一定长度为$1$或$2$，所以直接$\rm dp$就行了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);<span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[i<span class="number">-1</span>]) f[i][<span class="number">1</span>]=f[i<span class="number">-1</span>][<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> f[i][<span class="number">1</span>]=f[i<span class="number">-1</span>][<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">2</span>) {</span><br><span class="line">            f[i][<span class="number">2</span>]=f[i<span class="number">-2</span>][<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[i]!=s[i<span class="number">-2</span>]||s[i<span class="number">-1</span>]!=s[i<span class="number">-3</span>]) f[i][<span class="number">2</span>]=max(f[i][<span class="number">2</span>],f[i<span class="number">-2</span>][<span class="number">2</span>]+<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }write(max(f[n][<span class="number">1</span>],f[n][<span class="number">2</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-RGB-Balls"><a href="#B-RGB-Balls" class="headerlink" title="B - RGB Balls"></a>B - RGB Balls</h2><p>可以把题意转化为这样：把这个数列顺序扫一遍，然后把当前这个球分配给任意一个没有这个颜色的人，最小化每个人拿到第一个球和拿到最后一个球的时间差。</p>
<p>也就是要最小化每个时刻拿到一个或两个球的人数之和。</p>
<p>那么每次一定是如果能凑满一个人就凑满，否则优先给已经有一个球的人。</p>
<p>那么记录一下每个状态当前有多少人，方案数直接乘一下就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,c[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;i++) s[i]=s[i]==<span class="string">'R'</span>?<span class="number">0</span>:(s[i]==<span class="string">'G'</span>?<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;c[<span class="number">0</span>]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">3</span>;i++) {</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">if</span>(c[t=<span class="number">7</span>-(<span class="number">1</span>&lt;&lt;s[i])]) {ans=<span class="number">1l</span>l*ans*c[t]%mod,c[t]--;<span class="keyword">continue</span>;}t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">3</span>;x++)</span><br><span class="line">            <span class="keyword">if</span>(x!=s[i]&amp;&amp;c[<span class="number">1</span>&lt;&lt;x]) {t=<span class="number">1</span>;ans=<span class="number">1l</span>l*ans*c[<span class="number">1</span>&lt;&lt;x]%mod;c[<span class="number">1</span>&lt;&lt;x]--,c[(<span class="number">1</span>&lt;&lt;x)|(<span class="number">1</span>&lt;&lt;s[i])]++;<span class="keyword">break</span>;}</span><br><span class="line">        <span class="keyword">if</span>(!t) ans=<span class="number">1l</span>l*ans*c[<span class="number">0</span>]%mod,c[<span class="number">0</span>]--,c[<span class="number">1</span>&lt;&lt;s[i]]++;</span><br><span class="line">    }</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Numbers-on-a-Circle"><a href="#C-Numbers-on-a-Circle" class="headerlink" title="C - Numbers on a Circle"></a>C - Numbers on a Circle</h2><p>考虑倒着操作，每个操作改为$b-=a+c$，那么我们需要把$b$数组变成$a$。</p>
<p>如果我们当前能操作$x$，那么一定满足$b_x\geqslant b_{x+1}+b_{x-1}$，也就是说如果我们不操作$x$那么一定不能操作$x+1,x-1$，所以这个操作如果不进行那么他永远都不会改变。</p>
<p>所以可以得到一个暴力，每次找到一个可以操作的做一次。</p>
<p>考虑如何优化，拿一个堆存下当前$b_x&gt;a_x$的集合，每次取出$b_x$最大的那个，如果不能操作显然无解，否则就尽量操作到恰好大于等于$a_x$。</p>
<p>这相当于是一个辗转相除的过程，设值域为$v$，那么复杂度就是$O(n\log n\log v)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,ans;</span><br><span class="line">priority_queue&lt;pii &gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(b[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(b[i]&gt;a[i]) q.push(mp(b[i],i));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.top().sc;q.pop();</span><br><span class="line">        <span class="keyword">int</span> p=b[(x<span class="number">-1</span>)?x<span class="number">-1</span>:n]+b[x%n+<span class="number">1</span>],t=<span class="number">0</span>;</span><br><span class="line">        ans+=(t=(b[x]-a[x])/p),b[x]-=t*p;</span><br><span class="line">        <span class="keyword">if</span>(!t) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(b[x]&gt;a[x]) q.push(mp(b[x],x));</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Sorting-a-Grid"><a href="#D-Sorting-a-Grid" class="headerlink" title="D - Sorting a Grid"></a>D - Sorting a Grid</h2><p>考虑对最后的矩阵每一行染色，共$n$种颜色，那么我们只需要保证在第三次操作之前把颜色弄对就行了。</p>
<p>进一步来说，只需要在第二次操作之前使得每一列的颜色构成一个排列即可。</p>
<p>那么只需考虑第一次操作怎么做，我们先确定最左边的一列，容易发现剩下的构成了一个子问题。</p>
<p>考虑二分图，左边为$n$行，右边为$n$种颜色，若第$i$行存在第$j$种颜色就连边，注意到对于每一个行的子集，假设大小为$x$，那么这些行必然包括大于等于$x$中颜色，那么根据$\rm hall$定理可知这个二分图存在完美匹配。</p>
<p>如果用$\rm dinic$实现二分图匹配复杂度为$O(n^3\sqrt n)$。</p>
<p><del>我总觉得我写网络流的时候有buff。。。这代码我二十分钟不到敲完1a了</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],n,m,vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>],tot,dis[maxn&lt;&lt;<span class="number">1</span>],s,t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w=<span class="number">1</span>)</span> </span>{add(u,v,w),add(v,u,<span class="number">0</span>);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">-1</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q;q.push(s),dis[s]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(e[i].w&amp;&amp;dis[e[i].to]==<span class="number">-1</span>) {</span><br><span class="line">                dis[e[i].to]=dis[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(e[i].to==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                q.push(e[i].to);</span><br><span class="line">            }</span><br><span class="line">    }<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x==t) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].w&amp;&amp;dis[e[i].to]==dis[x]+e[i].w) {</span><br><span class="line">            <span class="keyword">int</span> d=dfs(e[i].to,min(f,e[i].w));</span><br><span class="line">            e[i].w-=d,e[i^<span class="number">1</span>].w+=d,f-=d,used+=d;</span><br><span class="line">            <span class="keyword">if</span>(!f) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">if</span>(!used) dis[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs()) flow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) read(a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) {</span><br><span class="line">        s=n*<span class="number">2</span>+<span class="number">1</span>,t=s+<span class="number">1</span>,tot=<span class="number">1</span>;<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++) head[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=m;k++) {</span><br><span class="line">                <span class="keyword">int</span> c=(a[i][k]<span class="number">-1</span>)/m+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i][c]) vis[i][c]=tot+<span class="number">1</span>,ins(i,c+n);</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ins(s,i),ins(i+n,t);</span><br><span class="line">        dinic();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">                <span class="keyword">if</span>(vis[i][k]&amp;&amp;!e[vis[i][k]].w) {</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> x=j;x&lt;=m;x++) <span class="keyword">if</span>((a[i][x]<span class="number">-1</span>)/m+<span class="number">1</span>==k) {swap(a[i][j],a[i][x]);<span class="keyword">break</span>;}</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++,<span class="built_in">puts</span>(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++,<span class="built_in">puts</span>(<span class="string">""</span>)) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++) <span class="keyword">if</span>((a[x][j]<span class="number">-1</span>)/m+<span class="number">1</span>==i) {<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[x][j]);<span class="keyword">break</span>;}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Reversing-and-Concatenating"><a href="#E-Reversing-and-Concatenating" class="headerlink" title="E - Reversing and Concatenating"></a>E - Reversing and Concatenating</h2><p>注意到如果最小的字母为$x$，显然我们想最大化串全为$x$的前缀的长度。</p>
<p>那么考虑把给出的串翻转之后接在后面，取出最长的连续一段的$x$，以这一段作为后缀得到第一次操作后的串。</p>
<p>那么接下来的每次操作我们可以把$x$的后缀的长度翻倍。</p>
<p>也就是说我们可以得到一个全为$x$的前缀长度为$mx\cdot 2^{k-1}$的串，其中$mx$为一开始最长连续一段$x$的长度。</p>
<p>那么如何最小化剩下的长度呢，其实只需要在一开始取最长一段$x$的时候长度相等的时候取倒序字典序最小的就行，因为这一段会在最后一次操作被弄成顺序。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(;a&amp;&amp;b;a--,b--)</span><br><span class="line">        <span class="keyword">if</span>(s[a]&gt;s[b]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[a]&lt;s[b]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);<span class="keyword">int</span> t=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) s[i]=s[<span class="number">2</span>*n-i+<span class="number">1</span>],t=min(t,(<span class="keyword">int</span>)s[i]);</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=t&amp;&amp;s[i<span class="number">-1</span>]==t) {</span><br><span class="line">            <span class="keyword">if</span>(r&gt;mx) mx=r,p.clear(),i&gt;n?p.pb(i<span class="number">-1</span>):<span class="keyword">void</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(r==mx) i&gt;n?p.pb(i<span class="number">-1</span>):<span class="keyword">void</span>();r=<span class="number">0</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==t) r++;</span><br><span class="line">    t=p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p.size();i++) <span class="keyword">if</span>(cmp(p[i],t)) t=p[i];k--;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;<span class="number">18</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">putchar</span>(s[t]);</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min(n,mx*(<span class="number">1</span>&lt;&lt;k));i++) <span class="built_in">putchar</span>(s[t]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=max(<span class="number">0</span>,n-mx*(<span class="number">1</span>&lt;&lt;k));i++) <span class="built_in">putchar</span>(s[t-mx+<span class="number">1</span>-i]);</span><br><span class="line">    }<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>「LOJ6539」奇妙数论题</title>
    <url>/2019/10/15/%E3%80%8CLOJ6539%E3%80%8D%E5%A5%87%E5%A6%99%E6%95%B0%E8%AE%BA%E9%A2%98/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/6539" target="_blank" rel="noopener"> https://loj.ac/problem/6539 </a>。</p>
<a id="more"></a>
<p>有一个很显然的式子：</p>
<script type="math/tex; mode=display">
\sum_{d|i,d|j}\varphi(d)=(i,j)</script><p>带进去把题目中的$(i,j)$去掉：</p>
<script type="math/tex; mode=display">
\sum_{d=1}^{n}\varphi(d)\sum_{i=1}^{n/d}\sum_{j=1}^{n/d}(a_{id},a_{jd})</script><p>注意到后面是一个对一个集合里两两求$\gcd$的式子，再用一次上面那个式子：</p>
<script type="math/tex; mode=display">
\begin{align*}
&\sum_{i=1}^{n}\sum_{j=1}^{n}(a_i,a_j)\\
=&\sum_{d=1}^{n}\varphi(d)(\sum_{i=1}^{n/d}[id|a_i])^2 
\end{align*}</script><p>然后直接暴力对着式子算就好了。。。注意两两$\gcd$的时候枚举每个数的约数算。</p>
<p>分析一波复杂度：</p>
<script type="math/tex; mode=display">
\begin{align*}
&\sum_{i=1}^{n}\sum_{j=1}^{n/i}d(a_{id})\\
=&\sum_{i=1}^{n}d(a_i)\cdot d(i)
\end{align*}</script><p>显然$a_i=i$的时候最大，也就是说复杂度是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}d^2(i)</script><p>然后<a href="http://oeis.org/A061502" target="_blank" rel="noopener">OEIS</a>上说这个是$\frac{1}{\pi^2}n\log ^3 n+o(n\log ^2 n)$的，具体我也不太会。。</p>
<p>总之跑的很快（</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n,phi[maxn],pri[maxn],vis[maxn],tot;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++tot]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;=n;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) {phi[i*pri[j]]=phi[i]*pri[j];<span class="keyword">break</span>;}</span><br><span class="line">            phi[i*pri[j]]=phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*j&lt;=i;j++)</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>) {d[i].pb(j);<span class="keyword">if</span>(j*j!=i) d[i].pb(i/j);}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">s</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=x)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:d[a[i]]) t[p]++;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=x)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:d[a[i]]) {</span><br><span class="line">            <span class="keyword">if</span>(!t[p]) <span class="keyword">continue</span>;</span><br><span class="line">            res=(res+<span class="number">1l</span>l*phi[p]*t[p]%mod*t[p]%mod)%mod;</span><br><span class="line">            t[p]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+<span class="number">1l</span>l*phi[i]*s(i)%mod)%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「BZOJ4314」倍数？倍数！</title>
    <url>/2019/10/14/%E3%80%8CBZOJ4314%E3%80%8D%E5%80%8D%E6%95%B0%EF%BC%9F%E5%80%8D%E6%95%B0%EF%BC%81/</url>
    <content><![CDATA[<p>题目链接：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4314" target="_blank" rel="noopener"> https://www.lydsy.com/JudgeOnline/problem.php?id=4314</a>。</p>
<a id="more"></a>
<p>神仙题。。感觉每一步都好巧妙啊。。</p>
<p>答案多项式为：</p>
<script type="math/tex; mode=display">
F(x)=[y^k]\prod_{i=0}^{n-1}(x^iy+1)</script><p>这个生成函数有两个变量，但是应该很好理解，就是说如果选当前数字就是$x^i$，否则就是$1$，一共只能选$k$个$x^i$所以拿一个$y$来限制一下，最后取$y^k$这一项。</p>
<p>那么答案就是这个多项式指数为$n$的倍数的系数和。</p>
<p>拿单位根反演搞一下，答案就是：</p>
<script type="math/tex; mode=display">
\frac{1}{n}\sum_{i=0}^{n-1}F(\omega_n^i)=[y^k]\frac{1}{n}\sum_{i=0}^{n-1}\prod_{j=0}^{n-1}(\omega_n^{ij}y+1)</script><p>枚举$n$的约数$d$，令$d=n/t$，式子可以写成：</p>
<script type="math/tex; mode=display">
[y^k]\frac{1}{n}\sum_{d|n}\sum_{i=0}^{t-1}\left(\prod_{j=0}^{n-1}(\omega_n^{idj}y+1)\right)[\gcd(i,t)=1]</script><p>仔细想想可以知道每个$id$只会被算一次。</p>
<p>那么根据单位根的性质，上下可以同除$d$，然后那个连乘就会有一个长度为$n/d$的循环节，所以：</p>
<script type="math/tex; mode=display">
[y^k]\frac{1}{n}\sum_{d|n}\sum_{i=0}^{t-1}\left(\prod_{j=0}^{t-1}(\omega_t^{ij}y+1)\right)^d[\gcd(i,t)=1]</script><p>由于$\gcd(i,t)=1​$，所以单位根指数上的$i​$可以去掉，因为在$\bmod t​$意义下每个数都能被取到，所以：</p>
<script type="math/tex; mode=display">
[y^k]\frac{1}{n}\sum_{d|n}\sum_{i=0}^{t-1}\left(\prod_{j=0}^{t-1}(\omega_t^{j}y+1)\right)^d[\gcd(i,t)=1]</script><p>考虑单位根的本质，$\omega_n^{0,1,\cdots,n-1}$是$x^n-1=0$的$n$个解，那么可以得到等式：</p>
<script type="math/tex; mode=display">
x^n-1=\prod_{i=0}^{n-1}(x-\omega_n^i)</script><p>如果我们代入$x=-y$可以得到：</p>
<script type="math/tex; mode=display">
y^n-(-1)^n=\prod_{i=0}^{n-1}(\omega_n^i+y)</script><p>所以如果我们改一下最开始的式子，改成：</p>
<script type="math/tex; mode=display">
\prod_{i=0}^{n-1}(x^i+y)</script><p>那么取$y^{n-k}$项，意义是一样的，所以式子可以变成：</p>
<script type="math/tex; mode=display">
[y^k]\frac{1}{n}\sum_{d|n}\sum_{i=0}^{t-1}\left(\prod_{j=0}^{t-1}(\omega_t^{j}+y)\right)^d[\gcd(i,t)=1]</script><script type="math/tex; mode=display">
[y^{n-k}]\frac{1}{n}\sum_{d|n}\sum_{i=0}^{t-1}\left(y^t-(-1)^t\right)^d[\gcd(i,t)=1]</script><p>注意到中间一块和$i$没啥关系，所以继续变一下：</p>
<script type="math/tex; mode=display">
[y^{n-k}]\frac{1}{n}\sum_{d|n}\varphi(t)\left(y^t-(-1)^t\right)^d</script><p>由于我们只需要知道第$n-k$项，暴力算二项式展开就好了。</p>
<p>复杂度大概是$O(\sqrt n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,pri[maxn],vis[maxn],phi[maxn],tot,fac[maxn],ifac[maxn],inv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++tot]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;=k;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) {phi[i*pri[j]]=phi[i]*pri[j];<span class="keyword">break</span>;}</span><br><span class="line">            phi[i*pri[j]]=phi[i]*phi[pri[j]];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=k;i++) fac[i]=1ll*fac[i-1]*i%mod;</span></span><br><span class="line">    <span class="comment">// ifac[k]=qpow(fac[k],mod-2);</span></span><br><span class="line">    <span class="comment">// for(int i=k-1;i;i--) ifac[i]=1ll*ifac[i+1]*(i+1)%mod;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++) inv[i]=<span class="number">1l</span>l*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int c(int a,int b) {return 1ll*fac[a]*ifac[b]%mod*ifac[a-b]%mod;}</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++) res=<span class="number">1l</span>l*res*(a-i+<span class="number">1</span>)%mod*inv[i]%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t=n/d;</span><br><span class="line">    <span class="keyword">if</span>((n-k)%t!=<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> p=(n-k)/t,b=t&amp;<span class="number">1</span>?<span class="number">1</span>:mod<span class="number">-1</span>;</span><br><span class="line">    ans=(ans+<span class="number">1l</span>l*phi[t]*c(d,d-p)%mod*qpow(b,d-p)%mod)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;i++) <span class="keyword">if</span>(n%i==<span class="number">0</span>) calc(i),i*i==n?<span class="keyword">void</span>():calc(n/i);</span><br><span class="line">    write(<span class="number">1l</span>l*ans*qpow(n,mod<span class="number">-2</span>)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>单位根反演</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>「LOJ6261」一个人的高三楼</title>
    <url>/2019/10/13/%E3%80%8CLOJ6261%E3%80%8D%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E9%AB%98%E4%B8%89%E6%A5%BC/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/6261" target="_blank" rel="noopener">https://loj.ac/problem/6261</a>。</p>
<a id="more"></a>
<p>搞一个生成函数出来，那么每次前缀和相当于乘了个$1+x+x^2+\cdots$。</p>
<p>所以我们就要求那个多项式的$k$次方，注意到可以利用插板法得知第$n$项的系数为$\binom{n+k-1}{k-1}$。</p>
<p>那么我们可以递推求出每一项的系数，然后卷积起来就行了。</p>
<p>复杂度$O(n\log n)$。</p>
<p><del>我看到时限是200ms之后我就没觉得这玩意能过，结果随便写写就卡过去了，我自己都有点蒙</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,g[maxn],a[maxn],inv[maxn],N,bit,w[maxn],pos[maxn];</span><br><span class="line">ll k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;n&lt;&lt;<span class="number">1</span>;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=(pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                r[j+k]=x+y;<span class="keyword">if</span>(r[j+k]&gt;=mod) r[j+k]-=mod;</span><br><span class="line">                r[i+j+k]=x-y;r[i+j+k]+=r[i+j+k]&gt;&gt;<span class="number">31</span>&amp;mod;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        reverse(r+<span class="number">1</span>,r+N);<span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);k%=mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) read(a[i]);</span><br><span class="line">    g[<span class="number">0</span>]=<span class="number">1</span>;inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) inv[i]=<span class="number">1l</span>l*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) g[i]=<span class="number">1l</span>l*g[i<span class="number">-1</span>]*inv[i]%mod*(k+i<span class="number">-1</span>)%mod;</span><br><span class="line">    gen();ntt(a,<span class="number">1</span>),ntt(g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) a[i]=<span class="number">1l</span>l*a[i]*g[i]%mod;</span><br><span class="line">    ntt(a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) write(a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Grand Contest 038</title>
    <url>/2019/10/11/AtCoder-Grand-Contest-038/</url>
    <content><![CDATA[<p>比赛链接：<a href="https://atcoder.jp/contests/agc038/tasks" target="_blank" rel="noopener">https://atcoder.jp/contests/agc038/tasks</a>。</p>
<a id="more"></a>
<h2 id="A-01-Matrix"><a href="#A-01-Matrix" class="headerlink" title="A - 01 Matrix"></a>A - 01 Matrix</h2><p>我无比智障的写了个贪心。。。</p>
<p>结果正解构造好简单啊啊啊</p>
<p>放的是我的贪心的代码，复杂度多个$\log$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,n,m,c[maxn],id[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> c[a]&gt;c[b];}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(a),read(b);</span><br><span class="line">    <span class="keyword">if</span>(a*<span class="number">2</span>&gt;m||b*<span class="number">2</span>&gt;n) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> px=<span class="number">-1</span>,py;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(a*i+(m-a)*(n-i)==b*j+(n-b)*(m-j)) px=i,py=j;</span><br><span class="line">    <span class="keyword">if</span>(px==<span class="number">-1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// printf("%d %d\n",px,py);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(i&lt;=py) c[i]=b;<span class="keyword">else</span> c[i]=n-b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">int</span> cnt;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=px) cnt=a;</span><br><span class="line">        <span class="keyword">else</span> cnt=m-a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) id[j]=j;</span><br><span class="line">        sort(id+<span class="number">1</span>,id+m+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) {</span><br><span class="line">            <span class="keyword">int</span> t=id[j];</span><br><span class="line">            <span class="keyword">if</span>(!c[t]) s[t]=<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt) s[t]=<span class="string">'1'</span>,cnt--,c[t]--;</span><br><span class="line">            <span class="keyword">else</span> s[t]=<span class="string">'0'</span>;</span><br><span class="line">        }<span class="built_in">puts</span>(s+<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Sorting-a-Segment"><a href="#B-Sorting-a-Segment" class="headerlink" title="B - Sorting a Segment"></a>B - Sorting a Segment</h2><p>我们枚举当前排序那一段，考虑排序完之后的数列出现过没。</p>
<p>首先特判不变的情况。</p>
<p>假设当前区间是$[i-k+1,i]$，那么上一个区间是$[i-k,i-1]$，这两种情况排序后相等当且仅当$[i-k,i]$最小值为$a_{i-k}$，最大值为$a_i$，手玩一下就可以发现。</p>
<p>并且没有其他的情况会导致相等，所以维护下最大值最小值就好了。</p>
<p><del>然后我无比智障的写了个线段树，因为单调队列难写</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> mn[maxn&lt;&lt;<span class="number">2</span>],mx[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v,<span class="keyword">int</span> p=<span class="number">1</span>,<span class="keyword">int</span> l=<span class="number">1</span>,<span class="keyword">int</span> r=n)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> mn[p]=mx[p]=v,<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(x,v,ls,l,mid);</span><br><span class="line">        <span class="keyword">else</span> modify(x,v,rs,mid+<span class="number">1</span>,r);</span><br><span class="line">        mn[p]=min(mn[ls],mn[rs]);</span><br><span class="line">        mx[p]=max(mx[ls],mx[rs]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> o,<span class="keyword">int</span> p=<span class="number">1</span>,<span class="keyword">int</span> l=<span class="number">1</span>,<span class="keyword">int</span> r=n)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> (o?mn:mx)[p];</span><br><span class="line">        <span class="keyword">if</span>(y&lt;=mid) <span class="keyword">return</span> query(x,y,o,ls,l,mid);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;mid) <span class="keyword">return</span> query(x,y,o,rs,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!o) <span class="keyword">return</span> max(query(x,y,o,ls,l,mid),query(x,y,o,rs,mid+<span class="number">1</span>,r));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(query(x,y,o,ls,l,mid),query(x,y,o,rs,mid+<span class="number">1</span>,r));</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,bo=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>]) p=i;T.modify(i,a[i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(i-k+<span class="number">1</span>&gt;=p) {bo=<span class="number">1</span>;<span class="keyword">continue</span>;}</span><br><span class="line">        <span class="keyword">if</span>(i==k) {ans++;<span class="keyword">continue</span>;}</span><br><span class="line">        <span class="keyword">if</span>(T.query(i-k,i<span class="number">-1</span>,<span class="number">1</span>)==a[i-k]&amp;&amp;T.query(i-k+<span class="number">1</span>,i,<span class="number">0</span>)==a[i]) ;</span><br><span class="line">        <span class="keyword">else</span> ans++;</span><br><span class="line">    }write(ans+bo);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-LCMs"><a href="#C-LCMs" class="headerlink" title="C - LCMs"></a>C - LCMs</h2><p>这种数论题都被做烂了。。。</p>
<p>设$b_i$表示$a_x=i$的个数，式子可以写成：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{N}\sum_{j=1}^{N}b_ib_j{\rm lcm}(i,j)</script><p>最后处理下重复的情况就行，那么莫比乌斯反演一下：</p>
<script type="math/tex; mode=display">
\sum_{d=1}^{N}\frac{1}{d}\sum_{t=1}^{N/d}\frac{\mu(t)}{t^2}
(\sum_{i=1}^{N/dt}b_{idt})^2</script><p>复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],s[maxn],ans,inv[maxn],pri[maxn],vis[maxn],mu[maxn],b[maxn],tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++) inv[i]=<span class="number">1l</span>l*(mod-mod/i)*inv[mod%i]%mod;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++tot]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;=N;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i*pri[j]]=-mu[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    gen();read(n);<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),b[a[i]]++,sum=(sum+a[i])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=N;j+=i)</span><br><span class="line">            s[i]=(s[i]+<span class="number">1l</span>l*b[j]*j%mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=N;d++) {</span><br><span class="line">        <span class="keyword">if</span>(!s[d]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=N/d;t++) res=(res+<span class="number">1l</span>l*mu[t]*s[d*t]*s[d*t]%mod)%mod;</span><br><span class="line">        res=<span class="number">1l</span>l*res*inv[d]%mod;</span><br><span class="line">        ans=(ans+res)%mod;</span><br><span class="line">    }write((<span class="number">1l</span>l*(ans-sum+mod)*inv[<span class="number">2</span>]%mod+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Unique-Path"><a href="#D-Unique-Path" class="headerlink" title="D - Unique Path"></a>D - Unique Path</h2><p>我想不出的神仙题。。</p>
<p>首先对于唯一路径的限制直接连边缩起来，连成一棵树。</p>
<p>对于不唯一的限制，如果两点在一个块中肯定不合法了。</p>
<p>假设我们当前有$c$个块，也就是说我们还需要连$m-n+c$条边。</p>
<p>考虑连通块之间怎么连边，如果我们对于一个连通块选出一个代表点，连边只在这些点之间进行，那么可以发现无论我们怎么连，块内的唯一路径的限制还是可以满足。</p>
<p>如果没有不唯一限制，那么只要满足$c-1\leqslant m-n+c\leqslant c(c-1)/2$就行了。</p>
<p>否则只要出现一个环就行，也就是$c\leqslant m-n+c\leqslant c(c-1)/2$。</p>
<p>注意到这种情况下如果只有两个以下个连通块是不合法的。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[maxn],n,m,t;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii &gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(t);<span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++) {</span><br><span class="line">        <span class="keyword">int</span> x,y,z;read(x),read(y),read(z);</span><br><span class="line">        <span class="keyword">if</span>(z) a.pb(mp(x,y));</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            x=find(x),y=find(y);</span><br><span class="line">            <span class="keyword">if</span>(x!=y) fa[x]=y,c++;</span><br><span class="line">        }</span><br><span class="line">    }c=n-c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:a) <span class="keyword">if</span>(find(x.fr)==find(x.sc)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l=a.size()?max(<span class="number">3l</span>l,c):c<span class="number">-1</span>,r=c*(c<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(m-n+c&gt;=l&amp;&amp;m-n+c&lt;=r) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Gachapon"><a href="#E-Gachapon" class="headerlink" title="E - Gachapon"></a>E - Gachapon</h2><p>神仙题啊啊啊啊啊，我对着官方题解看了好久才看懂的。。。</p>
<p>首先考虑$\min-\max$容斥，问题转化为了：对于所有集合$s$求有任意一个大于等于$b_i$就停止的期望步数乘上$(-1)^{|s|+1}$之和。</p>
<p>这个问题又可以转化为：求任意一个都没到$b_i$的情况数的期望出现次数，因为对于一种状态，假设它是第一个超出的状态，那么他前面一定都是不超出的状态，状态数就等于步数。</p>
<p>首先考虑确定了集合$s$的情况，假设当前状态是第$i$个出现了$x_i$，考虑出现这个状态的概率，根据一点组合数可以知道如果硬点选不到其他的数，概率就是：</p>
<script type="math/tex; mode=display">
(\sum x_i)!\prod_{i=1}^{n}(\frac{a_i}{\sum a_j})^{x_i}\cdot \frac{1}{x_i!}</script><p>如果考虑其他数可以发现出现概率是没有影响的，但是有影响的是当前状态出现了之后可能持续若干轮选其他的数，导致这个状态出现了多次。</p>
<p>更具体的，假设下一个选的数为当前集合里的数的概率为$P$，那么这个状态期望会持续$1/P$次，所以这个状态的贡献就是：</p>
<script type="math/tex; mode=display">
\frac{1}{P}(\sum x_i)!\prod_{i=1}^{n}(\frac{a_i}{\sum a_j})^{x_i}\cdot \frac{1}{x_i!}</script><p>那么计算所有状态贡献和可以利用$dp$，设$f_{i,j}$表示当前状态$\sum a=i,\sum b=j$的贡献和，转移就枚举当前数出现了几次，最后在把前面的系数乘上去。</p>
<p>然后考虑怎么算对于每个集合的贡献和，其实这也非常简单了，考虑$dp$的时候加入一个数就多乘一个$-1$就行了。</p>
<p>复杂度为$O((\sum a)(\sum b)^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">400</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn],f[maxn][maxn],fac[maxn],ifac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    ifac[maxn<span class="number">-1</span>]=qpow(fac[maxn<span class="number">-1</span>],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=maxn<span class="number">-2</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    gen();</span><br><span class="line">    read(n);<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),read(b[i]),s+=a[i];</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=mod<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> ss=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        ss+=a[i],tt+=b[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=ss;j&gt;=a[i];j--) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=tt;k++) {</span><br><span class="line">                <span class="keyword">int</span> w=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;b[i]&amp;&amp;x&lt;=k;x++) {</span><br><span class="line">                    f[j][k]=(f[j][k]<span class="number">-1l</span>l*f[j-a[i]][k-x]*w%mod*ifac[x]%mod+mod)%mod;</span><br><span class="line">                    w=<span class="number">1l</span>l*w*a[i]%mod;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ss;i++) {</span><br><span class="line">        <span class="keyword">int</span> r=qpow(i,mod<span class="number">-2</span>),w=<span class="number">1l</span>l*r*ss%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=tt;j++,w=<span class="number">1l</span>l*w*r%mod)</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*f[i][j]*fac[j]%mod*w%mod)%mod;</span><br><span class="line">    }</span><br><span class="line">    write((ans+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Grand Contest 039</title>
    <url>/2019/10/10/AtCoder-Grand-Contest-039/</url>
    <content><![CDATA[<p>比赛链接：<a href="https://atcoder.jp/contests/agc039/tasks" target="_blank" rel="noopener">https://atcoder.jp/contests/agc039/tasks</a>。</p>
<a id="more"></a>
<h2 id="A-Connection-and-Disconnection"><a href="#A-Connection-and-Disconnection" class="headerlink" title="A - Connection and Disconnection"></a>A - Connection and Disconnection</h2><p>找到两个不同的字符切开，每一段就不影响了。</p>
<p>如果没有就特判下。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[i<span class="number">-1</span>]) t++;</span><br><span class="line">        <span class="keyword">else</span> res+=t/<span class="number">2</span>,t=<span class="number">1</span>;</span><br><span class="line">    res+=t/<span class="number">2</span>;<span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);read(k);n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="keyword">if</span>(s[i]!=s[i<span class="number">-1</span>]) p=i;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1l</span>l*k*n/<span class="number">2</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=n+p<span class="number">-1</span>;i++) s[i]=s[i-n];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="number">1l</span>l*solve(p,p+n<span class="number">-1</span>)*(k<span class="number">-1</span>)+solve(<span class="number">1</span>,n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Graph-Partition"><a href="#B-Graph-Partition" class="headerlink" title="B - Graph Partition"></a>B - Graph Partition</h2><p>以每个点为起点分层图染色就行了，用到颜色的数量就是答案，注意判不合法情况。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],tot,n,col[maxn],ans,c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="comment">// printf("%d %d\n",u,v);</span></span><br><span class="line">    e[++tot]=(edge){v,head[u]},head[u]=tot;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q;q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();c=max(c,col[x]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(!col[e[i].to]) col[e[i].to]=col[x]+<span class="number">1</span>,q.push(e[i].to);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(col[e[i].to]-col[x])!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(s[j]==<span class="string">'1'</span>) ins(i,j),ins(j,i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) col[j]=<span class="number">0</span>;</span><br><span class="line">        col[i]=<span class="number">1</span>;c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(bfs(i)) ans=max(ans,c);</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Division-by-Two-with-Something"><a href="#C-Division-by-Two-with-Something" class="headerlink" title="C - Division by Two with Something"></a>C - Division by Two with Something</h2><p>手动模拟下小样例或者推一下可以发现，一个串操作$x$次之后能按位取反当且仅当对于任意$i$满足$s_i=s_{i-x}~{\rm xor}~1$。</p>
<p>并且显然$x$要满足$x|n$，并且$n/x$为奇数，否则操作之前的串最后一截就会等于操作之后前面一截，不符合条件。</p>
<p>那么就可以$O(n)$的算出有多少种小于给定串的串可以在至多$x$次操作后按位取反。</p>
<p>那么容斥一下就可以得到答案了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn],f[maxn],n,t[maxn],cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++) ans=((ans&lt;&lt;<span class="number">1</span>)|s[i])%mod,t[i]=s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span>;i&lt;=n;i++) t[i]=t[i-x]^<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;t[i]) <span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;t[i]) <span class="keyword">return</span> ans;</span><br><span class="line">    }<span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]-=<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(n%i==<span class="number">0</span>&amp;&amp;((n/i)&amp;<span class="number">1</span>)) vis[n/i]=<span class="number">1</span>,f[n/i]=calc(i);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i&lt;&lt;<span class="number">1</span>;j&lt;=n;j+=i) <span class="keyword">if</span>(vis[j]) f[i]=(f[i]-f[j]+mod)%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*n/i*<span class="number">2</span>*f[i]%mod)%mod;</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Incenters"><a href="#D-Incenters" class="headerlink" title="D - Incenters"></a>D - Incenters</h2><p>我完全不会的几何题。。题解都看了好久才看懂。。</p>
<p>对于$\triangle ABC$，设$A^\prime$为弧$BC$不经过$A$的中点，$B’,C’$同理，那么可以发现$\triangle A’B’C’$的垂心和$\triangle ABC$的内心重合。</p>
<p>根据欧拉线定理（可以上百度搜，讲的还挺对的<del>我也是第一次知道这玩意</del>），设$\triangle ABC$的垂心，重心，外心为$H,G,O$，那么有$H,G,O$共线，并且$2|GO|=|HG|$。</p>
<p>注意到这题中外心就是$(0,0)$，而重心是三点坐标加起来除以二，所以垂心就是三点坐标之和。</p>
<p>接下来的事就很简单了，我们只需要统计每个$A’$点出现的次数，加起来就可以了，因为$A’$点有$O(n^2)$个，所以复杂度为$O(n^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> lf pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,L,t[maxn];</span><br><span class="line">lf x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) {</span><br><span class="line">        lf p=(t[b]+L-t[a])/<span class="number">2.0</span>;</span><br><span class="line">        lf w=<span class="number">1.0</span>*t[a]+p;<span class="keyword">if</span>(w&gt;L) w-=L;</span><br><span class="line">        x+=<span class="built_in">cos</span>(<span class="number">2.0</span>*pi*w/L)*(a-b<span class="number">-1</span>);</span><br><span class="line">        y+=<span class="built_in">sin</span>(<span class="number">2.0</span>*pi*w/L)*(a-b<span class="number">-1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        lf w=(t[a]+t[b])/<span class="number">2.0</span>;</span><br><span class="line">        x+=<span class="built_in">cos</span>(<span class="number">2.0</span>*pi*w/L)*(n-(b-a+<span class="number">1</span>));</span><br><span class="line">        y+=<span class="built_in">sin</span>(<span class="number">2.0</span>*pi*w/L)*(n-(b-a+<span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(L);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(t[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j) get(i,j);</span><br><span class="line">    lf pps=<span class="number">1.0</span>*n*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">6.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf %.10lf\n"</span>,x/pps,y/pps);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Pairing-Points"><a href="#E-Pairing-Points" class="headerlink" title="E - Pairing Points"></a>E - Pairing Points</h2><p>又是我不会的神仙题。。不过比前一题小清新多了。</p>
<p>首先枚举$1$连的点，假设是$i$。</p>
<p>注意到必然有一个点对会横跨$(1,i)$这条边，否则不连通，那么我们枚举最上面那个，假设是$(j,k)$ $(j&lt;k)$。</p>
<p>因为我们枚举的是最上面那条边，所以$[2,j-1]$不会和$[i,n]$连边，同理$[j+1,n-1]$不会和$[2,i]$连边。</p>
<p>所以$[2,j-1]$只会在自己内连边或连向$[j+1,i-1]$，并且$[j+1,i-1]$一定会有一个分界点，假设是$s$，那么$[2,j-1]$只会向$[j+1,s]$连边，而$[s+1,i-1]$也只会向另一边连边。</p>
<p>假设另一边的分界点为$t$，那么问题被分成了三个子问题：$[2,j-1]\sim [j+1,s]$，$[s+1,i-1]\sim [i+1,t-1]$，$[t,k-1]\sim [k+1,n]$。</p>
<p>所以写个记忆化搜索就行了，复杂度应该是常数非常小的$O(n^7)$，足以通过本题。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">40</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll f[maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(f[l][r][mid]!=<span class="number">-1</span>) <span class="keyword">return</span> f[l][r][mid];</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==mid||r==mid) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;mid;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=mid+<span class="number">1</span>;k&lt;=r;k++) {</span><br><span class="line">            <span class="keyword">if</span>(c[j][k]==<span class="string">'0'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s=j;s&lt;mid;s++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> t=mid+<span class="number">1</span>;t&lt;=k;t++)</span><br><span class="line">                    ans+=dfs(l,s,j)*dfs(t,r,k)*dfs(s+<span class="number">1</span>,t<span class="number">-1</span>,mid);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">return</span> f[l][r][mid]=ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);n&lt;&lt;=<span class="number">1</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c[i]+<span class="number">1</span>);</span><br><span class="line">    ll ans=<span class="number">0</span>;<span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="keyword">if</span>(c[<span class="number">1</span>][i]==<span class="string">'1'</span>) ans+=dfs(<span class="number">2</span>,n,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>「CF913F」Strongly Connected Tournament</title>
    <url>/2019/10/08/%E3%80%8CCF913F%E3%80%8DStrongly-Connected-Tournament/</url>
    <content><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/913/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/913/problem/F</a>。</p>
<a id="more"></a>
<p><del>神仙题，竞赛图好好玩啊</del></p>
<p>我完全没想法只好看题解了。。设答案为$ans_i$，可以得到一个递推式：</p>
<script type="math/tex; mode=display">
ans_i=\sum_{j=1}^{i}s_jc_{i,j}(j(i-j)+\frac{j(j-1)}{2}+ans_j+ans_{i-j})</script><p>其中$s_i$表示$i$个点的竞赛图强连通的概率，$c_{i,j}$表示$i$个点的图$i-j$个连向剩下$j$个的概率，这个式子是在枚举链上最后一个强连通块有多大，$s_jc_{i,j}$就表示出现一个$j$个点的强连通分量的概率。</p>
<p>考虑求$s_i$，利用容斥，枚举出现$&lt;i$大小的块的个数：</p>
<script type="math/tex; mode=display">
s_i=1-\sum_{j=1}^{i-1}s_jc_{i,j}</script><p>求$c_{i,j}$可以考虑参照组合数的递推：</p>
<script type="math/tex; mode=display">
c_{i,j}=c_{i-1,j-1}p^{i-j}+c_{i-1,j}(1-p)^j</script><p>复杂度$O(n^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[maxn],c[maxn][maxn],ans[maxn],n,p,p1[maxn],p2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(p);<span class="keyword">int</span> x;read(x);p=<span class="number">1l</span>l*p*qpow(x,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    p1[<span class="number">0</span>]=p2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p1[i]=<span class="number">1l</span>l*p1[i<span class="number">-1</span>]*p%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p2[i]=<span class="number">1l</span>l*p2[i<span class="number">-1</span>]*(<span class="number">1</span>-p+mod)%mod;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            c[i][j]=(<span class="number">1l</span>l*c[i<span class="number">-1</span>][j<span class="number">-1</span>]*p1[i-j]%mod+<span class="number">1l</span>l*c[i<span class="number">-1</span>][j]*p2[j]%mod)%mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        s[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++) s[i]=(s[i]<span class="number">-1l</span>l*s[j]*c[i][j]%mod+mod)%mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) {</span><br><span class="line">            <span class="keyword">int</span> tmp=ans[j]*(j!=i)+ans[i-j];</span><br><span class="line">            ans[i]=(ans[i]+<span class="number">1l</span>l*s[j]*c[i][j]%mod*(<span class="number">1l</span>l*j*(i-j)%mod+<span class="number">1l</span>l*j*(j<span class="number">-1</span>)/<span class="number">2</span>%mod+tmp)%mod)%mod;</span><br><span class="line">        }</span><br><span class="line">        ans[i]=<span class="number">1l</span>l*ans[i]*qpow((<span class="number">1</span>-s[i]+mod)%mod,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    }write(ans[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>「HNOI2019」白兔之舞</title>
    <url>/2019/10/07/%E3%80%8CHNOI2019%E3%80%8D%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3058" target="_blank" rel="noopener">https://loj.ac/problem/3058</a>。</p>
<p><del>咕咕咕了几个月终于来写这个东西了</del></p>
<a id="more"></a>
<p>先考虑$n=1$的情况，假设读入的种类数是$w$，设$f_i$表示走$i$步的方案数，容易知道：</p>
<script type="math/tex; mode=display">
f_i=\binom{L}{i}w^i</script><p>把这个东西写成生成函数：</p>
<script type="math/tex; mode=display">
F(x)=\sum_{i=0}^{L}\binom{L}{i}w^ix^i=(wx+1)^L</script><p>根据单位根反演的套路，假设我们要求$\bmod k=0$的项之和，可以这样算：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^{k-1}F(\omega_k^i)=\sum_{i=0}^{L}\binom{L}{i}w^i\sum_{j=0}^{k-1}\omega_{k}^{ij}=k\sum_{i=0}^{L}\binom{L}{i}w^i[k|i]</script><p>$\bmod k$为其他值的项可以通过把$F(x)$的项移位得到。</p>
<p>设答案为$g(i)$，即$\mod k=i$的项之和，那么可以写成：</p>
<script type="math/tex; mode=display">
\begin{align*}
g(i)=&\frac{1}{k}\sum_{a=0}^{k-1}F(\omega_k^a)\omega_k^{-ai}\\ 
=&\frac{1}{k}\sum_{a=0}^{k-1}(w\cdot \omega_k^a+1)^L\omega_k^{-ai}
\end{align*}</script><p>此时复杂度为$O(k^2)$，<del>好像一分都拿不到</del>。</p>
<p>接下来就是我不会的神仙操作。。有一个组合意义很明显的式子：</p>
<script type="math/tex; mode=display">
ij=\binom{i+j}{2}-\binom{i}{2}-\binom{j}{2}</script><p>暴力展开也能验证。</p>
<p>然后把这个式子带入$\omega_k$的指数：</p>
<script type="math/tex; mode=display">
\begin{align*}
g(i)=&\frac{1}{k}\sum_{a=0}^{k-1}(w\cdot \omega_k^a+1)^L\omega_k^{-\binom{i+a}{2}+\binom{i}{2}+\binom{a}{2}}\\=&\omega_k^{\binom{i}{2}}\frac{1}{k}\sum_{a=0}^{k-1}(w\cdot \omega_k^a+1)^L\omega_k^{\binom{a}{2}}\cdot \omega_k^{-\binom{i+a}{2}}
\end{align*}</script><p>注意到前面和$a$有关，后面和$i+a$有关，随便把前面还是后面翻转一下就是一个卷积的形式，因为模数是读入的，所以上任意模数$\rm FFT$就行了。</p>
<p>不过好像$8$次或者$7$次$\rm FFT$的做法被卡常了，我写的是$4$次$\rm FFT$的做法。</p>
<p>至于$n\ne 1$的情况也是一样，只需要把$v$换成读入的矩阵，$1$换成单位矩阵，然后暴力处理出前面那个$L$次方项，其他的都是一样的。</p>
<p>复杂度$O(k\log k)$。</p>
<p>可以看看我代码$\rm 120$行左右的一段注释，我被那里坑了好久。。。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> lf pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,mod,g,k,L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{a+=b;<span class="keyword">if</span>(a&gt;=mod) a-=mod;<span class="keyword">return</span> a;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{a-=b;a+=a&gt;&gt;<span class="number">31</span>&amp;mod;<span class="keyword">return</span> a;}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    matrix () {<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">operator</span> [] (<span class="keyword">int</span> x) {<span class="keyword">return</span> a[x];}</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> * (matrix x) <span class="keyword">const</span> {</span><br><span class="line">        matrix r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">                    r[i][j]=add(r[i][j],<span class="number">1l</span>l*a[i][k]*x[k][j]%mod);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">int</span> x) <span class="keyword">const</span> {</span><br><span class="line">        matrix r=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) r[i][j]=<span class="number">1l</span>l*r[i][j]*x%mod;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> + (matrix x) <span class="keyword">const</span> {</span><br><span class="line">        matrix r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) r[i][j]=add(a[i][j],x[i][j]);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> ^ (<span class="keyword">int</span> x) <span class="keyword">const</span> {</span><br><span class="line">        matrix r,a=*<span class="keyword">this</span>;r[<span class="number">0</span>][<span class="number">0</span>]=r[<span class="number">1</span>][<span class="number">1</span>]=r[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=a*a) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) r=r*a;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">}tr,I;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],w,c[maxn];</span><br><span class="line"><span class="keyword">int</span> t[maxn],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_root</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> e=mod<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=e;i++) {</span><br><span class="line">        <span class="keyword">if</span>(e%i) <span class="keyword">continue</span>;t[++cnt]=i;</span><br><span class="line">        <span class="keyword">while</span>(e%i==<span class="number">0</span>) e/=i;</span><br><span class="line">    }<span class="keyword">if</span>(e!=<span class="number">1</span>) t[++cnt]=e;</span><br><span class="line">    <span class="keyword">for</span>(g=<span class="number">2</span>;;g++) {</span><br><span class="line">        <span class="keyword">int</span> bo=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) <span class="keyword">if</span>(qpow(g,(mod<span class="number">-1</span>)/t[i])==<span class="number">1</span>) {bo=<span class="number">0</span>;<span class="keyword">break</span>;}</span><br><span class="line">        <span class="keyword">if</span>(bo) <span class="keyword">break</span>;</span><br><span class="line">    }w=qpow(g,(mod<span class="number">-1</span>)/k);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MTT {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cp</span> {</span></span><br><span class="line">        lf r,i;</span><br><span class="line">        cp () {r=i=<span class="number">0</span>;}</span><br><span class="line">        cp (lf x,lf y) {r=x,i=y;}</span><br><span class="line">        cp <span class="keyword">operator</span> * (cp x) {<span class="keyword">return</span> cp(r*x.r-i*x.i,r*x.i+i*x.r);}</span><br><span class="line">        cp <span class="keyword">operator</span> - (cp x) {<span class="keyword">return</span> cp(r-x.r,i-x.i);}</span><br><span class="line">        cp <span class="keyword">operator</span> + (cp x) {<span class="keyword">return</span> cp(r+x.r,i+x.i);}</span><br><span class="line">        cp <span class="keyword">operator</span> / (<span class="keyword">int</span> x) {<span class="keyword">return</span> cp(r/x,i/x);}</span><br><span class="line">    }ww[maxn],g[<span class="number">4</span>][maxn];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pos[maxn],N,bit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(cp *r)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                    cp x=r[j+k],y=ww[k*d]*r[i+j+k];</span><br><span class="line">                    r[j+k]=x+y,r[i+j+k]=x-y;</span><br><span class="line">                }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;len;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">        <span class="comment">// ww[0]=cp(1,0),ww[1]=cp(cos(2*pi/N),sin(2*pi/N));</span></span><br><span class="line">        <span class="comment">// for(int i=2;i&lt;N;i++) ww[i]=ww[i-1]*ww[1];</span></span><br><span class="line">        <span class="comment">// 千万别学我写上面那个破玩意。。。我就因为上面这两句话调了一个小时</span></span><br><span class="line">        <span class="comment">// 上面这种写法如果是FFT会带来巨大的误差导致全部WA掉，但是如果是NTT这种写法就是对的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) ww[i]=cp(<span class="built_in">cos</span>(<span class="number">2</span>*pi/N*i),<span class="built_in">sin</span>(<span class="number">2</span>*pi/N*i));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">cp <span class="title">conj</span><span class="params">(cp x)</span> </span>{<span class="keyword">return</span> cp(x.r,-x.i);}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *s,<span class="keyword">int</span> *t,<span class="keyword">int</span> len)</span> </span>{</span><br><span class="line">        init(len);<span class="keyword">int</span> all=<span class="number">32767</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) g[<span class="number">0</span>][i]=cp(r[i]&gt;&gt;<span class="number">15</span>,r[i]&amp;all),g[<span class="number">1</span>][i]=cp(s[i]&gt;&gt;<span class="number">15</span>,s[i]&amp;all);</span><br><span class="line">        dft(g[<span class="number">0</span>]),dft(g[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) {</span><br><span class="line">            <span class="keyword">int</span> j=N-i;<span class="keyword">if</span>(!i) j=<span class="number">0</span>;</span><br><span class="line">            g[<span class="number">2</span>][j]=(g[<span class="number">0</span>][i]+conj(g[<span class="number">0</span>][j]))*cp(<span class="number">0.5</span>,<span class="number">0</span>)*g[<span class="number">1</span>][i];</span><br><span class="line">            g[<span class="number">3</span>][j]=(g[<span class="number">0</span>][i]-conj(g[<span class="number">0</span>][j]))*cp(<span class="number">0</span>,<span class="number">-0.5</span>)*g[<span class="number">1</span>][i];</span><br><span class="line">        }dft(g[<span class="number">2</span>]),dft(g[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) g[<span class="number">2</span>][i].r/=N,g[<span class="number">2</span>][i].i/=N,g[<span class="number">3</span>][i].i/=N,g[<span class="number">3</span>][i].r/=N;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) {</span><br><span class="line">            ll a=g[<span class="number">2</span>][i].r+<span class="number">0.5</span>,b=g[<span class="number">2</span>][i].i+<span class="number">0.5</span>,c=g[<span class="number">3</span>][i].r+<span class="number">0.5</span>,d=g[<span class="number">3</span>][i].i+<span class="number">0.5</span>;</span><br><span class="line">            t[i]=(((a%mod)&lt;&lt;<span class="number">30</span>)+(((b+c)%mod)&lt;&lt;<span class="number">15</span>)+d)%mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> MTT :: mul;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    read(n),read(k),read(L),read(x),read(y),read(mod);x--,y--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) read(tr[i][j]);</span><br><span class="line">    get_root();I[<span class="number">0</span>][<span class="number">0</span>]=I[<span class="number">1</span>][<span class="number">1</span>]=I[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) a[i]=<span class="number">1l</span>l*((tr*qpow(w,i)+I)^L)[x][y]*qpow(w,<span class="number">1l</span>l*i*(i<span class="number">-1</span>)/<span class="number">2</span>%(mod<span class="number">-1</span>))%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k*<span class="number">2</span><span class="number">-1</span>;i++) b[i]=qpow(qpow(w,<span class="number">1l</span>l*i*(i<span class="number">-1</span>)/<span class="number">2</span>%(mod<span class="number">-1</span>)),mod<span class="number">-2</span>);</span><br><span class="line">    reverse(b,b+k*<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">    mul(a,b,c,k*<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) write(<span class="number">1l</span>l*qpow(w,<span class="number">1l</span>l*i*(i<span class="number">-1</span>)/<span class="number">2</span>%(mod<span class="number">-1</span>))*qpow(k,mod<span class="number">-2</span>)%mod*c[k*<span class="number">2</span><span class="number">-2</span>-i]%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>「PKUSC2018」神仙的游戏</title>
    <url>/2019/10/05/%E3%80%8CPKUSC2018%E3%80%8D%E7%A5%9E%E4%BB%99%E7%9A%84%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/6436" target="_blank" rel="noopener">https://loj.ac/problem/6436</a>。</p>
<a id="more"></a>
<p>注意到$\rm border$和循环节是一一对应的，具体来说如果有一个长度为$x$的$\rm border$，那么这个串一定有一个长度为$n-x$的循环节。</p>
<p>那么我们只需要判断循环节就好了。</p>
<p>注意到假设一对$0,1$中间有$x$个字符，那么一定没有长度为$x+1$的循环节，并且所有长度为$x+1$的约数也不可能出现。</p>
<p>所以可以得到一个暴力：枚举每一对$0,1$，拿个桶记录一下，统计答案的时候，假设我们要判断长度为$x$的循环节，只需要枚举倍数就行了。</p>
<p>可以发现后面复杂度是对的，我们优化预处理复杂度就行。</p>
<p>那么搞出两个生成函数$F(x)=\sum_{i=0}^{n-1}[s_i=0]x^i$和$G(x)=\sum_{i=0}^{n-1}[s_{n-i-1}=1]x^i$乘起来。</p>
<p>那么如果一对$0,1$距离为$x$，那么可能会贡献到$n-x-1$或者$n+x-1$这一位，并且这两个位置只对应距离为$x$。</p>
<p>所以判一下就好了，复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];<span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],ban[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[maxn],pos[maxn],N,bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">-1</span>;N&lt;n*<span class="number">2</span>;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=N&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=<span class="number">1l</span>l*w[k*d]*r[i+j+k]%mod;</span><br><span class="line">                r[j+k]=x+y;<span class="keyword">if</span>(r[j+k]&gt;=mod) r[j+k]-=mod;</span><br><span class="line">                r[i+j+k]=x-y;r[i+j+k]+=r[i+j+k]&gt;&gt;<span class="number">31</span>&amp;mod;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        reverse(r+<span class="number">1</span>,r+N);<span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=<span class="number">1l</span>l*r[i]*d%mod;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);n=<span class="built_in">strlen</span>(s);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=s[i]==<span class="string">'1'</span>,b[n-i<span class="number">-1</span>]=s[i]==<span class="string">'0'</span>;</span><br><span class="line">    ntt(a,<span class="number">1</span>),ntt(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) a[i]=<span class="number">1l</span>l*a[i]*b[i]%mod;</span><br><span class="line">    ntt(a,<span class="number">-1</span>);ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) {</span><br><span class="line">        <span class="keyword">int</span> bo=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j+=i) <span class="keyword">if</span>(a[n-j<span class="number">-1</span>]||a[n+j<span class="number">-1</span>]) bo=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(bo) <span class="keyword">continue</span>;</span><br><span class="line">        ans^=<span class="number">1l</span>l*(n-i)*(n-i);</span><br><span class="line">    }ans^=<span class="number">1l</span>l*n*n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>「SNOI2019」字符串</title>
    <url>/2019/10/05/%E3%80%8CSNOI2019%E3%80%8D%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3095" target="_blank" rel="noopener">https://loj.ac/problem/3095</a>。</p>
<a id="more"></a>
<p>假设我们当前要比较第$x$个和第$y$个的大小，假设$x&lt;y$，那么其实这两个串是非常相似的，更具体的说，从第$x$个字符开始，第一个串的$i+1$对应第二个串的$i$，所以找到从$x$开始第一对相邻的不一样的字符比较一下就行了。</p>
<p>所以直接写个比较函数跑一遍$\rm sort$就行了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,p[maxn],nxt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    nxt[n]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--)</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=s[i+<span class="number">1</span>]) nxt[i]=i;</span><br><span class="line">        <span class="keyword">else</span> nxt[i]=nxt[i+<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t=nxt[min(x,y)];</span><br><span class="line">    <span class="keyword">if</span>(t&lt;max(x,y)) {</span><br><span class="line">        <span class="keyword">if</span>(x&lt;y) <span class="keyword">return</span> s[t+<span class="number">1</span>]&lt;s[t];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s[t]&lt;s[t+<span class="number">1</span>];</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">return</span> x&lt;y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);gen();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">    sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i]);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>「SNOI2017」礼物</title>
    <url>/2019/10/05/%E3%80%8CSNOI2017%E3%80%8D%E7%A4%BC%E7%89%A9/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2253" target="_blank" rel="noopener">https://loj.ac/problem/2253</a>。</p>
<a id="more"></a>
<p>首先题目意思就是：</p>
<script type="math/tex; mode=display">
f_n=n^k+\sum_{i=1}^{n-1}f_i</script><p>求$f_n$。</p>
<p>显然如果那个$n^k$是个常数啥的就直接矩阵优化了。</p>
<p>注意到$k$非常小，那么我们可以在矩阵中利用二项式定理转移$n^k$。</p>
<p>具体来说我们记录$1,n,n^2,\cdots n^k$，那么转移矩阵就是一堆组合数，自己脑补一下就没了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k;ll n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">13</span>][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line">    matrix () {<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) {<span class="keyword">return</span> a[x];}</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> * (matrix x) <span class="keyword">const</span> {</span><br><span class="line">        matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k+<span class="number">1</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=k+<span class="number">1</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> kk=<span class="number">0</span>;kk&lt;=k+<span class="number">1</span>;kk++)</span><br><span class="line">                    res[i][j]=(res[i][j]+<span class="number">1l</span>l*a[i][kk]*x[kk][j]%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> ^ (ll x) <span class="keyword">const</span> {</span><br><span class="line">        matrix res,p=*<span class="keyword">this</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k+<span class="number">1</span>;i++) res[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,p=p*p) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=res*p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}ans,tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++) res*=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++) res/=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a-b;i++) res/=i;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n),read(k);k++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k+<span class="number">1</span>;i++) ans[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">    tr[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,tr[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>,tr[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>,tr[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,tr[k+<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 记录的是s_{n-2},f_{n-1},n^0...n^k</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=k+<span class="number">1</span>;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=j;i++)</span><br><span class="line">            tr[i][j]=c(j<span class="number">-2</span>,i<span class="number">-2</span>);</span><br><span class="line">    write((ans*(tr^n))[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>「SDOI2017」天才黑客</title>
    <url>/2019/09/29/%E3%80%8CSDOI2017%E3%80%8D%E5%A4%A9%E6%89%8D%E9%BB%91%E5%AE%A2/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2270" target="_blank" rel="noopener">https://loj.ac/problem/2270</a>。</p>
<a id="more"></a>
<p>首先可以得到一个暴力，一条边拆成两个点，然后对于每个点点度平方的连边然后跑最短路就行，显然这样会被卡爆。</p>
<p>然后就很容易得到一个比较难写的做法：对于每个点把周围一圈边在$\rm trie$树上把虚树建出来，然后使用线段树优化建图即可。</p>
<p>但是这样太难写了。。。于是我去网上翻了翻题解，然后看到了$\rm Claris$的神仙做法：</p>
<p>考虑后缀数组求$\rm lcp$的原理，我们可以抄过来，先对周围一圈根据$\rm trie$数上的$\rm dfs$序排序，设$h_i={\rm lcp}(a_i,a_i+1)$，那么可以利用最短路对于每个$h_i$把$i$前面的所有点和$i+1$后面的所有点两两连边，那么直接前后缀优化就好了。</p>
<p><del>其实还是不太好写</del></p>
<p>总之复杂度是$O(m\log m)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,cnt,dfn[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> a,b,w,x,nd;};</span><br><span class="line"><span class="built_in">vector</span>&lt;edge &gt; in[maxn],out[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> {</span></span><br><span class="line">    <span class="keyword">int</span> head[maxn],tot,dis[maxn],vis[maxn];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{</span><br><span class="line">        <span class="comment">// printf("ins :: %d %d %d\n",u,v,w);</span></span><br><span class="line">        e[++tot]=(edge){v,head[u],w},head[u]=tot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++) dis[i]=inf*<span class="number">2</span>,vis[i]=<span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;pii &gt; q;q.push(mp(<span class="number">0</span>,s)),dis[s]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">            <span class="keyword">int</span> x=q.top().sc;q.pop();<span class="keyword">if</span>(vis[x]) <span class="keyword">continue</span>;vis[x]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) </span><br><span class="line">                <span class="keyword">if</span>(dis[e[i].to]&gt;dis[x]+e[i].w)</span><br><span class="line">                    dis[e[i].to]=dis[x]+e[i].w,q.push(mp(-dis[e[i].to],e[i].to));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> s=++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:out[<span class="number">1</span>]) ins(s,x.a,<span class="number">0</span>);<span class="comment">//cerr&lt;&lt;cnt&lt;&lt;endl;</span></span><br><span class="line">        dijkstra(s);</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=cnt;i++) printf(":: %d %d\n",i,dis[i]);puts("");</span></span><br><span class="line">        <span class="comment">// write(dis[7]);</span></span><br><span class="line">        <span class="comment">// cerr&lt;&lt;"finish"&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) {</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">2e9</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> x:in[i]) ans=min(ans,dis[x.b]);</span><br><span class="line">            write(ans);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) head[i]=<span class="number">0</span>;tot=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}G;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trie</span> {</span></span><br><span class="line">    <span class="keyword">int</span> head[maxn],tot,dfn_cnt,dep[maxn],f[maxn/<span class="number">10</span>+<span class="number">10</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;"ins :: "&lt;&lt;u&lt;&lt;' '&lt;&lt;v&lt;&lt;endl;</span></span><br><span class="line">        add(u,v),add(v,u);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;x&lt;&lt;' ' &lt;&lt;fa&lt;&lt;endl;</span></span><br><span class="line">        dfn[x]=++dfn_cnt;<span class="keyword">if</span>(x!=<span class="number">1</span>) dep[x]=dep[fa]+<span class="number">1</span>;f[x][<span class="number">0</span>]=fa;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) <span class="keyword">if</span>(e[i].to!=fa) dfs(e[i].to,x);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&lt;dep[y]) swap(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">18</span>;~i;i--) <span class="keyword">if</span>(dep[f[x][i]]&gt;=dep[y]) x=f[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">return</span> dep[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">18</span>;~i;i--) <span class="keyword">if</span>(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">        <span class="keyword">return</span> dep[f[x][<span class="number">0</span>]];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) {</span><br><span class="line">            head[i]=dep[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">18</span>;j++) f[i][j]=<span class="number">0</span>;</span><br><span class="line">        }tot=dfn_cnt=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dt</span> {</span><span class="keyword">int</span> fr,sc,op;};</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;dt &gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(dt a,dt b)</span> </span>{<span class="keyword">return</span> dfn[a.sc]&lt;dfn[b.sc];}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn],suf[maxn],ipre[maxn],isuf[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    s.clear();</span><br><span class="line">    <span class="comment">// printf("begin solve :: %d\n",x);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:in[x]) s.pb((dt){a.b,a.nd,<span class="number">0</span>});</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:out[x]) s.pb((dt){a.a,a.nd,<span class="number">1</span>});</span><br><span class="line">    sort(s.begin(),s.end(),cmp);</span><br><span class="line">    <span class="keyword">int</span> t=s.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;=t;i++) printf("solve %d :: %d %d\n",x,s[i].fr,s[i].sc);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t;i++) {</span><br><span class="line">        pre[i]=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(i) G.ins(pre[i<span class="number">-1</span>],pre[i],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!s[i].op) G.ins(s[i].fr,pre[i],<span class="number">0</span>);</span><br><span class="line">        ipre[i]=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(i) G.ins(ipre[i],ipre[i<span class="number">-1</span>],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(s[i].op) G.ins(ipre[i],s[i].fr,<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=t;~i;i--) {</span><br><span class="line">        suf[i]=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(i!=t) G.ins(suf[i+<span class="number">1</span>],suf[i],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!s[i].op) G.ins(s[i].fr,suf[i],<span class="number">0</span>);</span><br><span class="line">        isuf[i]=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(i!=t) G.ins(isuf[i],isuf[i+<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(s[i].op) G.ins(isuf[i],s[i].fr,<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++) {</span><br><span class="line">        <span class="keyword">int</span> a=T.get(s[i].sc,s[i+<span class="number">1</span>].sc);</span><br><span class="line">        G.ins(pre[i],isuf[i+<span class="number">1</span>],a);</span><br><span class="line">        G.ins(suf[i+<span class="number">1</span>],ipre[i],a);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// puts("end");</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuck</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d;read(a),read(b),read(c),read(d); </span><br><span class="line">        edge e=(edge){++cnt,++cnt,c,a,d};in[b].pb(e);</span><br><span class="line">        e.x=b;out[a].pb(e);G.ins(e.a,e.b,e.w);</span><br><span class="line">    }<span class="comment">//cerr&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;k;i++) {</span><br><span class="line">        read(x),read(y),read(z),T.ins(x,y);</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;' '&lt;&lt;z&lt;&lt;endl;</span></span><br><span class="line">    }</span><br><span class="line">    T.dfs(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//cerr&lt;&lt;"solve"&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) solve(i);</span><br><span class="line">    G.get_ans();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=cnt;i++) head[i]=0;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) dfn[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) in[i].clear(),out[i].clear();</span><br><span class="line">    T.clear(),G.clear();cnt=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) fuck(),clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTSC2017」吉夫特</title>
    <url>/2019/09/28/%E3%80%8CCTSC2017%E3%80%8D%E5%90%89%E5%A4%AB%E7%89%B9/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2264" target="_blank" rel="noopener">https://loj.ac/problem/2264</a>。</p>
<a id="more"></a>
<p>什么鬼题。。。考你会不会卢卡斯定理。</p>
<p>根据卢卡斯定理：</p>
<script type="math/tex; mode=display">
\binom{a}{b}\bmod 2=\binom{a/2}{b/2}\cdot \binom{a\bmod 2}{b\bmod 2}\bmod 2</script><p>那么如果有一位$a$没有而$b$有就为$0$，换句话说就是$b$是$a$的子集。</p>
<p>题目保证了两两不同，直接上子集$\rm dp$就好了，复杂度$O(3^{\log_2a})$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],a[maxn],n,vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">1</span>&lt;&lt;<span class="number">18</span>;T--;<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        vis[a[i]]=<span class="number">1</span>;<span class="keyword">int</span> r=T^a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=r;s;s=(s<span class="number">-1</span>)&amp;r) {</span><br><span class="line">            <span class="keyword">if</span>(vis[s|a[i]]) f[a[i]]++;</span><br><span class="line">            f[a[i]]=(f[a[i]]+f[s|a[i]])%mod;</span><br><span class="line">        }ans=(ans+f[a[i]])%mod;</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTSC2018」暴力写挂</title>
    <url>/2019/09/28/%E3%80%8CCTSC2018%E3%80%8D%E6%9A%B4%E5%8A%9B%E5%86%99%E6%8C%82/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2553" target="_blank" rel="noopener">https://loj.ac/problem/2553</a>。</p>
<a id="more"></a>
<p><del>题目背景真有意思</del></p>
<p><del>这题之前我从来没有写过边分治。。。。</del></p>
<p>把式子变一下：</p>
<script type="math/tex; mode=display">
\frac{1}{2}\big({\rm depth}(x)+{\rm depth}(y)+{\rm distance}(x,y)\big)-{\rm depth}'({\rm LCA}'(x,y))</script><p>可以发现第一棵树可以搞成无根树了，那么我们对第一棵树边分治。</p>
<p>在分治树上每个节点都是一条边，对每条边记两个东西表示左边（或右边）的${\rm depth}(x)+{\rm distance}(x,a)$的最大值，$a$是这条边任意一个点，那么两边最大值一加就是经过这条边的式子前半部分最大值的两倍。</p>
<p>我们考虑枚举式子最后的$\rm LCA$，那么我们可以这样做：我们想办法得到以每个点为子树的边分树，换句话说是在边分树结构上激活子树里的这些点，其他的全搞成负无穷。</p>
<p>注意到边分树是一棵二叉树，换句话说这玩意和线段树的结构相同，那么我们可以直接把线段树合并那一套抄过来。</p>
<p>所以做法是这样的：</p>
<ul>
<li>我们遍历第二棵树，假设当前遍历到了$x$，那么我们统计以$x$为$\rm LCA$的答案。</li>
<li>我们先在$x$为根的边分树中激活$x$。</li>
<li>首先递归求出所有儿子的边分树，然后依次合并，合并的过程中统计出一个点在$x$点边分树，一个点在儿子节点的边分树上的答案，这样两个点$\rm LCA$一定是$x$，并且不会漏掉一些情况。</li>
<li>最后更新一下两个点都是$x$的答案，这个情况上面算不到。</li>
</ul>
<p>根据线段树合并可以知道这玩意的复杂度等于建出来的点数，也就是$O(n\log n)$。</p>
<p>其实代码还挺好写的。</p>
<p>注意边分治基础操作，分治前要把树搞成二叉的，不然会被菊花图卡成$O(n^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3.67e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,rt[maxn];</span><br><span class="line">ll ans=<span class="number">-1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Tree {</span><br><span class="line">    <span class="keyword">int</span> cnt,head[maxn&lt;&lt;<span class="number">1</span>],tot=<span class="number">1</span>,ban[maxn&lt;&lt;<span class="number">2</span>],sz[maxn&lt;&lt;<span class="number">1</span>],size,ed,xx,yy,ccc,now[maxn],ww,dir[maxn];</span><br><span class="line">    <span class="keyword">int</span> ls[maxn&lt;&lt;<span class="number">5</span>],rs[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line">    ll lmx[maxn&lt;&lt;<span class="number">5</span>],rmx[maxn&lt;&lt;<span class="number">5</span>],dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii &gt; r[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{</span><br><span class="line">        <span class="comment">// printf("ins :: %d %d %d\n",u,v,w);fflush(stdout);</span></span><br><span class="line">        add(u,v,w),add(v,u,w);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inss</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{r[u].pb(mp(v,w)),r[v].pb(mp(u,w));}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// printf("build :: %d %d\n",x,fa);cerr&lt;&lt;"OK"&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)r[x].size();i++) {</span><br><span class="line">            <span class="keyword">int</span> v=r[x][i].fr,w=r[x][i].sc;</span><br><span class="line">            <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!pre) ins(x,v,w),pre=x;</span><br><span class="line">            <span class="keyword">else</span> ins(pre,++cnt,<span class="number">0</span>),ins(cnt,v,w),dep[cnt]=dep[x],pre=cnt;</span><br><span class="line">            dep[v]=dep[x]+w;build(v,x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">        sz[x]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt) {</span><br><span class="line">            <span class="keyword">if</span>(ban[i]||(v=e[i].to)==fa) <span class="keyword">continue</span>;</span><br><span class="line">            get_rt(v,x),sz[x]+=sz[v];</span><br><span class="line">            <span class="keyword">int</span> p=max(sz[v],size-sz[v]);</span><br><span class="line">            <span class="keyword">if</span>(p&lt;ww) {ww=p,ed=i,xx=x,yy=v;}</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,ll d,<span class="keyword">int</span> c)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=n) {  <span class="comment">//注意这里和上面说的有点不一样</span></span><br><span class="line">            ++ccc;  <span class="comment">//因为激活第一个点的时候一定会建出一条链，所以直接在这里遍历这个块的所有点的时候在下面挂一个点也是一样。</span></span><br><span class="line">            <span class="keyword">if</span>(!rt[x]) rt[x]=ccc;</span><br><span class="line">            <span class="keyword">else</span> (dir[x]?rs:ls)[now[x]]=ccc;</span><br><span class="line">            now[x]=ccc,dir[x]=c;</span><br><span class="line">            (dir[x]?rmx:lmx)[ccc]=d+dep[x];</span><br><span class="line">            (dir[x]?lmx:rmx)[ccc]=<span class="number">-1e18</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(!ban[i]&amp;&amp;e[i].to!=fa) dfs(e[i].to,x,d+e[i].w,c);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ss)</span> </span>{</span><br><span class="line">        <span class="comment">// printf("solve :: %d %d\n",x,ss);</span></span><br><span class="line">        <span class="keyword">if</span>(ss==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">        size=ss,ww=<span class="number">1e9</span>;get_rt(x,<span class="number">0</span>);ban[ed]=ban[ed^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;xx&lt;&lt;' '&lt;&lt;yy&lt;&lt;endl;;</span></span><br><span class="line">        dfs(xx,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);dfs(yy,<span class="number">0</span>,e[ed].w,<span class="number">1</span>);<span class="keyword">int</span> tmp=sz[yy],tt=yy;</span><br><span class="line">        solve(xx,size-sz[yy]),solve(tt,tmp);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,ll d)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">        ans=max(ans,(lmx[x]+rmx[y])/<span class="number">2</span>-d);</span><br><span class="line">        ans=max(ans,(lmx[y]+rmx[x])/<span class="number">2</span>-d);</span><br><span class="line">        lmx[x]=max(lmx[x],lmx[y]);</span><br><span class="line">        rmx[x]=max(rmx[x],rmx[y]);</span><br><span class="line">        ls[x]=merge(ls[x],ls[y],d);</span><br><span class="line">        rs[x]=merge(rs[x],rs[y],d);<span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// void debug(int x) {</span></span><br><span class="line">    <span class="comment">//     printf("now :: %d %lld %lld\n",x,lmx[x],rmx[x]);</span></span><br><span class="line">    <span class="comment">//     if(ls[x]) printf("ls :: %d\n",ls[x]),debug(ls[x]);</span></span><br><span class="line">    <span class="comment">//     if(rs[x]) printf("rs :: %d\n",rs[x]),debug(rs[x]);</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{add(u,v,w),add(v,u,w);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,ll d)</span> </span>{</span><br><span class="line">    ans=max(ans,Tree::dep[x]-d);</span><br><span class="line">    <span class="comment">// printf("dfs :: %d %d %lld\n",x,fa,d);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">if</span>(e[i].to==fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(e[i].to,x,d+e[i].w);</span><br><span class="line">        rt[x]=Tree::merge(rt[x],rt[e[i].to],d);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);Tree::cnt=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;i++) read(x),read(y),read(z),Tree::inss(x,y,z);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;i++) read(x),read(y),read(z),ins(x,y,z);</span><br><span class="line">    Tree::build(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//cerr&lt;&lt;"OK"&lt;&lt;endl;</span></span><br><span class="line">    Tree::solve(<span class="number">1</span>,Tree::cnt);</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++) {</span></span><br><span class="line">    <span class="comment">//     printf("debug :: %d\n",i);</span></span><br><span class="line">    <span class="comment">//     Tree::debug(rt[i]);</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>树分治</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTSC2018」假面</title>
    <url>/2019/09/27/%E3%80%8CCTSC2018%E3%80%8D%E5%81%87%E9%9D%A2/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2552" target="_blank" rel="noopener">https://loj.ac/problem/2552</a>。</p>
<a id="more"></a>
<p>简单背包题。。</p>
<p>看到数据范围就直接想一路暴力搞，那么发现只有结界的复杂度不对，考虑如何优化。</p>
<p>首先我们先求出每个人活着的概率，然后最简单的想法就是枚举每个人，然后硬点这个人活着，对其他人做背包，这样每次是$O(n^3)$的，</p>
<p>注意到有一个技巧就是我们可以$O(n)$的从背包里删去一个元素，那么我们先对所有人做背包，复杂度就降为$O(n^2)$了。</p>
<p>不懂这个的可以参考下代码，其主要思路就是类似于解方程把以前的$\rm dp$值解出来。</p>
<p><del>然后我因为数组开小了T了五遍。。。我还以为我算法写假了</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">' '</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,f[<span class="number">502</span>][<span class="number">502</span>],q,t[<span class="number">502</span>],w[<span class="number">502</span>],g[<span class="number">502</span>],inv[<span class="number">502</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;<span class="keyword">return</span> x;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x-=y;x+=x&gt;&gt;<span class="number">31</span>&amp;mod;<span class="keyword">return</span> x;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> x,p,v;read(x),read(p),read(v),p=<span class="number">1l</span>l*p*qpow(v,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) t[i]=add(<span class="number">1l</span>l*f[x][i]*(<span class="number">1</span>-p+mod)%mod,<span class="number">1l</span>l*f[x][i+<span class="number">1</span>]*p%mod);</span><br><span class="line">    t[<span class="number">0</span>]=add(f[x][<span class="number">0</span>],<span class="number">1l</span>l*f[x][<span class="number">1</span>]*p%mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++) f[x][i]=t[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> k;read(k);</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=k;i++) {</span><br><span class="line">        read(x),w[i]=del(<span class="number">1</span>,f[x][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j;j--) g[j]=add(<span class="number">1l</span>l*g[j]*(<span class="number">1</span>-w[i]+mod)%mod,<span class="number">1l</span>l*g[j<span class="number">-1</span>]*w[i]%mod);</span><br><span class="line">        g[<span class="number">0</span>]=<span class="number">1l</span>l*g[<span class="number">0</span>]*(<span class="number">1</span>-w[i]+mod)%mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) {</span><br><span class="line">        <span class="keyword">if</span>(w[i]==<span class="number">0</span>) {<span class="built_in">putchar</span>(<span class="string">'0'</span>),<span class="built_in">putchar</span>(<span class="string">' '</span>);<span class="keyword">continue</span>;}</span><br><span class="line">        <span class="keyword">if</span>(w[i]==<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) ans=add(ans,<span class="number">1l</span>l*g[j]*inv[j]%mod);</span><br><span class="line">            write(ans);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> tmp=qpow(<span class="number">1</span>-w[i]+mod,mod<span class="number">-2</span>);</span><br><span class="line">        t[<span class="number">0</span>]=<span class="number">1l</span>l*g[<span class="number">0</span>]*tmp%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++) </span><br><span class="line">            t[j]=del(g[j],<span class="number">1l</span>l*w[i]*t[j<span class="number">-1</span>]%mod),t[j]=<span class="number">1l</span>l*t[j]*tmp%mod;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++) ans=add(ans,<span class="number">1l</span>l*t[j]*inv[j+<span class="number">1</span>]%mod);</span><br><span class="line">        write(<span class="number">1l</span>l*ans*w[i]%mod);</span><br><span class="line">    }<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// int st=clock();</span></span><br><span class="line">    read(n);inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) read(x),f[i][x]=<span class="number">1</span>,inv[i]=qpow(i,mod<span class="number">-2</span>);</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,op;i&lt;=q;i++) read(op),op?(solve(),<span class="number">0</span>):(modify(),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++) ans=(ans+<span class="number">1l</span>l*j*f[i][j]%mod)%mod;</span><br><span class="line">        write(ans);</span><br><span class="line">    }<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;clock()-st&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTSC2018」混合果汁</title>
    <url>/2019/09/27/%E3%80%8CCTSC2018%E3%80%8D%E6%B7%B7%E5%90%88%E6%9E%9C%E6%B1%81/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2555" target="_blank" rel="noopener">https://loj.ac/problem/2555</a>。</p>
<a id="more"></a>
<p>本来想写一个很显然的主席树做法，然后翻了翻题解发现还可以整体二分，正好没写过整体二分的题就来写一写。</p>
<p>也没有什么好说的。。拿线段树维护下就好了，询问的时候在线段树上二分，复杂度是$O(n\log ^2 n)$的，因为要修改和询问线段树$O(n\log n)$次。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,ans[maxn],p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pps</span> {</span><span class="keyword">int</span> d,p,l;}a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> {</span><span class="keyword">int</span> g,l,id;}q[maxn],q1[maxn],q2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(pps x,pps y)</span> </span>{<span class="keyword">return</span> x.d&lt;y.d;}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> w[maxn&lt;&lt;<span class="number">2</span>],s[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> w[p]+=v,s[p]=l*w[p],<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> modify(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        s[p]=s[ls]+s[rs],w[p]=w[ls]+w[rs];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> min(v/l,w[p]);</span><br><span class="line">        <span class="keyword">if</span>(s[ls]&gt;=v) <span class="keyword">return</span> query(ls,l,mid,v);</span><br><span class="line">        <span class="keyword">return</span> w[ls]+query(rs,mid+<span class="number">1</span>,r,v-s[ls]);</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ql;i&lt;=qr;i++) ans[q[i].id]=a[l].d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(p&gt;mid+<span class="number">1</span>) p--,T.modify(<span class="number">1</span>,<span class="number">-1</span>,N,a[p].p,a[p].l);</span><br><span class="line">    <span class="keyword">while</span>(p&lt;mid+<span class="number">1</span>) T.modify(<span class="number">1</span>,<span class="number">-1</span>,N,a[p].p,-a[p].l),p++;</span><br><span class="line">    <span class="keyword">int</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ql;i&lt;=qr;i++) {</span><br><span class="line">        <span class="keyword">if</span>(T.query(<span class="number">1</span>,<span class="number">-1</span>,N,q[i].g)&gt;=q[i].l) q2[++t2]=q[i];</span><br><span class="line">        <span class="keyword">else</span> q1[++t1]=q[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t1;i++) q[ql+i<span class="number">-1</span>]=q1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t2;i++) q[ql+t1+i<span class="number">-1</span>]=q2[i];</span><br><span class="line">    solve(l,mid,ql,ql+t1<span class="number">-1</span>),solve(mid+<span class="number">1</span>,r,ql+t1,qr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i].d),read(a[i].p),read(a[i].l);</span><br><span class="line">    a[++n]=(pps){<span class="number">-1</span>,<span class="number">0</span>,(<span class="keyword">int</span>)<span class="number">1e18</span>};p=n+<span class="number">1</span>;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) read(q[i].g),read(q[i].l),q[i].id=i;</span><br><span class="line">    solve(<span class="number">1</span>,n,<span class="number">1</span>,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) write(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOI 2017 Final」足球</title>
    <url>/2019/09/25/%E3%80%8CJOI-2017-Final%E3%80%8D%E8%B6%B3%E7%90%83/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2335" target="_blank" rel="noopener">https://loj.ac/problem/2335</a>。</p>
<a id="more"></a>
<p>注意到最优策略中每个人一定最多控球一次，所以最优策略一定形如：</p>
<ul>
<li>带球的人走一段距离</li>
<li>把球踢出去（也可以不踢出去）</li>
<li>最近的人跑过来跑过来捡球并循环这一过程</li>
</ul>
<p>注意到跑过来捡球的人一定在原位置上，否则他一定控过球。</p>
<p>那么我们可以拆点跑最短路，每个点拆成五个$p_{i,j,x}$，$x\in [1,4]$表示球在当前这个位置，并且在运动，四个点分别记录球的方向，$x=5$表示当前球被控制了。</p>
<p>那么踢球的代价可以分成两部分，两个相邻的$x$相同并且$x\in [1,4]$的点连$a$的边，$p_{i,j,5}$向$p_{i,j,1\sim 4}$连$b$的边。</p>
<p>其他的边都比较显然，仔细想想就知道了，也可以看看代码的<code>build</code>部分。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1.26e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = {<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[] = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a,b,c,vis[<span class="number">502</span>][<span class="number">502</span>],w[<span class="number">502</span>][<span class="number">502</span>],s,t,head[maxn],tot,dis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span> </span>{<span class="keyword">return</span> (d<span class="number">-1</span>)*n*m+(x<span class="number">-1</span>)*m+y;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x&lt;=n&amp;&amp;x&gt;<span class="number">0</span>&amp;&amp;y&lt;=m&amp;&amp;y&gt;<span class="number">0</span>;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(w,<span class="number">63</span>,<span class="keyword">sizeof</span> w);</span><br><span class="line">    <span class="keyword">int</span> T;read(T);<span class="built_in">queue</span>&lt;pii &gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=T;i++) {</span><br><span class="line">        read(x),read(y);x++,y++;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) s=p(x,y,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span>(i==T) t=p(x,y,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span>(!vis[x][y]) q.push(mp(x,y));</span><br><span class="line">        vis[x][y]=<span class="number">1</span>,w[x][y]=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front().fr,y=q.front().sc;q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(w[x+dx[i]][y+dy[i]]&gt;w[x][y]+<span class="number">1</span>&amp;&amp;check(x+dx[i],y+dy[i]))</span><br><span class="line">                w[x+dx[i]][y+dy[i]]=w[x][y]+<span class="number">1</span>,q.push(mp(x+dx[i],y+dy[i]));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) {</span><br><span class="line">            <span class="keyword">if</span>(i<span class="number">-1</span>) ins(p(i,j,<span class="number">1</span>),p(i<span class="number">-1</span>,j,<span class="number">1</span>),a),ins(p(i,j,<span class="number">5</span>),p(i<span class="number">-1</span>,j,<span class="number">5</span>),c);</span><br><span class="line">            <span class="keyword">if</span>(j<span class="number">-1</span>) ins(p(i,j,<span class="number">2</span>),p(i,j<span class="number">-1</span>,<span class="number">2</span>),a),ins(p(i,j,<span class="number">5</span>),p(i,j<span class="number">-1</span>,<span class="number">5</span>),c);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n) ins(p(i,j,<span class="number">3</span>),p(i+<span class="number">1</span>,j,<span class="number">3</span>),a),ins(p(i,j,<span class="number">5</span>),p(i+<span class="number">1</span>,j,<span class="number">5</span>),c);</span><br><span class="line">            <span class="keyword">if</span>(j&lt;m) ins(p(i,j,<span class="number">4</span>),p(i,j+<span class="number">1</span>,<span class="number">4</span>),a),ins(p(i,j,<span class="number">5</span>),p(i,j+<span class="number">1</span>,<span class="number">5</span>),c);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">4</span>;x++)</span><br><span class="line">                ins(p(i,j,x),p(i,j,<span class="number">5</span>),w[i][j]*c),ins(p(i,j,<span class="number">5</span>),p(i,j,x),b);</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">63</span>,<span class="keyword">sizeof</span> dis);dis[s]=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;pii &gt; q;q.push(mp(<span class="number">0</span>,s));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.top().sc,www=-q.top().fr;q.pop();</span><br><span class="line">        <span class="keyword">if</span>(www&gt;dis[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dis[e[i].to]&gt;dis[x]+e[i].w)</span><br><span class="line">                dis[e[i].to]=dis[x]+e[i].w,q.push(mp(-dis[e[i].to],e[i].to));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(a),read(b),read(c);n++,m++;</span><br><span class="line">    init();build();dijkstra();write(dis[t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTS2019 | CTSC2019」随机立方体</title>
    <url>/2019/09/24/%E3%80%8CCTS2019-CTSC2019%E3%80%8D%E9%9A%8F%E6%9C%BA%E7%AB%8B%E6%96%B9%E4%BD%93/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3119" target="_blank" rel="noopener">https://loj.ac/problem/3119</a>。</p>
<a id="more"></a> 
<p>考虑容斥，设$t_i$表示至少有$i$个极大的点的方案数。</p>
<p>那么这个东西可以分成几个部分乘起来：选$i$个不相干的点的方案数，然后填上所有与这些点相关的点，最后把剩下的部分随便填一下。</p>
<p>我们先设几个记号方便描述，设$N=nml$。</p>
<p>设$c_i$表示$i$个点影响到的点，那么$c_i=N-(n-i)(m-i)(l-i)$。</p>
<p>设$f_i$表示选$i$个点的方案，那么很快可以得出：</p>
<script type="math/tex; mode=display">
f_i=\prod_{j=0}^{i-1}(n-j)(m-j)(l-j)</script><p>因为每次选之后剩下来的子问题都是一样的。</p>
<p>注意现在我们只是枚举出了影响到的位置，因为数是两两不同的，所以怎么选都一样，这里要乘一个组合数$\displaystyle\binom{N}{c_i}$。</p>
<p>现在考虑这些被影响到的位置应该怎么填，如果极大点$x$比$y$后处理，那么我们保证$x&gt;y$就可以不受影响了。</p>
<p>这启发我们每次把最大的填到极大值的位置上，然后这个位置影响到的点随便填，设$h_i$表示$i$个点影响到的那些点的填法，可以得到：</p>
<script type="math/tex; mode=display">
h_i=\binom{c_i-1}{c_i-c_{i-1}-1}(c_i-c_{i-1}-1)!h_{i-1}</script><p>前面组合数是选出当前需要的数，后面是随便摆放，化简一下就是：</p>
<script type="math/tex; mode=display">
h_i=\prod_{j=1}^{i}\frac{(c_j-1)!}{c_{j-1}!}</script><p>填完$i$个极大点后剩下的点随便填就是$(N-c_i)!$。</p>
<p>所以$t_i$可以表示成：</p>
<script type="math/tex; mode=display">
t_i=f_i\cdot h_i\cdot (N-c_i)!\binom{N}{c_i}</script><p>化简一下：</p>
<script type="math/tex; mode=display">
t_i=N!f_i\prod_{j=1}^{i}\frac{1}{c_j}</script><p>设恰好有$i$个极大点的方案为$ans_i$，设$w=\min(n,m,l)$，可得：</p>
<script type="math/tex; mode=display">
t_i=\sum_{j=i}^{w}\binom{j}{i}ans_j</script><p>反演一下：</p>
<script type="math/tex; mode=display">
ans_i=\sum_{j=i}^w(-1)^{j-i}\binom{j}{i}t_j</script><p>注意题目最后让我们算的是概率，也就是说要除掉$N!$，正好这个玩意我们算不出来，所以忽略他就好了。</p>
<p>最后还有一个问题就是怎么求$c_i$的逆元，$\log$求就$\rm T$了，我们可以仿照求阶乘逆元的方法，先把$\prod_{i=1}^{w}c_i$的逆元暴力求出来，然后每次乘$w_i$就好了。</p>
<p>复杂度是$O(n)$的。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,l,k,c[maxn],f[maxn],g[maxn],invc[maxn],fac[maxn],ifac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;<span class="keyword">return</span> x;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x-=y;x+=x&gt;&gt;<span class="number">31</span>&amp;mod;<span class="keyword">return</span> x;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(l),read(k);</span><br><span class="line">    <span class="keyword">int</span> N=<span class="number">1l</span>l*n*m%mod*l%mod,w=min(n,min(m,l)),ss=<span class="number">1</span>;f[<span class="number">1</span>]=N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=w;i++) {</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">1l</span>l*(n-i)*(m-i)%mod*(l-i)%mod;</span><br><span class="line">        f[i+<span class="number">1</span>]=<span class="number">1l</span>l*f[i]*x%mod;c[i]=del(N,x);</span><br><span class="line">        ss=<span class="number">1l</span>l*ss*c[i]%mod;<span class="keyword">if</span>(!x) f[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    }invc[w]=qpow(ss,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=w<span class="number">-1</span>;~i;i--) invc[i]=<span class="number">1l</span>l*invc[i+<span class="number">1</span>]*c[i+<span class="number">1</span>]%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=w;i++) ans=(((i-k)&amp;<span class="number">1</span>)?del:add)(ans,<span class="number">1l</span>l*f[i]*invc[i]%mod*C(i,k)%mod);</span><br><span class="line">    write(ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">int</span> N=<span class="number">5e6</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    ifac[N]=qpow(fac[N],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i;i--) ifac[i]=<span class="number">1l</span>l*ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    gen();<span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>「JOI 2018 Final」毒蛇越狱</title>
    <url>/2019/09/23/%E3%80%8CJOI-2018-Final%E3%80%8D%E6%AF%92%E8%9B%87%E8%B6%8A%E7%8B%B1/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/2351" target="_blank" rel="noopener">https://loj.ac/problem/2351</a>。</p>
<a id="more"></a>
<p>注意到<code>0,1,?</code>出现次数最小的那个最多只有6，我们分情况讨论下。</p>
<ul>
<li><p>如果是<code>?</code>那直接暴力就好了。</p>
</li>
<li><p>如果是<code>0</code>，可以利用子集反演：</p>
<script type="math/tex; mode=display">
f(s)=\sum_{t\subseteq s}g(t)\Longrightarrow 
g(s)=\sum_{t\subseteq s}(-1)^{|s|-|t|}f(t)</script><p>那么利用$\rm FWT$预处理超集和之后就行了。</p>
</li>
<li><p>如果是<code>1</code>也同理，预处理子集和就好了。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1.1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn],t[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,q,cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1</span>&lt;&lt;n;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">                <span class="keyword">if</span>(op) r[i+j+k]+=r[j+k];<span class="keyword">else</span> r[j+k]+=r[i+j+k];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n;i++) a[i]=b[i]=(s[i]-=<span class="string">'0'</span>),cnt[i]=cnt[i&gt;&gt;<span class="number">1</span>]+(i&amp;<span class="number">1</span>);</span><br><span class="line">    fwt(a,<span class="number">1</span>),fwt(b,<span class="number">0</span>);   <span class="comment">// a:子集和 , b:超集和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);<span class="keyword">int</span> ca=<span class="number">0</span>,c0=<span class="number">0</span>,c1=<span class="number">0</span>,sa=<span class="number">0</span>,s0=<span class="number">0</span>,s1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,x=n<span class="number">-1</span>;j&lt;n;j++,x--)</span><br><span class="line">            <span class="keyword">if</span>(t[j]==<span class="string">'0'</span>) c0++,s0|=<span class="number">1</span>&lt;&lt;x;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t[j]==<span class="string">'1'</span>) c1++,s1|=<span class="number">1</span>&lt;&lt;x;</span><br><span class="line">            <span class="keyword">else</span> ca++,sa|=<span class="number">1</span>&lt;&lt;x;</span><br><span class="line">        <span class="keyword">int</span> mn=min(min(c0,c1),ca),ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(mn==c0) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> r=s0;~r;r=r?(r<span class="number">-1</span>)&amp;s0:<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">if</span>(cnt[r]&amp;<span class="number">1</span>) ans-=b[r|s1];</span><br><span class="line">                <span class="keyword">else</span> ans+=b[r|s1];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(mn==c1) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> r=s1;~r;r=r?(r<span class="number">-1</span>)&amp;s1:<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">if</span>(cnt[s1-r]&amp;<span class="number">1</span>) ans-=a[r|sa];</span><br><span class="line">                <span class="keyword">else</span> ans+=a[r|sa];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> r=sa;~r;r=r?(r<span class="number">-1</span>)&amp;sa:<span class="number">-1</span>)</span><br><span class="line">                ans+=s[r|s1];</span><br><span class="line">        }write(ans);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>容斥</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title>「CTS2019 | CTSC2019」珍珠</title>
    <url>/2019/09/22/%E3%80%8CCTS2019-CTSC2019%E3%80%8D%E7%8F%8D%E7%8F%A0/</url>
    <content><![CDATA[<p>题目链接：<a href="https://loj.ac/problem/3120" target="_blank" rel="noopener">https://loj.ac/problem/3120</a></p>
<a id="more"></a>
<p>神仙题。。感觉我生成函数还是不过关啊。</p>
<p>首先假设当前方案有$x$种颜色出现次数为奇数，那么这种方案就可以装$(n-x)/2$个瓶子，也就是说题目可以转化为求至多有$n-m*2$种颜色出现次数为奇数的方案数。</p>
<p>到这里如果我们使用$dp$求解应该可以拿五十多分。</p>
<p>设$l=n-2m$。有一个这样的式子：</p>
<script type="math/tex; mode=display">
\frac{e^x-e^{-x}}{2}=x+\frac{x^3}{3!}+\frac{x^5}{5!}+\cdots</script><p>就是说一个位置填奇数的$\rm EGF$为$\dfrac{e^x-e^{-x}}{2}$。</p>
<p>同理填偶数为$\dfrac{e^x+e^{-x}}{2}$。</p>
<p>我们枚举当前有$k$种颜色出现次数为奇数，那么这个方案数的生成函数为：</p>
<script type="math/tex; mode=display">
(\frac{e^x+e^{-x}}{2}+y\frac{e^x-e^{-x}}{2})^d[y^k]</script><p>就是说每个位置可以填奇数或偶数，要求奇数填了$k$个。</p>
<p>所以总答案就是：</p>
<script type="math/tex; mode=display">
n!\sum_{k=0}^{l}(\frac{e^x+e^{-x}}{2}+y\frac{e^x-e^{-x}}{2})^d[y^k][x^n]</script><p>前面乘$n!$是为了把指数型生成函数的阶乘去掉。</p>
<p>稍微化简一下可以得到：</p>
<script type="math/tex; mode=display">
\frac{1}{2^d}\sum_{i=0}^d\binom{d}{i}(2i-d)^n\sum_{k=0}^{l}
(1+y)^i(1-y)^{d-i}[y^k]</script><p>把后半部分拉出来：</p>
<script type="math/tex; mode=display">
\sum_{k=0}^{l}(1+y)^i(1-y)^{d-i}[y^k]</script><p>我们现在是要求前面的多项式前$l$项的系数之和，有一个这样的操作：</p>
<script type="math/tex; mode=display">
\begin{align}
&\sum_{k=0}^{l}(1+y)^i(1-y)^{d-i}[y^k]\\
=&(1+y)^i(1-y)^{d-i}(1+y+y^2+\cdots)[y^l]\\
=&(1+y)^i(1-y)^{d-i}\frac{1}{1-y}[y^l]\\
\end{align}</script><p>那么当$d=i$的时候暴力算一下，否则式子就变成了：</p>
<script type="math/tex; mode=display">
(1+y)^i(1-y)^{d-i-1}[y^{l}]</script><p>暴力二项式展开可以得到最后的答案长这样<del>（其实还挺难算的）</del>：</p>
<script type="math/tex; mode=display">
\frac{i!(d-i-1)!}{l!}\sum_{a=0}^{i}\frac{(-1)^{l-a}}{a!(i-a)!(l-a)!(d-l-1-(i-a))!}</script><p>显然这是个卷积形式，用$\rm NTT$优化一下就可以了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,d,a[maxn],b[maxn],fac[maxn],ifac[maxn],w[maxn],mxn,pos[maxn],bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">return</span> x&gt;=mod?x-mod:x;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x-=y;x+=x&gt;&gt;<span class="number">31</span>&amp;mod;<span class="keyword">return</span> x;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*x*y<span class="number">-1l</span>l*x*y/mod*mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=mul(a,a)) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=mul(res,a);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(mxn=<span class="number">1</span>,bit=<span class="number">-1</span>;mxn&lt;=d&lt;&lt;<span class="number">1</span>;mxn&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mxn;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;bit);</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/mxn);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=mxn;i++) w[i]=mul(w[i<span class="number">-1</span>],w[<span class="number">1</span>]);</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mxn;i++) fac[i]=mul(fac[i<span class="number">-1</span>],i);</span><br><span class="line">    ifac[mxn]=qpow(fac[mxn],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mxn<span class="number">-1</span>;i;i--) ifac[i]=mul(ifac[i+<span class="number">1</span>],i+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mxn;i++) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[i],r[pos[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,dd=mxn&gt;&gt;<span class="number">1</span>;i&lt;mxn;i&lt;&lt;=<span class="number">1</span>,dd&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;mxn;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                <span class="keyword">int</span> x=r[j+k],y=mul(w[k*dd],r[i+j+k]);</span><br><span class="line">                r[j+k]=add(x,y),r[i+j+k]=del(x,y);</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">        <span class="keyword">int</span> dd=qpow(mxn,mod<span class="number">-2</span>);reverse(r+<span class="number">1</span>,r+mxn);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mxn;i++) r[i]=mul(r[i],dd);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> mul(fac[x],mul(ifac[y],ifac[x-y]));}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(d),read(n),read(m);<span class="keyword">int</span> l=n<span class="number">-2</span>*m;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=l) <span class="keyword">return</span> write(qpow(d,n)),<span class="number">0</span>;</span><br><span class="line">    prepare();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l;i++) <span class="keyword">if</span>(l-i&lt;=d) a[i]=mul(ifac[i],ifac[l-i]),(l-i)&amp;<span class="number">1</span>?a[i]=del(<span class="number">0</span>,a[i]),<span class="number">0</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d-l<span class="number">-1</span>;i++) b[i]=mul(ifac[i],ifac[d-l<span class="number">-1</span>-i]);</span><br><span class="line">    ntt(a,<span class="number">1</span>),ntt(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mxn;i++) a[i]=mul(a[i],b[i]);</span><br><span class="line">    ntt(a,<span class="number">-1</span>);<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++) {</span><br><span class="line">        <span class="keyword">int</span> r=mul(mul(a[i],fac[i]),fac[d-i<span class="number">-1</span>]);</span><br><span class="line">        r=mul(r,qpow(del(<span class="number">2</span>*i-d,<span class="number">0</span>),n));</span><br><span class="line">        r=mul(r,c(d,i));</span><br><span class="line">        ans=add(ans,r);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=min(d,l);i++) ans=add(ans,mul(qpow(d,n),c(d,i)));</span><br><span class="line">    write(mul(ans,qpow(qpow(<span class="number">2</span>,d),mod<span class="number">-2</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>FFT</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>单位根反演</title>
    <url>/2019/09/20/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/</url>
    <content><![CDATA[<p>先扔个题引入吧<del>(好像大家学这玩意第一题都写的是这个)</del>：</p>
<blockquote>
<p>给定$n,s,a_0,a_1,a_2,a_3$，求：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^{n}\binom{n}{i}s^ia_{i\bmod 4}</script><p>其中$n\leqslant 1e18$。</p>
</blockquote>
<a id="more"></a>
<p><a href="https://loj.ac/problem/6485" target="_blank" rel="noopener">题目链接</a>。</p>
<p>简单变换一下，我们需要算这个：</p>
<script type="math/tex; mode=display">
\sum_{r=0}^3a_r\sum_{i=0}^{n}\binom{n}{i}s^i[i\bmod 4=r]</script><p>设生成函数$f(x)=\sum_{i=0}^{n}\binom{n}{i}s^ix^i=(sx+1)^n$。</p>
<p>那么我们现在要分别求$f$的$\bmod 4=i$的项之和。</p>
<p>我们引入单位根反演，就是说在$\rm ntt$结束的时候证明一般是用到了这个式子：</p>
<script type="math/tex; mode=display">
\frac{1}{n}\sum_{i=0}^{n-1}\omega_{n}^{ik}=[n|k]</script><p>当$n|k$的时候显然，每一项都是$1$，否则可以利用等比数列求和得到。</p>
<p>我们把单位根带进前面的生成函数，假设生成函数系数为$a_i$：</p>
<script type="math/tex; mode=display">
\sum_{r=0}^{m-1}f(\omega_m^r)=\sum_{i=0}^{n}a_i\sum_{t=0}^{m-1}\omega_m^{it}=m\sum_{i=0}^{n}a_i[i\bmod m=0]</script><p>那么我们就得到了$f$的$\bmod 4=0$的项之和，至于$\bmod 4$为其他值的和我们可以通过把$f$右移若干位得到。</p>
<p>那么最终答案就是：</p>
<script type="math/tex; mode=display">
\frac{1}{4}\sum_{r=0}^3a_{(-r)\bmod 4}\sum_{t=0}^3f(\omega_4^t)\omega_4^{rt}</script><p><del>代码对着式子抄一遍就行了，我就不放了</del></p>
<hr>
<p>在看看<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3328" target="_blank" rel="noopener">这个题</a>。</p>
<blockquote>
<p>给定$n,k$，求：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^{n}\binom{n}{i}F_i[k|i]</script><p>其中$F_i$为斐波那契数列，$n\leqslant 1e18,k\leqslant 2e4$。</p>
</blockquote>
<p>我们把这玩意搞成矩阵形式：</p>
<script type="math/tex; mode=display">
\sum_{i=0}^{n}\binom{n}{i}A^i[k|i]</script><p>其中$A$是斐波那契的转移矩阵。</p>
<p>那么生成函数：</p>
<script type="math/tex; mode=display">
f(x)=\sum_{i=0}^{n}\binom{n}{i}A^ix^i=(Ax+I)^n</script><p>$I$是单位矩阵。</p>
<p>所以套一下上面的式子就写完了：</p>
<script type="math/tex; mode=display">
\frac{1}{k}\sum_{i=0}^{k-1}f(w_k^i)</script><p>code:</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k,p,g,w[maxn];ll n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%p) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> e=p<span class="number">-1</span>;r.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=e;i++) {</span><br><span class="line">        <span class="keyword">if</span>(e%i) <span class="keyword">continue</span>;</span><br><span class="line">        r.pb(i);<span class="keyword">while</span>(!(e%i)) e/=i;</span><br><span class="line">    }<span class="keyword">if</span>(e!=<span class="number">1</span>) r.pb(e);</span><br><span class="line">    <span class="keyword">for</span>(g=<span class="number">2</span>;;g++) {</span><br><span class="line">        <span class="keyword">int</span> bo=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;r.size();x++)</span><br><span class="line">            <span class="keyword">if</span>(qpow(g,(p<span class="number">-1</span>)/r[x])==<span class="number">1</span>) {bo=<span class="number">0</span>;<span class="keyword">break</span>;}</span><br><span class="line">        <span class="keyword">if</span>(bo) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{x+=y;<span class="keyword">return</span> x&gt;=p?x-p:x;}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);}</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix &amp;r) <span class="keyword">const</span> {</span><br><span class="line">        matrix res;res.clear();</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=1;i++)</span></span><br><span class="line">        <span class="comment">//     for(int j=0;j&lt;=1;j++)</span></span><br><span class="line">        <span class="comment">//         for(int k=0;k&lt;=1;k++)</span></span><br><span class="line">        <span class="comment">//             res.a[i][j]=add(res.a[i][j],1ll*a[i][k]*r.a[k][j]%p);</span></span><br><span class="line">        res.a[<span class="number">0</span>][<span class="number">0</span>]=add(<span class="number">1l</span>l*a[<span class="number">0</span>][<span class="number">0</span>]*r.a[<span class="number">0</span>][<span class="number">0</span>]%p,<span class="number">1l</span>l*a[<span class="number">0</span>][<span class="number">1</span>]*r.a[<span class="number">1</span>][<span class="number">0</span>]%p);</span><br><span class="line">        res.a[<span class="number">0</span>][<span class="number">1</span>]=add(<span class="number">1l</span>l*a[<span class="number">0</span>][<span class="number">0</span>]*r.a[<span class="number">0</span>][<span class="number">1</span>]%p,<span class="number">1l</span>l*a[<span class="number">0</span>][<span class="number">1</span>]*r.a[<span class="number">1</span>][<span class="number">1</span>]%p);</span><br><span class="line">        res.a[<span class="number">1</span>][<span class="number">0</span>]=add(<span class="number">1l</span>l*a[<span class="number">1</span>][<span class="number">0</span>]*r.a[<span class="number">0</span>][<span class="number">0</span>]%p,<span class="number">1l</span>l*a[<span class="number">1</span>][<span class="number">1</span>]*r.a[<span class="number">1</span>][<span class="number">0</span>]%p);</span><br><span class="line">        res.a[<span class="number">1</span>][<span class="number">1</span>]=add(<span class="number">1l</span>l*a[<span class="number">1</span>][<span class="number">0</span>]*r.a[<span class="number">0</span>][<span class="number">1</span>]%p,<span class="number">1l</span>l*a[<span class="number">1</span>][<span class="number">1</span>]*r.a[<span class="number">1</span>][<span class="number">1</span>]%p);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> &amp;r) <span class="keyword">const</span> {</span><br><span class="line">        matrix res;res.clear();</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=1;i++)</span></span><br><span class="line">        <span class="comment">//     for(int j=0;j&lt;=1;j++)</span></span><br><span class="line">        <span class="comment">//         res.a[i][j]=1ll*a[i][j]*r%p;</span></span><br><span class="line">        res.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1l</span>l*a[<span class="number">0</span>][<span class="number">0</span>]*r%p;</span><br><span class="line">        res.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1l</span>l*a[<span class="number">0</span>][<span class="number">1</span>]*r%p;</span><br><span class="line">        res.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1l</span>l*a[<span class="number">1</span>][<span class="number">0</span>]*r%p;</span><br><span class="line">        res.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1l</span>l*a[<span class="number">1</span>][<span class="number">1</span>]*r%p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span> + (<span class="keyword">const</span> matrix &amp;r) <span class="keyword">const</span> {</span><br><span class="line">        matrix res;res.clear();</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=1;i++)</span></span><br><span class="line">        <span class="comment">//     for(int j=0;j&lt;=1;j++)</span></span><br><span class="line">        <span class="comment">//         res.a[i][j]=add(a[i][j],r.a[i][j]);</span></span><br><span class="line">        res.a[<span class="number">0</span>][<span class="number">0</span>]=add(a[<span class="number">0</span>][<span class="number">0</span>],r.a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        res.a[<span class="number">0</span>][<span class="number">1</span>]=add(a[<span class="number">0</span>][<span class="number">1</span>],r.a[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        res.a[<span class="number">1</span>][<span class="number">0</span>]=add(a[<span class="number">1</span>][<span class="number">0</span>],r.a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        res.a[<span class="number">1</span>][<span class="number">1</span>]=add(a[<span class="number">1</span>][<span class="number">1</span>],r.a[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}I,A;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a,ll x)</span> </span>{</span><br><span class="line">    matrix res=I;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=a*a) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// int st=clock();</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n),read(k),read(p);gen();</span><br><span class="line">    I.a[<span class="number">0</span>][<span class="number">0</span>]=I.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(g,(p<span class="number">-1</span>)/k);</span><br><span class="line">    A.a[<span class="number">0</span>][<span class="number">0</span>]=A.a[<span class="number">0</span>][<span class="number">1</span>]=A.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;k;i++) w[i]=<span class="number">1l</span>l*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%p;</span><br><span class="line">    matrix ans;ans.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) ans=ans+qpow(A*w[i]+I,n);</span><br><span class="line">    write(<span class="number">1l</span>l*ans.a[<span class="number">0</span>][<span class="number">0</span>]*qpow(k,p<span class="number">-2</span>)%p);</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(lf)(clock()-st)/1e3&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round #528 (Div. 1)</title>
    <url>/2019/09/17/Codeforces-Round-528-Div-1/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1086" target="_blank" rel="noopener">https://codeforces.com/contest/1086</a></p>
<a id="more"></a>
<h2 id="B-Minimum-Diameter-Tree"><a href="#B-Minimum-Diameter-Tree" class="headerlink" title="B. Minimum Diameter Tree"></a>B. Minimum Diameter Tree</h2><p>最优方案是把总和分摊到所有和叶子相邻的边上，因为否则我们可以每次把直径上边上的权值挪到所有叶子节点上均分一定更优。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> cnt,d[maxn],n,s;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),d[x]++,d[y]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]==<span class="number">1</span>) cnt++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,<span class="number">2.0</span>*s/cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Vasya-and-Templates"><a href="#C-Vasya-and-Templates" class="headerlink" title="C. Vasya and Templates"></a>C. Vasya and Templates</h2><p>我是直接爆搜搜过去的。。。加几个剪枝跑的飞快。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,tr[<span class="number">200</span>],vis[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn],a[maxn],b[maxn],t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dn,<span class="keyword">int</span> up)</span> </span>{ <span class="comment">// dn,up分别表示前面有没有大于（小于）a (b)</span></span><br><span class="line">    <span class="keyword">if</span>((dn&amp;&amp;up)||x==n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">int</span> p;</span><br><span class="line">    <span class="keyword">if</span>(p=tr[s[x]]) {</span><br><span class="line">        <span class="keyword">if</span>((!dn&amp;&amp;p&lt;a[x])||(!up&amp;&amp;p&gt;b[x])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(x+<span class="number">1</span>,dn|(p&gt;a[x]),up|(p&lt;b[x]));</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=dn?<span class="number">1</span>:a[x];i&lt;=(up?k:b[x]);i++) {</span><br><span class="line">            <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">            tr[s[x]]=i;vis[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dfs(x+<span class="number">1</span>,dn|(i&gt;a[x]),up|(i&lt;b[x]))) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            tr[s[x]]=<span class="number">0</span>;vis[i]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(k);<span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>,s+<span class="number">1</span>,a+<span class="number">1</span>,b+<span class="number">1</span>);n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">26</span>;i++) tr[i]=vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i]-<span class="string">'a'</span>+<span class="number">1</span>,a[i]=a[i]-<span class="string">'a'</span>+<span class="number">1</span>,b[i]=b[i]-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)) {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) {</span><br><span class="line">            <span class="keyword">if</span>(!tr[i]) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++) <span class="keyword">if</span>(!vis[j]) {vis[j]=<span class="number">1</span>,tr[i]=j;<span class="keyword">break</span>;}</span><br><span class="line">            <span class="built_in">putchar</span>(tr[i]+<span class="string">'a'</span><span class="number">-1</span>);</span><br><span class="line">        }<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Rock-Paper-Scissors-Champion"><a href="#D-Rock-Paper-Scissors-Champion" class="headerlink" title="D. Rock-Paper-Scissors Champion"></a>D. Rock-Paper-Scissors Champion</h2><p>假设我们现在要判断$x$能不能成为冠军，假设他要出$\rm S$，那么他不能成为冠军当且仅当他左边或右边所有可能成为冠军的人都可以打败他，也就是左边或右边不能出现$P$并且至少有一个$R$。其他的情况也等价。</p>
<p>那么用树状数组和$\rm set$维护一下就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line"><span class="keyword">char</span> r[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> {</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span> </span>{<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x) t[x]+=a;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> res=<span class="number">0</span>)</span> </span>{<span class="keyword">for</span>(;x;x-=x&amp;-x) res+=t[x];<span class="keyword">return</span> res;}</span><br><span class="line">}t[<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span> &gt; s[<span class="number">4</span>],w[<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trans</span><span class="params">(<span class="keyword">char</span> c)</span> </span>{<span class="keyword">return</span> c==<span class="string">'S'</span>?<span class="number">1</span>:(c==<span class="string">'P'</span>?<span class="number">2</span>:<span class="number">3</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> ans=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">3</span>;x++) {</span><br><span class="line">        <span class="keyword">int</span> y=x<span class="number">-1</span>;<span class="keyword">if</span>(!y) y=<span class="number">3</span>;<span class="keyword">int</span> z=<span class="number">6</span>-x-y;</span><br><span class="line">        <span class="keyword">if</span>(!s[z].size()) <span class="keyword">return</span> s[y].size()?s[y].size():n;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">3</span>;x++) {</span><br><span class="line">        <span class="keyword">int</span> y=x<span class="number">-1</span>;<span class="keyword">if</span>(!y) y=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> z=<span class="number">6</span>-x-y;</span><br><span class="line">        <span class="keyword">int</span> p=*s[z].rbegin(),q=max(*s[y].rbegin(),*s[z].rbegin());</span><br><span class="line">        <span class="keyword">if</span>(q&gt;p) ans-=t[x].query(q<span class="number">-1</span>)-t[x].query(p);</span><br><span class="line">        p=*s[z].begin(),q=min(*s[y].begin(),*s[z].begin());</span><br><span class="line">        <span class="keyword">if</span>(p&gt;q) ans-=t[x].query(p)-t[x].query(q);</span><br><span class="line">    }<span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) r[i]=trans(r[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        t[r[i]].modify(i,<span class="number">1</span>),s[r[i]].insert(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">3</span>;x++) <span class="keyword">if</span>(x!=r[i]) w[x].insert(i);</span><br><span class="line">    }write(calc());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> x;<span class="keyword">char</span> op;read(x),<span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        t[r[x]].modify(x,<span class="number">-1</span>),s[r[x]].erase(x),w[r[x]].insert(x);</span><br><span class="line">        r[x]=trans(op);</span><br><span class="line">        t[r[x]].modify(x,<span class="number">1</span>),s[r[x]].insert(x),w[r[x]].erase(x);</span><br><span class="line">        write(calc());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Beautiful-Matrix"><a href="#E-Beautiful-Matrix" class="headerlink" title="E. Beautiful Matrix"></a>E. Beautiful Matrix</h2><p>有毒这题。。我本来以为一眼就会写了，然后越写代码越多。。。最后写了好久才写完。</p>
<p>首先考虑一个这样的问题：有多少个长度为$n$的排列满足前$k$个$a_i\ne i$。</p>
<p>这个问题也可以说成有任意$k$个$a_i$满足$a_i\ne b_i$，其中$b_i$互不相同，也就是说有任意$k$个限制都等价，设这个问题的答案为$g_{n,k}$，我们考虑$\rm dp$。</p>
<p>我们先忽略第$k$个限制，那么前面的方案数$g_{n,k-1}$转移过来，然后我们在减去不满足第$k$个限制的方案数，也就是$g_{n-1,k-1}$，方程就是：</p>
<script type="math/tex; mode=display">
g_{n,k}=g_{n,k-1}-g_{n-1,k-1}</script><p>边界是$g_{n,0}=n!$。</p>
<p>然后我们按字典序的顺序枚举，每次求出前面都一样，这一位比给出来的矩阵少的方案数加起来就好了，也就是当前这一行剩下来的几位的方案数乘以下面几层的方案数。</p>
<p>若干层的方案数非常好算，设为$f_i$，那么乘以每次的方案就好了，也就是$f_i=f_{i-1}\cdot g_{n,n}$。</p>
<p>然后用树状数组维护下每种东西出现过没就好了</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,fac[maxn],f[maxn],ifac[maxn],v[maxn],a[maxn][maxn],g[maxn][maxn],w[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> {</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{<span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span> t);}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x) t[x]+=v;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ans=<span class="number">0</span>)</span> </span>{<span class="keyword">for</span>(;x;x-=x&amp;-x) ans+=t[x];<span class="keyword">return</span> ans;}</span><br><span class="line">}T,r;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*fac[aa]*ifac[b]%mod*ifac[aa-b]%mod;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,aa=<span class="number">1l</span>l*aa*aa%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*aa%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ifac[i]=<span class="number">1l</span>l*ifac[i<span class="number">-1</span>]*qpow(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line"> </span><br><span class="line">    g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        g[i][<span class="number">0</span>]=fac[i];<span class="comment">//printf("%d ",fac[i]);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            g[i][j]=(g[i][j<span class="number">-1</span>]-g[i<span class="number">-1</span>][j<span class="number">-1</span>]+mod)%mod;<span class="comment">//,printf("%d ",g[i][j]);</span></span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=<span class="number">1l</span>l*g[n][n]*f[i<span class="number">-1</span>]%mod;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;=n;i++) printf("f[%d] :: %d\n",i,f[i]);    </span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(v[x]) T.modify(x,<span class="number">-1</span>),v[x]=<span class="number">0</span>;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delr</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(w[x]) w[x]=<span class="number">0</span>,r.modify(x,<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// ,printf("delr :: %d\n",x);</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),gen();<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) {</span><br><span class="line">        T.clear();r.clear();</span><br><span class="line">        <span class="comment">// puts("\n\n");</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) w[j]=v[j]=<span class="number">1</span>,T.modify(j,<span class="number">1</span>),r.modify(j,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) {</span><br><span class="line">            read(x),a[i][j]=x;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">1</span>) del(a[i][j<span class="number">-1</span>]);</span><br><span class="line">                ans=(ans+<span class="number">1l</span>l*T.query(x<span class="number">-1</span>)*f[n-i]%mod*g[n-j][<span class="number">0</span>]%mod)%mod;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">1</span>) del(a[i][j<span class="number">-1</span>]),delr(a[i][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>) delr(a[i<span class="number">-1</span>][j]);</span><br><span class="line">            <span class="comment">// int pre=ans;</span></span><br><span class="line">            <span class="keyword">int</span> p=r.query(x<span class="number">-1</span>);<span class="keyword">if</span>(a[i<span class="number">-1</span>][j]&lt;x&amp;&amp;w[a[i<span class="number">-1</span>][j]]) p--;</span><br><span class="line">            <span class="comment">// write(p);</span></span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*p*f[n-i]%mod*g[n-j][r.query(n)<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">            </span><br><span class="line">            p=T.query(x<span class="number">-1</span>)-r.query(x<span class="number">-1</span>);<span class="keyword">if</span>(a[i<span class="number">-1</span>][j]&lt;x&amp;&amp;v[a[i<span class="number">-1</span>][j]]&amp;&amp;!w[a[i<span class="number">-1</span>][j]]) p--;</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*p*f[n-i]%mod*g[n-j][r.query(n)]%mod)%mod;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// if(pre-ans) printf("%d %d %d\n",i,j,ans-pre);</span></span><br><span class="line">        }</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>计数</tag>
        <tag>构造</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Bye 2018 (CF contest 1091)</title>
    <url>/2019/09/17/Good-Bye-2018-CF-contest-1091/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1091" target="_blank" rel="noopener">https://codeforces.com/contest/1091</a></p>
<a id="more"></a>
<h2 id="D-New-Year-and-the-Permutation-Concatenation"><a href="#D-New-Year-and-the-Permutation-Concatenation" class="headerlink" title="D. New Year and the Permutation Concatenation"></a>D. New Year and the Permutation Concatenation</h2><p>基础计数题…</p>
<p>注意到合法的区间一定是$1\sim n$各出现一次，首先显然有$n!$个单独的排列，可以发现还有一些是两个排列中间的部分，那么我们枚举前面那个排列占了$x$个，后面就是$n-x$个。</p>
<p>那么这样的合法区间有$\binom{n}{x}x!((n-x)!-1)$个，第一项显然是枚举前$x$个数是哪些，那么我们也就知道了后$n-x$个数，然后后面那部分不能是降序排列，所以要减一。</p>
<p>然后暴力统计就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,fac[maxn],ifac[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*fac[a]*ifac[b]%mod*ifac[a-b]%mod;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);fac[<span class="number">0</span>]=ifac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ifac[i]=<span class="number">1l</span>l*ifac[i<span class="number">-1</span>]*qpow(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=fac[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) </span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*c(n,i)*fac[i]%mod*(fac[n-i]<span class="number">-1</span>)%mod+mod)%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-New-Year-and-the-Acquaintance-Estimation"><a href="#E-New-Year-and-the-Acquaintance-Estimation" class="headerlink" title="E. New Year and the Acquaintance Estimation"></a>E. New Year and the Acquaintance Estimation</h2><p>这题有毒。。。首先你需要点开题面中的链接，然后下面有一句话说的是，测试$n$个点度能不能形成一张无向图可以用$\rm Erdős–Gallai \ theorem$定理。。</p>
<p>如果看到了这个定理，基本上应该都会写了。。。</p>
<p>这个定理是这样说的，假设点度为$d_1\sim d_n$，且排序成了下降序列，那么如果对于任意$k$满足：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{k}d_i\leqslant k(k-1)+\sum_{i=k+1}^{n}\min(k,d_i)</script><p>并且所有点度之和为偶数，那么就能构成无向图。</p>
<p>也蛮好理解的，这句话是说给前面$k$个点分配点度，$k(k-1)$表示两两连边，后面是说拿后面的向前面连边，如果这样前面的点度都还有剩余就不行。</p>
<p>至于做这个题的话。。可以直接看成序列上的问题，扫一遍维护一下就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,d[maxn],s[maxn],t[maxn],l,r=<span class="number">1e9</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(d[i]);</span><br><span class="line">    <span class="keyword">int</span> p=n+<span class="number">1</span>;sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>,[&amp;](<span class="keyword">int</span> a,<span class="keyword">int</span> b) {<span class="keyword">return</span> a&gt;b;});</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+d[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++) {</span><br><span class="line">        <span class="keyword">while</span>(d[p<span class="number">-1</span>]&lt;k&amp;&amp;p<span class="number">-1</span>) p--;</span><br><span class="line">        <span class="keyword">int</span> a=s[k],b;</span><br><span class="line">        <span class="keyword">if</span>(p&gt;k) b=(p-k<span class="number">-1</span>)*k+s[n]-s[p<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span> b=s[n]-s[k];b+=k*(k<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) {</span><br><span class="line">            <span class="keyword">if</span>(a-b&gt;k) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">            l=max(l,a-b);</span><br><span class="line">        }r=min(r,b+min(k,d[k])-a+d[k]);<span class="comment">//printf("%d %d  %d %d  %d\n",a,b,l,r,p);</span></span><br><span class="line">    }<span class="keyword">int</span> bo=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) <span class="keyword">if</span>(!((i+s[n])&amp;<span class="number">1</span>)) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,i),bo=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(bo?<span class="string">"-1"</span>:<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-New-Year-and-the-Mallard-Expedition"><a href="#F-New-Year-and-the-Mallard-Expedition" class="headerlink" title="F. New Year and the Mallard Expedition"></a>F. New Year and the Mallard Expedition</h2><p>挺好玩的题。</p>
<p>首先假设只有一段陆地或者水，那么显然策略是走一半飞一半。</p>
<p>那么我们直接从前往后扫一遍，每次遇到陆地和水就走一半飞一半，开两个变量存一下当前在陆地上飞了多远，水里飞了多远。</p>
<p>那么每次碰到岩浆就把前面飞的路程改成走路，优先改水上的，剩下的不够的岩浆就从前面的水或陆地来回走获得能量，同样还是优先水上。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,t[maxn],ans,g,w,r=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(t[i]),t[i]*=<span class="number">2</span>;<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) {</span><br><span class="line">            <span class="keyword">int</span> c=min(w,t[i]/<span class="number">2</span>);ans+=c*<span class="number">4</span>,w-=c,t[i]-=c*<span class="number">2</span>,g+=c*<span class="number">2</span>;</span><br><span class="line">            g+=t[i]/<span class="number">2</span>,ans+=t[i]*<span class="number">3</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'W'</span>) w+=t[i]/<span class="number">2</span>,ans+=t[i]*<span class="number">2</span>,r=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            ans+=t[i];<span class="keyword">int</span> c=min(t[i]/<span class="number">2</span>,w);w-=c,t[i]-=c*<span class="number">2</span>,ans+=c*<span class="number">2</span>;</span><br><span class="line">            c=min(t[i]/<span class="number">2</span>,g),g-=c,t[i]-=c*<span class="number">2</span>,ans+=c*<span class="number">4</span>;</span><br><span class="line">            ans+=t[i]*r;</span><br><span class="line">        }</span><br><span class="line">    }write(ans/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>构造</tag>
        <tag>贪心</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>hello 2019 (CF contest 1097)</title>
    <url>/2019/09/15/hello%202019/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1097" target="_blank" rel="noopener">https://codeforces.com/contest/1097</a></p>
<a id="more"></a>
<h2 id="D-Makoto-and-a-Blackboard"><a href="#D-Makoto-and-a-Blackboard" class="headerlink" title="D. Makoto and a Blackboard"></a>D. Makoto and a Blackboard</h2><p>设$f(n)$为$n$的答案，那么由期望的定义可知$f$是个积性函数，那么问题转化成了求$f(p^x)$，其中$p$是质数。</p>
<p>那么直接暴力$dp$就好了，复杂度$O(\sqrt{n}+k\log^2 n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,f[<span class="number">60</span>][<span class="number">10030</span>],inv[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c+<span class="number">1</span>;i++) inv[i]=qpow(i,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);f[c][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=j;t&lt;=c;t++)</span><br><span class="line">                f[j][i]=(f[j][i]+<span class="number">1l</span>l*inv[t+<span class="number">1</span>]*f[t][i<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c;i++) res=(res+<span class="number">1l</span>l*qpow(x,i)*f[i][k]%mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);<span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(n%i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">0</span>;<span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i,c++;</span><br><span class="line">        ans=<span class="number">1l</span>l*ans*solve(i,c)%mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>) ans=<span class="number">1l</span>l*ans*solve(n,<span class="number">1</span>)%mod;write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Egor-and-an-RPG-game"><a href="#E-Egor-and-an-RPG-game" class="headerlink" title="E. Egor and an RPG game"></a>E. Egor and an RPG game</h2><p>神仙题啊啊啊。。</p>
<p>首先可以构造出最坏的情况就是类似于：$1,3,2,6,5,4,10,9,8,7$，显然这组的答案是$4$，也就是说对于一个$k$，最大长度为$k(k+1)/2$的排列最坏为$k$。</p>
<p>那么我们就可以算出$f(n)$了。</p>
<p>然后我们考虑如何构造方案，我们先求出$lis$，也就是最长上升子序列，假设$|lis|\geqslant k$，那么我们直接把$lis$拉出来然后变成一个子问题，因为$\frac{k(k+1)}{2}-k=\frac{k(k-1)}2$，所以剩下的子问题也合法。</p>
<p>否则我们可以直接选出$|lis|$个下降子序列，这里考虑$lis$的二分求法，设$f_i$表示长度为$i$的上升子序列结尾最小的数是多少。</p>
<p>那么每次添加一个新的数$x$我们就在$f$上二分然后更新，那么每个$f$的历史值一定递减并且位置递增。</p>
<p>总复杂度$O(n\sqrt n \log n)$，因为最坏要做$\sqrt n$次$lis$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],n,t[maxn],len,sta[maxn],top,pre[maxn],rev[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),rev[a[i]]=i;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; &gt; ans;</span><br><span class="line">    <span class="keyword">while</span>(n) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) t[i]=<span class="number">0</span>,s[i].clear(),pre[i]=<span class="number">0</span>;len=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; r;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;t[len]) {</span><br><span class="line">                t[++len]=a[i],s[len].pb(a[i]);</span><br><span class="line">                pre[i]=rev[t[len<span class="number">-1</span>]];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> x=lower_bound(t+<span class="number">1</span>,t+len+<span class="number">1</span>,a[i])-t;</span><br><span class="line">            s[x].pb(a[i]),t[x]=a[i];pre[i]=rev[t[x<span class="number">-1</span>]];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;<span class="keyword">while</span>((k+<span class="number">1</span>)*(k+<span class="number">2</span>)/<span class="number">2</span>&lt;=n) k++;</span><br><span class="line">        <span class="keyword">if</span>(len&lt;=k) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) ans.pb(s[i]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }<span class="keyword">for</span>(<span class="keyword">int</span> i=rev[t[len]];i;i=pre[i]) r.pb(a[i]);</span><br><span class="line">        reverse(r.begin(),r.end());ans.pb(r);</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(p&gt;=r.size()||a[i]!=r[p]) sta[++top]=a[i];<span class="keyword">else</span> p++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) a[i]=sta[i],rev[a[i]]=i;</span><br><span class="line">        n-=len;</span><br><span class="line">    }write(ans.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i].size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ans[i].size();j++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i][j]);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-Alex-and-a-TV-Show"><a href="#F-Alex-and-a-TV-Show" class="headerlink" title="F. Alex and a TV Show"></a>F. Alex and a TV Show</h2><p>如果没有$3$操作那么显然可以用$\rm bitset$。</p>
<p>否则我们考虑一种这样的变换，原来假设$f_{i,j}$表示$i$集合中$j$的数量，现在我们改成$f_{i,j}$表示$i$集合中$j$的倍数的数量，那么$3$操作直接逐位相乘就行了。</p>
<p>$1$操作显然可以$O(v^2)$预处理，$3$操作直接利用莫比乌斯反演，也可以$O(v^2)$预处理系数然后直接转化为$\rm bitset$运算，$2$操作和原来没有区别。</p>
<p>那么总复杂度就是$O(\frac{qv}{\omega}+v^2)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q,pri[maxn],mu[maxn],vis[maxn],tot;</span><br><span class="line"><span class="built_in">bitset</span>&lt;M &gt; t[maxn],r[M],s[M];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>{</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;M;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) mu[i]=<span class="number">1</span>,pri[++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;M;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i*pri[j]]=mu[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);sieve();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;M;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) <span class="keyword">if</span>(i%j==<span class="number">0</span>) r[i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;M;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;M;j+=i) s[i][j]=mu[j/i];</span><br><span class="line">    <span class="keyword">while</span>(q--) {</span><br><span class="line">        <span class="keyword">int</span> op,x,y,z,v;read(op),read(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) read(v),t[x]=r[v];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) read(y),read(z),t[x]=t[y]^t[z];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>) read(y),read(z),t[x]=t[y]&amp;t[z];</span><br><span class="line">        <span class="keyword">else</span> read(v),<span class="built_in">putchar</span>(((t[x]&amp;s[v]).count()&amp;<span class="number">1</span>)+<span class="string">'0'</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="G-Vladislav-and-a-Great-Legend"><a href="#G-Vladislav-and-a-Great-Legend" class="headerlink" title="G. Vladislav and a Great Legend"></a>G. Vladislav and a Great Legend</h2><p>什么鬼题。。。看到$k$只有$200$先用斯特林数搞一波，式子变成：</p>
<script type="math/tex; mode=display">
\sum_{X}\sum_{i=0}^{k}s_2(k,i)(f(X))^{\underline i}</script><script type="math/tex; mode=display">
\sum_{i=0}^{k}s_2(k,i)i!\sum_{X}\binom{f(X)}{i}</script><p>第一个式子是第二类斯特林数的套路，后面是下降幂，不会的可以看看这个：<a href="https://hyscere.github.io/2019/09/09/斯特林反演/" target="_blank" rel="noopener">斯特林反演</a>。</p>
<p>然后我们现在就是要求后面那一块，设$f_{i,j}$表示$i$的子树里选中了$j$条边，对于每一个边的选法选点的方案数之和。</p>
<p>那么这个可以类似树上背包的转移，就是当前新加一个子树讨论下这个子树怎么选。</p>
<p>如果每次循环边界都写成$\min(k,sz_v)$这样，复杂度就是$O(nk)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> s[<span class="number">202</span>][<span class="number">202</span>],f[maxn][<span class="number">202</span>],fac[maxn],n,k,head[maxn],tot,sz[maxn],res[maxn],t[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) s[i][j]=(<span class="number">1l</span>l*j*s[i<span class="number">-1</span>][j]%mod+s[i<span class="number">-1</span>][j<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    sz[x]=<span class="number">1</span>;f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pps=head[x],v;pps;pps=e[pps].nxt) {</span><br><span class="line">        <span class="keyword">if</span>((v=e[pps].to)==fa) <span class="keyword">continue</span>;dfs(v,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=min(k,sz[x]);i++) t[i]=f[x][i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=min(k,sz[v]);i++) f[x][i]=(<span class="number">0l</span>l+f[x][i]+f[v][i]+f[v][i<span class="number">-1</span>])%mod;</span><br><span class="line">        f[x][<span class="number">0</span>]=(f[x][<span class="number">0</span>]+f[v][<span class="number">0</span>])%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=min(k,sz[x]);i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=min(k-i,sz[v]);j++) {</span><br><span class="line">                f[x][i+j]=(f[x][i+j]+<span class="number">1l</span>l*t[i]*f[v][j]%mod)%mod;</span><br><span class="line">                f[x][i+j+<span class="number">1</span>]=(f[x][i+j+<span class="number">1</span>]+<span class="number">1l</span>l*t[i]*f[v][j]%mod)%mod;</span><br><span class="line">                res[i+j]=(res[i+j]+<span class="number">1l</span>l*t[i]*f[v][j]%mod)%mod;</span><br><span class="line">                res[i+j+<span class="number">1</span>]=(res[i+j+<span class="number">1</span>]+<span class="number">1l</span>l*t[i]*f[v][j]%mod)%mod;</span><br><span class="line">            }</span><br><span class="line">        sz[x]+=sz[v];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    prepare();read(n),read(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),ins(x,y),ins(y,x);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) ans=(ans+<span class="number">1l</span>l*s[k][i]*fac[i]%mod*res[i]%mod)%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>dp</tag>
        <tag>概率期望</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title>狄利克雷卷积与杜教筛</title>
    <url>/2019/09/12/%E7%8B%84%E5%88%A9%E5%85%8B%E9%9B%B7%E5%8D%B7%E7%A7%AF%E4%B8%8E%E6%9D%9C%E6%95%99%E7%AD%9B/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h2><h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><p><strong>定义：</strong></p>
<p>对于数论函数$f$，若对于任意互质的数$x,y$，满足$f(x<em>y)=f(x)</em>f(y)$，则$f$为一个积性函数。</p>
<p>事实上，我们见过的大部分数论函数都是积性函数，常见的如：</p>
<ul>
<li>$\mu(x)$，莫比乌斯函数，在莫比乌斯反演有讨论过。</li>
<li>$\varphi(x)$，欧拉函数。</li>
<li>$d(x)$，表示$x$的约数个数。</li>
<li>$\sigma(x)$，约数和函数。</li>
<li>$\epsilon(x)$，狄利克雷卷积的原函数，即$\epsilon(x)=[x=0]$。</li>
<li>$id(x)$，定义$id(x)=x$。</li>
<li>$I(x)$，定义$I(x)$函数值恒为$1$，即$I(x)=1$。</li>
</ul>
<p>这只是一小部分，其中有些函数的性质待会会分析。</p>
<h3 id="狄利克雷卷积-1"><a href="#狄利克雷卷积-1" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h3><p><strong>定义：</strong></p>
<p>对于数论函数$f$和$g$，定义它们的狄利克雷卷积为：</p>
<script type="math/tex; mode=display">
(f*g)(n)=\sum_{d|n}f(d)g(\frac{n}{d})</script><p>其中$(f*g)$表示$f$和$g$的狄利克雷卷积。</p>
<p>然后有一个很重要的性质，对于积性函数$f$和$g$，它们的狄利克雷卷积也是个积性函数。</p>
<p>证明很简单，设质数$p$和$n$互质，则：</p>
<script type="math/tex; mode=display">
(f*g)(np)=\sum_{d|np}f(d)g(\frac{np}{d})</script><p>然后展开：</p>
<script type="math/tex; mode=display">
(f*g)(np)=\sum_{d|n}f(d)g(\frac{np}{d})+\sum_{d|n}f(pd)g(\frac{n}{d})</script><p>由于$f,g$为积性函数，可以拆开提出来：</p>
<script type="math/tex; mode=display">
(f*g)(np)=(g(p)+f(p))\sum_{d|n}f(d)g(\frac{n}{d})</script><p>注意到第一项就是$(f<em>g)(1)$，第二项为$(f</em>g)(n)$，所以：</p>
<script type="math/tex; mode=display">
(f*g)(np)=(f*g)(n)*(f*g)(p)</script><p>命题得证。</p>
<p>根据这个，可以有效的判断函数是否为积性函数。</p>
<p>狄利克雷卷积具有的一些性质：</p>
<ul>
<li>交换律：$f<em>g=g</em>f$。</li>
<li>结合律：$f<em>(g</em>h)=(f<em>g)</em>h$。</li>
</ul>
<p>证明很显然，这里就不赘述了。</p>
<p>然后考虑一些常见函数的狄利克雷卷积：</p>
<p>1．$\epsilon(x)$。</p>
<p>对于任意数论函数$f$，根据定义，拿一个卷上一个$\epsilon$，得到：</p>
<script type="math/tex; mode=display">
(f*\epsilon)(n)=\sum_{d|n}f(d)\epsilon(\frac{n}{d})=f(n)</script><p>即$f*\epsilon=f$，</p>
<p>然后我们可以惊奇的发现，卷完了之后得到了他本身，所以说这个函数就是狄利克雷卷积的单位元。</p>
<p>2．$\mu(x)$。</p>
<p>首先我们知道这样一个式子：</p>
<script type="math/tex; mode=display">
\sum_{d|n}\mu(d)=[n=1]</script><p>写成狄利克雷卷积形式就是：</p>
<script type="math/tex; mode=display">
\mu*I=\epsilon</script><p>３．$\varphi(x)$。</p>
<p>这个函数有一些很妙的性质，比如说(<del>众所周知</del>)：</p>
<script type="math/tex; mode=display">
\sum_{d|n}\varphi(x)=n</script><p>证明如下：</p>
<p>设$f(n)=\sum_{d|n}\varphi(d)$，由上面提到的狄利克雷卷积性质可得，$f$为积性函数。</p>
<p>对于$n$的每一个质因数进行考虑，即：</p>
<script type="math/tex; mode=display">
f(x^{p})=\sum_{d|x^p}\varphi(d)=\sum_{i=0}^p\varphi(x^i)</script><p>因为$\varphi(x^p)=\varphi(x^{p-1})*p$，$\varphi(x)=x-1$可得：</p>
<script type="math/tex; mode=display">
f(x^p)＝x-1+\sum_{i=1}^p(x-1)*x^{i}</script><p>由等比数列求和可得$f(x^p)=x^p$，又由$f$为积性函数可得$f(n)=n$，得证。</p>
<p>写成狄利克雷卷积的形式就是：</p>
<script type="math/tex; mode=display">
\varphi*I=id</script><p>然后注意到$\mu*I=\epsilon$，于是尝试在等式两边分别卷上一个$\mu$：</p>
<script type="math/tex; mode=display">
\begin{align}
\varphi*(I*\mu)&=id*\mu\\
\varphi*\epsilon&=id*\mu\\
\mu*id&=\varphi
\end{align}</script><p>写成一般形式就是：</p>
<script type="math/tex; mode=display">
\sum_{d|n}\mu(d)*\frac{n}{d}=\varphi(n)</script><p>这个式子也很常用的。</p>
<h2 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h2><p><del>前置知识终于讲完了</del></p>
<p>对于积性函数$f$，现在考虑求$\sum_{i=1}^nf(i)$。</p>
<p>当然我知道你会线筛，但是有一些小清新(<del>无良</del>)出题人把数据开到$1e9$级别，你就做不了了，所以需要更快的算法。</p>
<p>设$S(n)=\sum_{i=1}^{n}f(i)$。</p>
<p>考虑先拿一个函数和$f$做卷积，先不考虑这个函数是啥，先设它为$g$，则：</p>
<script type="math/tex; mode=display">
(f*g)(n)=\sum_{d|n}^{n}f(d)g(\frac{n}{d})</script><p>对这个函数前缀和一下：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n\sum_{d|i}g(d)f(\frac{n}{d})=\sum_{d=1}^{n}g(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}f(i)=\sum_{d=1}^{n}g(d)S(\lfloor\frac{n}{d}\rfloor)</script><p>中间交换求和符号就不赘述了。</p>
<p>然后有一个很显然的式子：</p>
<script type="math/tex; mode=display">
g(1)S(n)=\sum_{d=1}^{n}g(d)S(\lfloor\frac{n}{d}\rfloor)-\sum_{d=2}^{n}g(d)S(\lfloor\frac{n}{d}\rfloor)</script><p>然后把等号右边第一项换一下：</p>
<script type="math/tex; mode=display">
S(n)=\sum_{i=1}^{n}(f*g)(i)-\sum_{d=2}^{n}g(d)S(\lfloor\frac{n}{d}\rfloor)</script><p>剩下的事情就很显然了，如果我们能凑出一个$g$，使得它和$f$的卷积的前缀和很好算，它也很好算，我们就可以先预处理出前$1e7$左右的数据，然后记忆化递归处理$S$。</p>
<p>至于$g$，因题目不同而不同，做多了也就有经验了。</p>
<p>注意上试是杜教筛的套路试子，如果不会推也没关系，记下来就好了。</p>
<p>这里还是举几个栗子吧：</p>
<p>１．$\sum_{i=1}^{n}\mu(i)$.</p>
<p>首先我们知道一个这样的东西：</p>
<script type="math/tex; mode=display">
\mu*I=\epsilon</script><p>对于$\epsilon$的前缀和，显然是$1$，</p>
<p>所以，令$g(n)=I(n)=1$，得到：</p>
<script type="math/tex; mode=display">
S(n)=1-\sum_{i=2}^nS(\frac{n}{i})</script><p>然后数论分块下就行了。</p>
<p>代码也很简单，记住一定要记忆化。</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; Mu;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_mu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">	<span class="keyword">if</span>(n&lt;maxn) <span class="keyword">return</span> mu[n];</span><br><span class="line">	<span class="keyword">if</span>(Mu[n]) <span class="keyword">return</span> Mu[n];</span><br><span class="line">	<span class="keyword">int</span> T=<span class="number">2</span>,res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(T&lt;=n) {</span><br><span class="line">		<span class="keyword">int</span> pre=T;T=n/(n/T);</span><br><span class="line">		res=res-(T-pre+<span class="number">1</span>)*sum_mu(n/T);T++;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> Mu[n]=res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>2．$\sum_{i=1}^{n}\varphi(i)*i$。</p>
<p>这次考虑一个难一点的。</p>
<p>我们的目的是要找一个$g$，使他们卷起来很好算。</p>
<p>那么先列出式子：</p>
<script type="math/tex; mode=display">
(f*g)(n)=\sum_{i|n}i*\varphi(i)*g(\frac{n}{i})</script><p>然后发现中间有个$i$的系数，可以考虑消去它，于是暂且令$g(n)=n$：</p>
<script type="math/tex; mode=display">
(f*g)(n)=\sum_{i|n}n*\varphi(i)=n^2</script><p>然后可以发现这个东西非常好算，因为：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}i^2=\frac{n(n+1)(2n+1)}{6}</script><p>所以：</p>
<script type="math/tex; mode=display">
S(n)=\frac{n(n+1)(2n+1)}{6}-\sum_{i=2}^{n}i*S(\frac{n}{i})</script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于一个陌生的函数，如果要求前缀和，先判是不是积性函数，然后通过这个函数的性质进行分析凑$g$，也可以像栗2一样凑，实在不行就一个一个试。</p>
<p>当然有时候线筛也是很好的，或者可以枚举因数大力算，不要总是纠结于能不能杜教筛。</p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><a href="https://www.cnblogs.com/hbyer/p/10073676.html" target="_blank" rel="noopener">[bzoj3944] Sum</a></p>
<p><a href="https://www.cnblogs.com/hbyer/p/10072917.html" target="_blank" rel="noopener">[bzoj4176] Lucas的数论</a></p>
<p><a href="https://www.cnblogs.com/hbyer/p/10071615.html" target="_blank" rel="noopener">[bzoj4916] 神犇和蒟蒻</a></p>
<p><a href="https://www.cnblogs.com/hbyer/p/10214066.html" target="_blank" rel="noopener">[bzoj4652]|[Noi2016]循环之美</a></p>
<p><a href="https://www.cnblogs.com/hbyer/p/10076978.html" target="_blank" rel="noopener">[bzoj3930] [CQOI2015]选数</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[BZOJ2694] Lcm</title>
    <url>/2019/09/12/BZOJ2694-Lcm/</url>
    <content><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>定义整数$a,b$，求所有满足一下条件的二元组$(i,j)$的$\rm lcm(i,j)$的和。</p>
<ul>
<li>$1\leqslant i\leqslant a,1\leqslant j\leqslant b$。</li>
<li>$\forall n&gt;1,n^2\not \mid \gcd(i,j)$。</li>
</ul>
<a id="more"></a>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>注意到第二个条件可以写成$\mu^2(\gcd(i,j))$，那么我们可以直接形式化的写出式子：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{a}\sum_{j=1}^{b}\mu^2(\gcd(i,j)){\rm lcm}(i,j)</script><p>随便推一下：</p>
<script type="math/tex; mode=display">
\begin{align}
&\sum_{i=1}^{a}\sum_{j=1}^{b}\mu^2(\gcd(i,j)){\rm lcm}(i,j)\\
=&\sum_{d=1}^{a}\frac{\mu^2(d)}{d}\sum_{i=1}^{a}\sum_{j=1}^{b}ij[\gcd(i,j)=d]\\
=&\sum_{d=1}^{a}d\mu^2(d)\sum_{i=1}^{a/d}\sum_{j=1}^{b/d}\sum_{t|i,t|j}\mu(t)ij\\
=&\sum_{d=1}^{a}d\mu^2(d)\sum_{t=1}^{a/d}\mu(t)t^2s(\lfloor\frac{a}{dt}\rfloor)s(\lfloor\frac{b}{dt}\rfloor) \\
=&\sum_{T=1}^{a}s(\lfloor\frac{a}{T}\rfloor)s(\lfloor\frac{b}{T}\rfloor)\sum_{d|T}\mu^2(d)\mu(\frac{T}{d})\frac{T^2}{d} \\
\end{align}</script><p>后面那个求和可以预处理，前面整除分块，复杂度就是$O(n\log n+T\sqrt{n})$.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn],mu[maxn],pri[maxn],vis[maxn],tot,a,b,t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>{</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) mu[i]=<span class="number">-1</span>,pri[++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;maxn;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i*pri[j]]=-mu[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;maxn;d++)</span><br><span class="line">        <span class="keyword">if</span>(mu[d]) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=d;t&lt;maxn;t+=d)</span><br><span class="line">                f[t]+=mu[t/d]*t*(t/d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">s</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*n*(n+<span class="number">1</span>)/<span class="number">2</span>;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(t);sieve();</span><br><span class="line">    <span class="keyword">while</span>(t--) {</span><br><span class="line">        read(a),read(b);<span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>,T=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(T&lt;=a) {</span><br><span class="line">            <span class="keyword">int</span> pre=T;T=min(a/(a/T),b/(b/T));</span><br><span class="line">            res+=s(a/T)*s(b/T)*(f[T]-f[pre<span class="number">-1</span>]);T++;</span><br><span class="line">        }write(res&amp;((<span class="number">1</span>&lt;&lt;<span class="number">30</span>)<span class="number">-1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 530 (Div. 1)</title>
    <url>/2019/09/11/Codeforces%20Round%20530%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1098" target="_blank" rel="noopener">https://codeforces.com/contest/1098</a></p>
<p>前面有些很没意思很简单的题我就不写题解了（</p>
<a id="more"></a>
<h2 id="C-Construct-a-tree"><a href="#C-Construct-a-tree" class="headerlink" title="C. Construct a tree"></a>C. Construct a tree</h2><p>首先如果$s&lt;2n-1$或者$s&gt;\frac{n(n+1)}{2}$就无解。</p>
<p>否则可以按照以下构造出合法方案。</p>
<p>首先把子树大小和转换成每个点的深度之和，显然这俩等价。</p>
<p>那么最大的情况就是一条链，然后我们每次把一个叶子挂在他父亲深度减一的任意一个点上，那么答案恰好减一。</p>
<p>注意到显然度数越大最小值就越小，而最大值是固定的，所以我们二分度数，假设为$k$，此时最小值就是$1+k+k^2+\cdots+(n-k^x)(x+1)$，$x$是最大的$k^x\leqslant n$的值。</p>
<p>那么我们可以$O(\log n)$的判断，复杂度就是$O(n+\log ^2 n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,s,fa[maxn],d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">1</span>,res=<span class="number">1</span>,now=<span class="number">1</span>,dep=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(res+now*k&lt;=n) </span><br><span class="line">        now*=k,dep++,res+=now,sum+=dep*now;</span><br><span class="line">    dep++;sum+=dep*(n-res);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(s);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n<span class="number">-1</span>,k=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r) {</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(calc(mid)&lt;=s) r=mid<span class="number">-1</span>,k=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> sum=n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;s||<span class="number">2</span>*n<span class="number">-1</span>&gt;s) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>),<span class="number">0</span>;<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) fa[i]=i<span class="number">-1</span>,d[i<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) t[i].pb(i);<span class="keyword">int</span> now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) {</span><br><span class="line">        <span class="keyword">if</span>(d[t[now].back()]==k) t[now].pop_back();</span><br><span class="line">        <span class="keyword">if</span>(!t[now].size()) now++;<span class="comment">//printf("%d %d\n",i,now);</span></span><br><span class="line">        <span class="keyword">if</span>(sum-(i-now<span class="number">-1</span>)&lt;=s) {</span><br><span class="line">            fa[i]=i-(sum-s)<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }fa[i]=t[now].back(),d[t[now].back()]++;</span><br><span class="line">        t[now+<span class="number">1</span>].pb(i),d[i]=<span class="number">0</span>;sum-=i-now<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,fa[i]);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Eels"><a href="#D-Eels" class="headerlink" title="D. Eels"></a>D. Eels</h2><p>看了题解才会的。。大神题。</p>
<p>首先我们排序，我们定义$x$是好的当且仅当$2\sum_{i=1}^{x-1}a_i&lt;a_x$，也就是说不可能有一个比$x$小的鱼和$x$贡献答案。</p>
<p>为了最大化答案，我们有一个这样的贪心策略：每次选两个最小的合并，假设当前合并的是$a,b$，假设$a<b$，显然$b$不可能是合并的结果，否则$a$会和合并之前的小的那个合并。那么如果$b>2a$，说明$b$是一条好的鱼，因为$a$会和所有小的合并，所以假设有$t$条好鱼，这样贪心的答案就是$n-t$。</b$，显然$b$不可能是合并的结果，否则$a$会和合并之前的小的那个合并。那么如果$b></p>
<p>而我们显然不能得到更优的答案，因为所有好鱼都会减少一个答案，也就是说答案最大为$n-t$。</p>
<p>所以我们现在要维护这个$t$，我们把值域分割成若干块：$[1,2),[2,4),[4,8),\cdots,[2^{30},2^{31})$。</p>
<p>显然每个块内至多只有一个好鱼，并且是最小的那个。</p>
<p>所以随便拿个东西暴力维护下就好了，复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ans,pw[maxn],sum[maxn],cnt,mn[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span> &gt; r[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;cnt++;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;=pw[p+<span class="number">1</span>]) p++;</span><br><span class="line">    ans-=sum[p<span class="number">-1</span>]*<span class="number">2</span>&lt;mn[p];</span><br><span class="line">    r[p].insert(x);mn[p]=*r[p].begin();</span><br><span class="line">    ans+=sum[p<span class="number">-1</span>]*<span class="number">2</span>&lt;mn[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=<span class="number">30</span>;i++) {</span><br><span class="line">        ans-=sum[i]*<span class="number">2</span>&lt;mn[i+<span class="number">1</span>];</span><br><span class="line">        sum[i]+=x;</span><br><span class="line">        ans+=sum[i]*<span class="number">2</span>&lt;mn[i+<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;cnt--;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;=pw[p+<span class="number">1</span>]) p++;</span><br><span class="line">    ans-=sum[p<span class="number">-1</span>]*<span class="number">2</span>&lt;mn[p];</span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span> &gt; :: iterator t=r[p].find(x);r[p].erase(t);</span><br><span class="line">    mn[p]=*r[p].begin();</span><br><span class="line">    ans+=sum[p<span class="number">-1</span>]*<span class="number">2</span>&lt;mn[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=<span class="number">30</span>;i++) {</span><br><span class="line">        ans-=sum[i]*<span class="number">2</span>&lt;mn[i+<span class="number">1</span>];</span><br><span class="line">        sum[i]-=x;</span><br><span class="line">        ans+=sum[i]*<span class="number">2</span>&lt;mn[i+<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    pw[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">40</span>;i++) pw[i]=pw[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> q;read(q);</span><br><span class="line">    <span class="keyword">while</span>(q--) {</span><br><span class="line">        <span class="keyword">char</span> op;<span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;op),read(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'+'</span>) insert(x);</span><br><span class="line">        <span class="keyword">else</span> del(x);write(cnt-ans);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Fedya-the-Potter"><a href="#E-Fedya-the-Potter" class="headerlink" title="E. Fedya the Potter"></a>E. Fedya the Potter</h2><p>强行把一堆东西套一起的题。。。因为这题我还去学了一波类欧几里得算法，学习笔记：<a href="https://hyscere.github.io/2019/09/04/类欧几里得算法/" target="_blank" rel="noopener">类欧几里得算法</a>。</p>
<p>首先注意到$b$数组不一样的数只有$O(n\log n)$个，因为考虑枚举$a$的左端点，拿右端点往后扫，$\gcd$每次要么不变要么至少除掉一个因数，所以只会减少$O(\log n)$次。</p>
<p>所以可以拿二分+$\rm rmq$求出$b$数组。</p>
<p>然后我们二分答案，现在就是要求多少个区间和小于等于二分出来的答案。</p>
<p>然后这个$b$数组现在是很多块，每块内的值相同，所以我们一个一个块的进行$\rm two_pointer$，现在只要求左端点在$a$块，右端点在$b$块有多少种情况符合条件就行了，假设$a$块值为$x$，$b$为$y$，二分出来的答案为$s$，两个块中间的总和为$t$。</p>
<p>也就是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{a}\sum_{j=1}^{b}[ix+jy+t\leqslant s]</script><p>假设$f(a,b,c)$表示$ax+by\leqslant c$的正整数解的个数，那么上式容斥一下就是：</p>
<script type="math/tex; mode=display">
f(x,y,s-a-b)-f(x,y,s-(a+1)x)-f(x,y,s-(b+1)y)+\\f(x,y,s-(a+1)x-(b+1)y)</script><p>至于$f$，我们可以得到一个很显然的式子：</p>
<script type="math/tex; mode=display">
f(a,b,c)=\sum_{i=0}^{c/a}(1+\lfloor\frac{c-ia}{b}\rfloor)</script><p>这是枚举$a$的使用次数，但是这样$a$的系数是负的，我们可以枚举$i$表示$a$用了$c/a-i$次，那么式子就是：</p>
<script type="math/tex; mode=display">
\begin{align}
f(a,b,c)&=c/a+1+\sum_{i=0}^{c/a}\lfloor\frac{c-(c/a-i)a}{b}\rfloor\\
f(a,b,c)&=c/a+1+\sum_{i=0}^{c/a}\lfloor\frac{ai+c\bmod a}{b}\rfloor
\end{align}</script><p>直接上类欧几里得就好了。</p>
<p>代码挺难写的。。细节很多，复杂度$O(n\log ^2 n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> v[maxn],cnt,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">data</span> {</span><span class="keyword">int</span> x;ll t;}t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)/2)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ST_table</span> {</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">50050</span>][<span class="number">16</span>],lg[<span class="number">50050</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">15</span>;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                f[i][j]=__gcd(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> t=lg[y-x+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> __gcd(f[x][t],f[y-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t]);</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,ll &gt; s;</span><br><span class="line">    T.build();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">int</span> p=i,now=v[i];</span><br><span class="line">        <span class="keyword">while</span>(p&lt;=n) {</span><br><span class="line">            <span class="keyword">int</span> l=p,r=n,pre=p;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">                <span class="keyword">if</span>(T.query(i,mid)==now) p=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            s[now]+=p-pre+<span class="number">1</span>;</span><br><span class="line">            p++;now=__gcd(now,v[p]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,ll &gt; :: iterator i=s.begin();i!=s.end();i++)</span><br><span class="line">        t[++cnt]=(_data){i-&gt;fr,i-&gt;sc};</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll a,ll b,ll c,ll n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> (n+<span class="number">1</span>)*(b/c);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=c||b&gt;=c) <span class="keyword">return</span> f(a%c,b%c,c,n)+n*(n+<span class="number">1</span>)/<span class="number">2</span>*(a/c)+(n+<span class="number">1</span>)*(b/c);</span><br><span class="line">    ll m=(n*a+b)/c;</span><br><span class="line">    <span class="keyword">return</span> n*m-f(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">ll sum[maxn],ct[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">s</span><span class="params">(ll a,ll b,ll c)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(c&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x=f(a,c%a,b,c/a)+c/a+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll a,ll b,ll md)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ss=md-(ct[b<span class="number">-1</span>]-ct[a]),x=t[a].x,y=t[b].x;ss-=x,ss-=y;</span><br><span class="line">    <span class="keyword">if</span>((t[a].t<span class="number">-1</span>)*x+(t[b].t<span class="number">-1</span>)*y&lt;=ss) <span class="keyword">return</span> t[a].t*t[b].t;</span><br><span class="line">    <span class="keyword">return</span> s(x,y,ss)-s(x,y,ss-t[a].t*x)-s(x,y,ss-t[b].t*y)+s(x,y,ss-t[a].t*x-t[b].t*y);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(ll x)</span> </span>{</span><br><span class="line">    ll p=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) {</span><br><span class="line">        ll w=min(x/t[i].x,t[i].t);</span><br><span class="line">        ans+=(t[i].t+<span class="number">1</span>)*w-w*(w+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) {</span><br><span class="line">        <span class="keyword">if</span>(p&gt;i+<span class="number">1</span>) ans+=<span class="number">1l</span>l*t[i].t*(sum[p<span class="number">-1</span>]-sum[i]);</span><br><span class="line">        <span class="keyword">while</span>(p&lt;=cnt&amp;&amp;ct[p]-ct[i]&lt;=x) ans+=calc(i,p,x),p++;</span><br><span class="line">        <span class="keyword">if</span>(p&lt;=cnt) ans+=calc(i,p,x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> st=clock();</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(v[i]);</span><br><span class="line">    prepare();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) sum[i]=sum[i<span class="number">-1</span>]+t[i].t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) ct[i]=ct[i<span class="number">-1</span>]+<span class="number">1l</span>l*t[i].t*t[i].x;</span><br><span class="line">    ll l=<span class="number">1</span>,r=ct[cnt]+<span class="number">1</span>,w=<span class="number">1l</span>l*n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    w=w*(w+<span class="number">1</span>)/<span class="number">2</span>;w=(w+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r) {</span><br><span class="line">        <span class="keyword">if</span>(get(mid)&lt;w) l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    }write(l);</span><br><span class="line">    <span class="built_in">cerr</span>&lt;&lt;(lf)(clock()-st)/<span class="number">1e3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>构造</tag>
        <tag>类欧几里得</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1217F. Forced Online Queries Problem</title>
    <url>/2019/09/09/CF1217F.%20Forced%20Online%20Queries%20Problem/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1217/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1217/problem/F</a></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>有$n$个点无向图，要进行$m$次操作，操作如下：</p>
<ul>
<li><code>1 x y</code>，表示修改操作，如果当前有$(x,y)$这条边就删掉，否则加上。</li>
<li><code>2 x y</code>，询问$x,y$在不在一个联通块中。</li>
</ul>
<p>注意强制在线，每个参数都要改成$(x+last-1)\bmod n+1$，注意$last$为$0/1$。</p>
<a id="more"></a>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意到每个询问只有可能是两种情况。</p>
<p>考虑对询问按时间分块，我们一个块一个块的处理答案。</p>
<p>那么假设我们处理出了前面的块的答案，并求出了一个图，那么我们把所有这个块可能出现修改的边删掉，然后每个连通块缩成一个点，在把边连回去，这时候这个图的大小就是块的大小了，所以所有操作我们都暴力就行了。</p>
<p>实现的时候我们可以在每个块开始的时候重构一遍图，我的实现方法是用$\rm set$去维护连边情况，并查集维护联通情况，所以假设块的大小为$B$，复杂度就是$O(mB+\frac{m}{B}n\log n)$，两项相等时最小，所以$B=\sqrt{n\log n}$，总复杂度就是：$O(m\sqrt{n\log n})$。</p>
<p>注意到$mB$这一项实际上是有一个$4$的常数的，因为每个操作会涉及四个点，所以写代码的时候要把$B$定成$\frac{1}{2}\sqrt{n\log n}$才能通过。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">700</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span> {</span><span class="keyword">int</span> op,x,y,lst;}a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> id[maxn],fa[maxn],top,rev[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span> &gt; e[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span> &gt; c[maxn];</span><br><span class="line">pii sta[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span> &gt; &amp;s,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">auto</span> i=s.lower_bound(y);</span><br><span class="line">    <span class="keyword">if</span>(i==s.end()||*i!=y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">multiset</span>&lt;<span class="keyword">int</span> &gt; &amp;s,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">auto</span> i=s.lower_bound(y);</span><br><span class="line">    <span class="keyword">if</span>(i==s.end()||*i!=y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    x=find(x),y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) fa[x]=y;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> x%n+<span class="number">1</span>;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> t)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i].clear();top=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> make=[&amp;](<span class="keyword">int</span> x,<span class="keyword">int</span> y) {</span><br><span class="line">                  <span class="keyword">if</span>(find(e[x],y)) e[x].erase(y),e[y].erase(x),sta[++top]=mp(x,y);</span><br><span class="line">              };</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=t+<span class="number">1</span>;i&lt;=t+B;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i].op==<span class="number">1</span>) make(inc(a[i].x),inc(a[i].y)),make(a[i].x,a[i].y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(<span class="keyword">auto</span> x:e[i]) link(i,x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) {</span><br><span class="line">        <span class="keyword">int</span> x=find(sta[i].fr),y=find(sta[i].sc);</span><br><span class="line">        <span class="keyword">if</span>(x!=y) c[x].insert(y),c[y].insert(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) {</span><br><span class="line">        <span class="keyword">int</span> x=sta[i].fr,y=sta[i].sc;</span><br><span class="line">        e[x].insert(y),e[y].insert(x);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> use[maxn],vis[maxn],uu;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    vis[x]=<span class="number">1</span>;use[++uu]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:c[x]) <span class="keyword">if</span>(!vis[v]) dfs(v);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) read(a[i].op),read(a[i].x),read(a[i].y);</span><br><span class="line">    <span class="keyword">int</span> lst=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        a[i].lst=lst;</span><br><span class="line">        <span class="keyword">int</span> u=(a[i].x+lst<span class="number">-1</span>)%n+<span class="number">1</span>,v=(a[i].y+lst<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=find(u),y=find(v);</span><br><span class="line">        <span class="keyword">if</span>(a[i].op==<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span>(find(e[u],v)) {</span><br><span class="line">                <span class="keyword">auto</span> pps=c[x].lower_bound(y);</span><br><span class="line">                c[x].erase(pps);pps=c[y].lower_bound(x);</span><br><span class="line">                c[y].erase(pps);e[u].erase(v),e[v].erase(u);</span><br><span class="line">            } <span class="keyword">else</span> c[x].insert(y),c[y].insert(x),e[u].insert(v),e[v].insert(u);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dfs(x);<span class="keyword">if</span>(vis[y]) lst=<span class="number">1</span>;<span class="keyword">else</span> lst=<span class="number">0</span>;<span class="built_in">putchar</span>(lst+<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=uu;j++) vis[use[j]]=<span class="number">0</span>;uu=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(i%B==<span class="number">0</span>) rebuild(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>min_25筛</title>
    <url>/2019/09/05/min-25%E7%AD%9B/</url>
    <content><![CDATA[<h2 id="Min-25筛简介"><a href="#Min-25筛简介" class="headerlink" title="Min_25筛简介"></a>Min_25筛简介</h2><p>$\text{min_25}$筛是一种处理一类积性函数前缀和的算法。</p>
<p>其中这类函数$f(x)$要满足$\sum_{i=1}^{n}[i\in prime]\cdot f(i)$可以被$\sum_{i=1}^{n}[i\in prime]\cdot i^k$简单表示或者快速计算，其中$k$为较小的常数。</p>
<p>时间复杂度好像是$O(\frac{n^{0.75}}{\log n})$，不过据说被证伪了…也有人说是$O(n^{1-\epsilon})$，反正可以做$n=1e10$，貌似跑的比杜教筛快。</p>
<p>空间复杂度$O(\sqrt{n})$。</p>
<a id="more"></a>
<h2 id="part-1"><a href="#part-1" class="headerlink" title="part 1"></a>part 1</h2><p>首先我们要处理的问题是$\sum_{i=1}^{n}[i\in prime]\cdot f(i)$，由于函数特性转化为了求$\sum_{i=1}^{n}[i\in prime]\cdot i^k$。</p>
<p>设$g(n,i)=\sum_{i=1}^{n}[i\in prime\ or \ t(i)&gt;p_i]\cdot i^k$，其中$t(x)$表示$x$的最小质因子，$p_i$表示第$i$个质数。</p>
<p>直观理解就是埃拉托斯特尼筛法进行了$i$轮之后$1\sim n$剩下的数的$k$次方之和。</p>
<p>显然当$p_i^2&gt;n$时$g(n,i)=g(n,i-1)$，下面只考虑$p_i^2\leqslant n$。</p>
<p>我们考虑$g(n,i)$如何从$g(*,i-1)$转移过来，也就是考虑第$i$轮筛掉了那些数。</p>
<p>那么可以得到式子：</p>
<script type="math/tex; mode=display">
g(n,i)=g(n,i-1)-p_i^k\cdot \left(g(\lfloor\frac{n}{p_i}\rfloor,i-1)-s_{i-1}\right)</script><p>其中$s_i=\sum_{j=1}^{i}p_i^k$。</p>
<p>解释一下这个式子，我们考虑筛掉了哪些数，然后减掉就好了，筛掉的那些数最小的质因子显然是$p_i$，而正好$g(\lfloor\frac{n}{p_i}\rfloor,i-1)$代表最小质因子$\geqslant p_i$的数以及质数，我们把质数减掉，拼起来就是$1\sim n$。</p>
<p>那么写在一起就是：</p>
<script type="math/tex; mode=display">
g(n,i)=
\begin{cases}
g(n,i-1)&p_i^2>n\\
g(n,i-1)-p_i^k\cdot \left(g(\lfloor\dfrac{n}{p_i}\rfloor,i-1)-s_{i-1}\right)&p_i^2\leqslant n
\end{cases}</script><p>根据常识可以知道第一维只有$2\sqrt n$个取值，离散化一下然后递推就好了。</p>
<p>注意到这里我们顺便求出了对于每个$x$,$\sum_{i=1}^{\lfloor n/x\rfloor}[i\in prime]\cdot i^k$的值。</p>
<h2 id="part-2"><a href="#part-2" class="headerlink" title="part 2"></a>part 2</h2><p>我们想算出$f$的前缀和，同样的我们设$h(n,i)$如下：</p>
<script type="math/tex; mode=display">
h(n,i)=\sum_{j=1}^{n}[t(j)\geqslant p_i]\cdot f(j)</script><p>那么$h(n,1)+f(1)$就是答案，注意我们$h$不会把$1$算进去。</p>
<p>首先还是很显然的，当$p_i&gt;n$时，$h(n,i)=0$，同样下面只考虑$p_i\leqslant n$的情况。</p>
<p>我们可以通过$g$很简单的算出质数的贡献，即：</p>
<script type="math/tex; mode=display">
\sum_{j=1}^{n}[j\in prime]\cdot f(j)-\sum_{j=1}^{i-1}f(p_j)</script><p>这些都可以预处理。</p>
<p>然后我们考虑暴力地枚举最小的质因子是多少以及用了多少个，即：</p>
<script type="math/tex; mode=display">
\sum_{j=i}^{p_j^2\leqslant n}\sum_{k=1}^{p_j^{k+1}\leqslant n}\left(f(p_j^k)\cdot h(\lfloor\frac{n}{p_j^k}\rfloor,j+1)+f(p_j^{k+1})\right)</script><p>解释下后面的$f(p_j^{k+1})$，这是因为$h$没有把$1$算进去，所以会漏算质数的次幂，直接加上就行了。</p>
<p>综合起来就是：</p>
<script type="math/tex; mode=display">
h(n,i)=\begin{cases}
0&p_i>n\\
\sum_{j=1}^{n}[j\in prime]\cdot f(j)-\sum_{j=1}^{i-1}f(p_j)+\sum_{j=i}^{p_j^2\leqslant n}\sum_{k=1}^{p_j^{k+1}\leqslant n}\left(f(p_j^k)\cdot h(\lfloor\frac{n}{p_j^k}\rfloor,j+1)+f(p_j^{k+1})\right)&p_i\leqslant n
\end{cases}</script><p><del>写成这样求和符号好像有点丑…不管它</del></p>
<p>直接暴力递归算就好了，递推好像还慢些。</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p><a href="https://loj.ac/problem/6053" target="_blank" rel="noopener">[LOJ6053] 简单的函数</a></p>
<p>$f(p)=p-1$，$p=2$的情况特殊处理下就好了。</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;<span class="built_in">print</span>(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> <span class="built_in">print</span>(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">5e8</span>+<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x+y&gt;=mod?x+y-mod:x+y;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*x*y<span class="number">-1l</span>l*x*y/mod*mod;}</span><br><span class="line"></span><br><span class="line">ll n,w[maxn];</span><br><span class="line"><span class="keyword">int</span> b,tot,pri[maxn],vis[maxn],id[maxn],id2[maxn],m,g[maxn],h[maxn],f[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=b&lt;&lt;<span class="number">1</span>;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++tot]=i,p[tot]=add(p[tot<span class="number">-1</span>],pri[tot]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;=b&lt;&lt;<span class="number">1</span>;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(ll x)</span> </span>{<span class="keyword">return</span> x&lt;=b?id[x]:id2[n/x];}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_g</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(ll l=<span class="number">1</span>;l&lt;=n;) {</span><br><span class="line">        ll v=n/l,r=n/v;</span><br><span class="line">        <span class="keyword">if</span>(v&lt;=b) id[v]=++m;<span class="keyword">else</span> id2[n/v]=++m;  <span class="comment">//利用整除分块来离散化</span></span><br><span class="line">        w[m]=v,v%=mod;g[m]=mul(v+<span class="number">2</span>,mul(v<span class="number">-1</span>,inv2)),h[m]=del(v,<span class="number">1</span>);l=r+<span class="number">1</span>;  </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;pri[i]&lt;b;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) {</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1l</span>l*pri[i]*pri[i]&gt;w[j]) <span class="keyword">break</span>;   <span class="comment">//剪枝</span></span><br><span class="line">            g[j]=del(g[j],mul(pri[i],del(g[get_id(w[j]/pri[i])],p[i<span class="number">-1</span>]))); <span class="comment">//g函数记录的是\sum [i\in pri] i，其中第二位滚动掉了</span></span><br><span class="line">            h[j]=del(h[j],del(h[get_id(w[j]/pri[i])],i<span class="number">-1</span>));     <span class="comment">//h记录的是\sum [i\in pri] 1</span></span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) f[i]=del(g[i],h[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(ll x,<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>||pri[i]&gt;x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res=del(f[get_id(x)],del(p[i<span class="number">-1</span>],i<span class="number">-1</span>));<span class="keyword">if</span>(i==<span class="number">1</span>) res=add(res,<span class="number">2</span>);  <span class="comment">//这里处理了f(2)=2+1的情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;<span class="number">1l</span>l*pri[j]*pri[j]&lt;=x;j++)</span><br><span class="line">        <span class="keyword">for</span>(ll k=<span class="number">1</span>,e=pri[j];e*pri[j]&lt;=x;e*=pri[j],k++)</span><br><span class="line">            res=add(res,add(mul(pri[j]^k,calc(x/e,j+<span class="number">1</span>)),pri[j]^(k+<span class="number">1</span>))); <span class="comment">//直接暴力算</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);b=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n));</span><br><span class="line">    sieve();get_g();<span class="built_in">write</span>(add(calc(n,<span class="number">1</span>),<span class="number">1</span>));  <span class="comment">//注意加 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<p><a href="https://www.luogu.org/problemnew/show/P5325" target="_blank" rel="noopener">洛谷P5325 【模板】Min_25筛</a></p>
<p>这和上题也是一样的，注意别爆$\text{long long}$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">5e8</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv6 = <span class="number">166666668</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x+y&gt;=mod?x+y-mod:x+y;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*x*y<span class="number">-1l</span>l*x*y/mod*mod;}</span><br><span class="line"></span><br><span class="line">ll n,w[maxn];</span><br><span class="line"><span class="keyword">int</span> b,tot,pri[maxn],vis[maxn],id[maxn],id2[maxn],m,g[maxn],h[maxn],f[maxn],p[maxn],p2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=b&lt;&lt;<span class="number">1</span>;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++tot]=i,p[tot]=add(p[tot<span class="number">-1</span>],pri[tot]),p2[tot]=add(p2[tot<span class="number">-1</span>],mul(i,i));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;=b&lt;&lt;<span class="number">1</span>;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(ll x)</span> </span>{<span class="keyword">return</span> x&lt;=b?id[x]:id2[n/x];}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_g</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(ll l=<span class="number">1</span>;l&lt;=n;) {</span><br><span class="line">        ll v=n/l,r=n/v;</span><br><span class="line">        <span class="keyword">if</span>(v&lt;=b) id[v]=++m;<span class="keyword">else</span> id2[n/v]=++m;</span><br><span class="line">        w[m]=v,v%=mod;</span><br><span class="line">        g[m]=del(mul(mul(v,mul(v+<span class="number">1</span>,(<span class="number">2</span>*v+<span class="number">1</span>)%mod)),inv6),<span class="number">1</span>);</span><br><span class="line">        h[m]=del(mul(v,mul(v+<span class="number">1</span>,inv2)),<span class="number">1</span>);l=r+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;pri[i]&lt;b;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) {</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1l</span>l*pri[i]*pri[i]&gt;w[j]) <span class="keyword">break</span>;</span><br><span class="line">            g[j]=del(g[j],mul(mul(pri[i],pri[i]),del(g[get_id(w[j]/pri[i])],p2[i<span class="number">-1</span>])));  <span class="comment">//sum of square of prime</span></span><br><span class="line">            h[j]=del(h[j],mul(pri[i],del(h[get_id(w[j]/pri[i])],p[i<span class="number">-1</span>]))); <span class="comment">//sum of prime</span></span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) f[i]=del(g[i],h[i]); </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(ll x,<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>||pri[i]&gt;x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res=del(f[get_id(x)],del(p2[i<span class="number">-1</span>],p[i<span class="number">-1</span>]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;<span class="number">1l</span>l*pri[j]*pri[j]&lt;=x;j++)</span><br><span class="line">        <span class="keyword">for</span>(ll k=<span class="number">1</span>,e=pri[j],ee=e;e*pri[j]&lt;=x;e*=pri[j],k++,ee=e%mod) <span class="comment">//注意e过大可能会爆，先模一下就好了</span></span><br><span class="line">            res=add(res,add(mul(mul(ee,ee<span class="number">-1</span>),calc(x/e,j+<span class="number">1</span>)),mul(mul(ee,pri[j]),del(mul(ee,pri[j]),<span class="number">1</span>))));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);b=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n));</span><br><span class="line">    sieve();get_g();write(add(calc(n,<span class="number">1</span>),<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>min_25筛</tag>
      </tags>
  </entry>
  <entry>
    <title>斯特林反演</title>
    <url>/2019/09/05/%E6%96%AF%E7%89%B9%E6%9E%97%E5%8F%8D%E6%BC%94/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>关于斯特林数的定义可以上百度搜…这部分很简单就没写了。</p>
<p>本文中，$s_1(n,k)$表示第一类斯特林数，$s_2(n,k)$表示第二类。</p>
<p>这里不加说明的给出递推式：</p>
<script type="math/tex; mode=display">
\begin{align}s_1(n,k)&=(n-1)\cdot s_1(n-1,k)+s_1(n-1,k-1)\\
s_2(n,k)&=k\cdot s_2(n-1,k)+s_2(n-1,k-1)\end{align}</script><h2 id="卷积求第二类斯特林数"><a href="#卷积求第二类斯特林数" class="headerlink" title="卷积求第二类斯特林数"></a>卷积求第二类斯特林数</h2><p>首先有一个组合意义很明显的式子：</p>
<script type="math/tex; mode=display">
n^k=\sum_{i=0}^{k}s_2(k,i)\binom{n}{i}i!</script><p>就是说$k$个位置填$n$种颜色，我们可以分成若干组，每组颜色不同。</p>
<p>我们可以把后面的值为$0$的项补全：</p>
<script type="math/tex; mode=display">
n^k=\sum_{i=0}^{n}s_2(k,i)\binom{n}{i}i!</script><p>对其进行二项式反演：</p>
<script type="math/tex; mode=display">
s_2(k,n)n!=\sum_{i=0}^{n}(-1)^{n-i}\binom{n}{i}i^k</script><p>这个可以写成卷积形式，顺便把变量换下：</p>
<script type="math/tex; mode=display">
s_2(n,k)=\sum_{i=0}^k\frac{(-1)^{k-i}}{(k-i)!}\cdot \frac{i^n}{i!}</script><h2 id="阶乘幂"><a href="#阶乘幂" class="headerlink" title="阶乘幂"></a>阶乘幂</h2><p>阶乘幂的定义是这样的：</p>
<p>上升幂：$x^{\overline n}=\prod_{i=1}^{n}(x+i-1)$。</p>
<p>下降幂：$x^{\underline n}=\prod_{i=1}^{n}(x-i+1)$。</p>
<p>显然可以根据组合数的定义得到：</p>
<script type="math/tex; mode=display">
x^{\underline n}=\binom{x}{n}n!</script><p>还有两个这样的式子：</p>
<script type="math/tex; mode=display">
x^{\overline n}=(-1)^n(-x)^{\underline n}\\
x^{\underline n}=(-1)^n(-x)^{\overline n}</script><p>把右边拆开就能证明了。</p>
<h2 id="阶乘幂与斯特林数的转化"><a href="#阶乘幂与斯特林数的转化" class="headerlink" title="阶乘幂与斯特林数的转化"></a>阶乘幂与斯特林数的转化</h2><p>所以上面卷积的第一个式子可以写成这样：</p>
<script type="math/tex; mode=display">
n^k=\sum_{i=0}^{k}s_2(k,i)\binom{n}{i}i!=\sum_{i=0}^{k}s_2(k,i)n^{\underline i}</script><p>还有一个<strong>第一类斯特林数和上升幂的关系</strong>：</p>
<script type="math/tex; mode=display">
x^{\overline n}=\sum_{i=0}^{n}s_1(n,i)x^i</script><p>可以通过数学归纳来证明：</p>
<script type="math/tex; mode=display">
\begin{align}
x^{\overline {n}}&=(x+n-1)\sum_{i=0}^{n-1}s_1(n-1,i)x^i\\
&=\sum_{i=0}^{n-1}s_1(n-1,i)x^{i+1}+\sum_{i=0}^{n-1}(n-1)\cdot s_1(n-1,i)x^i\\
&=\sum_{i=1}^{n}s_1(n-1,i-1)x^{i}+\sum_{i=1}^{n-1}(n-1)\cdot s_1(n-1,i)x^i\\
&=\sum_{i=1}^{n}\big(s_1(n-1,i-1)+(n-1)s_1(n-1,i)\big)x^{i}\\
&=\sum_{i=0}^{n}s_1(n,i)x^i
\end{align}</script><p>注意由于$s_1(n,0)=s_1(n,n+1)=0$，所以中间边界条件其实不需要在意。</p>
<p>我们把这个式子变一下可以得到一个<strong>第一类斯特林数和下降幂的关系</strong>：</p>
<script type="math/tex; mode=display">
x^{\overline n}=\sum_{i=0}^{n}s_1(n,i)x^i</script><script type="math/tex; mode=display">
(-1)^n(-x)^{\overline n}=(-1)^n\sum_{i=0}^{n}s_1(n,i)x^i(-1)^i</script><script type="math/tex; mode=display">
x^{\underline n}=\sum_{i=0}^{n}(-1)^{n-i}s_1(n,i)x^i</script><p>最上面那个普通幂转第二类斯特林数和上升幂的式子也可以类似的变一下：</p>
<script type="math/tex; mode=display">
x^n=\sum_{i=0}^{n}s_2(n,i)x^{\underline i}</script><script type="math/tex; mode=display">
\begin{align}(-1)^n(-x)^n&=(-1)^n\sum_{i=0}^{n}s_2(n,i)(-x)^{\underline i}\\
(-1)^n(-x)^n&=(-1)^n\sum_{i=0}^{n}s_2(n,i)x^{\overline i}(-1)^i\\
x^n&=\sum_{i=0}^{n}(-1)^{n-i}s_2(n,i)x^{\overline i}
\end{align}</script><p><strong>总结一下一共四个转化的式子：</strong></p>
<script type="math/tex; mode=display">
\begin{align}
x^n&=\sum_{i=0}^{n}s_2(n,i)x^{\underline i}\\
x^n&=\sum_{i=0}^{n}(-1)^{n-i}s_2(n,i)x^{\overline i}\\
x^{\underline n}&=\sum_{i=0}^{n}(-1)^{n-i}s_1(n,i)x^i\\
x^{\overline n}&=\sum_{i=0}^{n}s_1(n,i)x^i
\end{align}</script><h2 id="反转公式"><a href="#反转公式" class="headerlink" title="反转公式"></a>反转公式</h2><p>首先搬出下降幂的公式：</p>
<script type="math/tex; mode=display">
x^n=\sum_{i=0}^{n}s_2(n,i)x^{\underline i}</script><p>套上面的公式变成上升幂：</p>
<script type="math/tex; mode=display">
x^n=\sum_{i=0}^{n}s_2(n,i)(-1)^i(-x)^{\overline i}</script><p>套上升幂转第一类斯特林数的公式：</p>
<script type="math/tex; mode=display">
x^n=\sum_{i=0}^{n}s_2(n,i)(-1)^i\sum_{j=0}^{i}s_1(i,j)(-x)^j</script><p>把$x$的幂提前，换一下求和符号：</p>
<script type="math/tex; mode=display">
x^n=\sum_{j=0}^{n}x^j\sum_{i=j}^ns_2(n,i)s_1(i,j)(-1)^{i-j}</script><p>由于这里我们把$x$看成未知量，其他的都是已知量，所以我们可以把左右当作多项式，那么对比系数可得：</p>
<script type="math/tex; mode=display">
\sum_{i=m}^{n}s_2(n,i)s_1(i,m)(-1)^{i-m}=[m=n]</script><p>这个叫做反转公式。</p>
<p>同理我们可以类似的得出第二个反转公式：</p>
<script type="math/tex; mode=display">
\sum_{i=m}^{n}s_1(n,i)s_2(i,m)(-1)^{i-m}=[m=n]</script><p><strong>注意：</strong>反转公式$-1$的指数也可以写成$n-i$，稍加分析可以发现$m=n$时成立，$m\ne n$时有两种情况，一种不变，另一种会将答案取相反数，但是由于结果为$0$所以不影响。</p>
<h2 id="斯特林反演"><a href="#斯特林反演" class="headerlink" title="斯特林反演"></a>斯特林反演</h2><p>这里先给出反演的式子在加以证明：</p>
<script type="math/tex; mode=display">
f(n)=\sum_{i=0}^{n}s_2(n,i)g(i)\Longleftrightarrow g(n)=\sum_{i=0}^{n}(-1)^{n-i}s_1(n,i)f(i)</script><p>考虑一般反演的套路，先写出一个$[i=n]$的形式：</p>
<script type="math/tex; mode=display">
g(n)=\sum_{i=0}^{n}[i=n]g(i)</script><p>在把和斯特林数以及$[m=n]$的式子套进去，也就是上面的反转公式（注意$-1$的指数）：</p>
<script type="math/tex; mode=display">
\begin{align}
g(n)&=\sum_{i=0}^{n}g(i)\sum_{j=i}^{n}(-1)^{n-j}s_1(n,j)s_2(j,i)\\
&=\sum_{j=0}^{n}(-1)^{n-j}s_1(n,j)\sum_{i=0}^{j}s_2(j,i)g(i)\\
&=\sum_{i=0}^{n}(-1)^{n-i}s_1(n,i)f(i)
\end{align}</script><p>证毕。</p>
<p>当然由于反转公式的对称性，所以互换$s_1,s_2$依然成立。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展Cayley定理</title>
    <url>/2019/09/05/%E6%89%A9%E5%B1%95Cayley%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>这其实就是一个小结论….我做题的时候碰到的，研究了下就写了篇博客。</p>
<p><del>（其实主要就是把wiki上一篇论文翻译简化了下）</del></p>
<p>结论是这样的：设$n$个点$s$个连通块的有标号森林个数为$f(n,s)$，则：</p>
<script type="math/tex; mode=display">
f(n,s)=sn^{n-s-1}</script><a id="more"></a>
<p>考虑$n$个点$s$个连通块的森林的所有情况，那么$1$号点的点度可能为$0,1,\cdots , n-s$。</p>
<p>假设$1$号点点度为$j$，那么我们选$j$个点出来硬点他们为$1$的儿子，这里有$\binom{n-s}{j}$的方案，然后我们把$1$删掉，就得到了一个$n-1$个点，$s+j-1$个连通块的森林，假设我们已经知道这种森林有$f(n-1,s+j-1)$种方案，那么我们就可以得到递推式：</p>
<script type="math/tex; mode=display">
f(n,s)=\sum_{j=0}^{n-s}\binom{n-s}{j}f(n-1,s+j-1)</script><p>初始状态：</p>
<script type="math/tex; mode=display">
f(n,1)=n^{n-2}</script><p>那么我们用数学归纳法证明这个定理，假设$f(n-1,s)$是对的，那么：</p>
<script type="math/tex; mode=display">
\begin{align*}
f(n,s)&=\sum_{j=0}^{n-s}\binom{n-s}{j}f(n-1,s+j-1)\\
&=\sum_{j=0}^{n-s}\binom{n-s}{(n-s)-j}f(n-1,s+(n-s)-j-1)\\
&=\sum_{j=0}^{n-s}\binom{n-s}{j}f(n-1,n-j-1)\\
&=\sum_{j=0}^{n-s}\binom{n-s}{j}(n-j-1)(n-1)^{j-1}\\
\end{align*}</script><p>这里是利用了组合数的对称性，然后我们把中间的括号展开，用二项式定理：</p>
<script type="math/tex; mode=display">
\begin{align*}
f(n,s)&=\sum_{j=0}^{n-s}\binom{n-s}{j}(n-1)^{j}-\sum_{j=0}^{n-s}\binom{n-s}{j}j(n-1)^{j-1}\\
\end{align*}</script><p>注意到$\binom{n-s}{j}j=(n-s)\binom{n-s-1}{j-1}$，变换一下：</p>
<script type="math/tex; mode=display">
\begin{align*}
f(n,s)&=n^{n-s}-(n-s)\sum_{j=0}^{n-s}\binom{n-s-1}{j-1}(n-1)^{j-1}\\
&=n^{n-s}-(n-s)\sum_{j=0}^{n-s-1}\binom{n-s-1}{j}(n-1)^{j}\\
&=n^{n-s}-(n-s)n^{n-s-1}\\
&=sn^{n-s-1}
\end{align*}</script><p>这就是需要证明的式子。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round 549 (Div. 1)</title>
    <url>/2019/09/04/Codeforces%20Round%20549%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1142" target="_blank" rel="noopener">https://codeforces.com/contest/1142</a></p>
<a id="more"></a>
<h2 id="A-The-Beatles"><a href="#A-The-Beatles" class="headerlink" title="A. The Beatles"></a>A. The Beatles</h2><p>A题随便写写就行了（</p>
<p>直接暴力枚举间距就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,a,b,p[<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k),read(a),read(b);</span><br><span class="line">    p[<span class="number">1</span>]=a+b,p[<span class="number">2</span>]=a+k-b,p[<span class="number">3</span>]=k-a+b,p[<span class="number">4</span>]=k-a+k-b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) </span><br><span class="line">        <span class="keyword">if</span>(p[i]&gt;k) p[i]-=k;</span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">1e18</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++) {</span><br><span class="line">            <span class="keyword">int</span> t=n*k/__gcd(n*k,p[j]);</span><br><span class="line">            ans1=min(ans1,t),ans2=max(ans2,t);</span><br><span class="line">            <span class="keyword">if</span>(p[j]+k&lt;=n*k) p[j]+=k;</span><br><span class="line">        }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ans1,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Lynyrd-Skynyrd"><a href="#B-Lynyrd-Skynyrd" class="headerlink" title="B. Lynyrd Skynyrd"></a>B. Lynyrd Skynyrd</h2><p>首先处理出$f_i$表示$i$后面最靠近的能匹配位置是哪个。</p>
<p>那么直接对这个数组倍增然后每次暴力判断就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[maxn],a[maxn],f[maxn][<span class="number">20</span>],t[maxn],n,m,q,rev[maxn],r[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(p[i]),rev[p[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) read(a[i]);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">if</span>(a[i]==p[<span class="number">1</span>]) f[i][<span class="number">0</span>]=t[n];</span><br><span class="line">        <span class="keyword">else</span> f[i][<span class="number">0</span>]=t[rev[a[i]]<span class="number">-1</span>];</span><br><span class="line">        t[rev[a[i]]]=i;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">20</span>;j++)</span><br><span class="line">            f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> d=n<span class="number">-1</span>,p=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">20</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(d&amp;(<span class="number">1</span>&lt;&lt;j)) d-=<span class="number">1</span>&lt;&lt;j,p=f[p][j];</span><br><span class="line">        r[i]=max(r[i<span class="number">-1</span>],p);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> x,y;read(x),read(y);</span><br><span class="line">        <span class="keyword">if</span>(r[y]&gt;=x) <span class="built_in">putchar</span>(<span class="string">'1'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">    }<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-U2"><a href="#C-U2" class="headerlink" title="C. U2"></a>C. U2</h2><p>挺神仙的…<del>反正我是参考了题解</del></p>
<p>注意到抛物线的式子：$y=x^2+bx+c$，移下项就是$y-x^2=bx+c$。</p>
<p>那么把每个点$(x,y)$改成$(x,y-x^2)$，抛物线就变成了直线。</p>
<p>那么直接求凸包就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line"> </span><br><span class="line">    P <span class="keyword">operator</span> - (<span class="keyword">const</span> P &amp;a) {<span class="keyword">return</span> (P){x-a.x,y-a.y};}</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> P &amp;a) {<span class="keyword">return</span> x*a.y-y*a.x;}</span><br><span class="line">}a[maxn],sta[maxn];</span><br><span class="line"><span class="keyword">int</span> n,top;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(P x,P y)</span> </span>{<span class="keyword">return</span> x.x==y.x?x.y&gt;y.y:x.x&lt;y.x;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i].x),read(a[i].y),a[i].y-=a[i].x*a[i].x;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);a[<span class="number">0</span>].x=<span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(a[i].x==a[i<span class="number">-1</span>].x) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(top&lt;=<span class="number">1</span>) sta[++top]=a[i];</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;(sta[top<span class="number">-1</span>]-sta[top])*(a[i]-sta[top])&lt;=<span class="number">0</span>) top--;</span><br><span class="line">            sta[++top]=a[i];</span><br><span class="line">        }</span><br><span class="line">    }write(top<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Foreigner"><a href="#D-Foreigner" class="headerlink" title="D. Foreigner"></a>D. Foreigner</h2><p>假设我们现在有一个合法的数$x$，他的排名为$r \pmod {11}$。</p>
<p>那么我们现在考虑求出往$x$后面添一个$0$，排名会变为多少（注意这里说的排名都是模$11$意义下）。</p>
<p>首先如果我们按题意模拟来生成这个数列，可以发现这个数列就是升序的。</p>
<p>那么我们现在就是想统计$[1,x]$会生成多少个合法的数。</p>
<p>注意到排名模$11$分别为$0-10$的数共计会生成$1+2+..+10+0=55=11\times 5$个数，所以这些数其实是可以忽略掉的。</p>
<p>那么其实有贡献的就只有排名为$0\sim r-1$的数会贡献，这部分一共有$\frac{r(r-1)}{2}$个数。</p>
<p>注意到排名为$0$（此处不算取模）不是一个合法的数所以还要减一。</p>
<p>所以$10x$的排名就是$\frac{r(r-1)}{2}-1\pmod {11}$。</p>
<p>反之，对于任意$x$，排名就是：</p>
<script type="math/tex; mode=display">
x\%10+\frac{r_{x/10}(r_{x/10}-1)}{2}-1</script><p>那么直接$dp$算答案，设$f_{i,j}$表示当前排名为$j$，从第$i$位开始往后接最多能接多少个数字。</p>
<p>随便转移一下就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n,f[maxn][<span class="number">12</span>];</span><br><span class="line">ll ans;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) {</span><br><span class="line">        <span class="keyword">int</span> t=s[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(t&gt;=j) f[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> f[i][j]=f[i+<span class="number">1</span>][(j*(j<span class="number">-1</span>)/<span class="number">2</span>+t+<span class="number">10</span>)%<span class="number">11</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(t) ans+=f[i+<span class="number">1</span>][t]+<span class="number">1</span>;</span><br><span class="line">    }<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Pink-Floyd"><a href="#E-Pink-Floyd" class="headerlink" title="E. Pink Floyd"></a>E. Pink Floyd</h2><p>首先考虑没有粉色的边怎么做，我们硬点一个答案$x$，然后询问一个没问过的$y$，如果是$x\to y$就不管，否则把答案换成$y$即可。</p>
<p>如果有粉色的边，我们首先把粉色的边搞出一个图来，然后搞出若干个$\rm dfs$树，那么在这个树上就只有树边和返祖边，也就是指向祖先的边。</p>
<p>我们搞出一个集合$s$，表示待选的答案集合，我们一开始把每个根丢进去，然后每次拿出两个点，询问一下，假设$x\to y$，那么我们把$y$从集合和树上都删掉，然后把$y$的儿子加进集合，直到集合只剩一个点。</p>
<p>分析一下这样的正确性，我们每次选出来的点$x,y$，$x,y$之间必然不存在粉色的边，因为连向儿子的边儿子还没加进集合，连向祖先的边也一定被删掉了，所以一定不存在粉色的边。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,vis[maxn],in[maxn],d[maxn],sta[maxn],top;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; e[maxn],t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    vis[x]=in[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:e[x]) {</span><br><span class="line">        <span class="keyword">if</span>(!in[v]) t[x].pb(v),d[v]++;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]) dfs(v);</span><br><span class="line">    }in[x]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++) read(x),read(y),e[x].pb(y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!vis[i]) dfs(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!d[i]) sta[++top]=i;</span><br><span class="line">    <span class="keyword">while</span>(top&gt;<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">int</span> x=sta[top--],y=sta[top--],op;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"? %d %d\n"</span>,x,y);fflush(<span class="built_in">stdout</span>);read(op);</span><br><span class="line">        <span class="keyword">if</span>(!op) swap(x,y);sta[++top]=x;<span class="keyword">for</span>(<span class="keyword">auto</span> v:t[y]) <span class="keyword">if</span>(!(--d[v])) sta[++top]=v;</span><br><span class="line">    }<span class="built_in">printf</span>(<span class="string">"! "</span>);write(sta[top]);fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>交互</tag>
        <tag>倍增</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>类欧几里得算法</title>
    <url>/2019/09/04/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>做到了一个$\rm cf$题需要用到这个东西我就去学了下…</p>
<p>以前觉得这玩意好毒瘤，不过其实也不难。</p>
<p>类欧几里得算法一般是用来快速计算以下几个函数的（当然有其他的作用但是一般不会出现，<del>以后看到了在写吧</del>）：</p>
<script type="math/tex; mode=display">
\begin{align*}
f(a,b,c,n)&=\sum_{i=0}^{n}\lfloor\frac{ai+b}{c}\rfloor\\
g(a,b,c,n)&=\sum_{i=0}^{n}i\lfloor\frac{ai+b}{c}\rfloor\\
h(a,b,c,n)&=\sum_{i=0}^{n}\lfloor \frac{ai+b}{c}\rfloor ^2
\end{align*}</script><p>其复杂度为$O(\log n)$。</p>
<h2 id="计算F"><a href="#计算F" class="headerlink" title="计算F"></a>计算F</h2><p>我们分情况讨论，先考虑$a\geqslant c$或者$b\geqslant c$的情况。</p>
<p>注意到根据整除的性质我们可以把式子写成这样：</p>
<script type="math/tex; mode=display">
\begin{align*}
f(a,b,c,n)&=\sum_{i=0}^{n}\left(\lfloor\frac{(a\bmod c)i+(b\bmod c)}{c}\rfloor+i\lfloor\frac{a}{c}\rfloor +\lfloor \frac{b}{c}\rfloor \right)\\
&=f(a\bmod c,b\bmod c,c,n)+\frac{n(n+1)}{2}\lfloor\frac{a}{c}\rfloor +(n+1)\lfloor \frac{b}{c}\rfloor 
\end{align*}</script><p>注意到这里递归了，而且递归后一定是一个$a&lt;c,b&lt;c$的情况，那么此时用上面的展开就没用了。</p>
<p>注意到这个和式实质上是求一条直线下的整点个数，一开始我们是枚举$x$，然后算$y$，我们现在先枚举$y$，也就是横着的一条，可以得到：</p>
<script type="math/tex; mode=display">
\begin{align*}
m&=\lfloor\frac{an+b}{c}\rfloor\\
f(a,b,c,n)&=\sum_{i=0}^{n}\sum_{j=1}^{m}[\lfloor\frac{ai+b}{c}\rfloor\geqslant j]
\end{align*}</script><p>推一下后面那个不等式，因为是大于等于号所以整除可以去掉：</p>
<script type="math/tex; mode=display">
\begin{align*}\lfloor\frac{ai+b}{c}\rfloor&\geqslant j\\
ai+b&\geqslant jc\\
i&\geqslant \frac{jc-b}{a}\\
i&> \lfloor\frac{jc-b-1}{a}\rfloor\\
\end{align*}</script><p>那么式子就可以化简了：</p>
<script type="math/tex; mode=display">
\begin{align*}
f(a,b,c,n)&=\sum_{j=0}^{m-1}(n-\lfloor\frac{jc+c-b-1}{a}\rfloor)\\
f(a,b,c,n)&=nm-f(c,c-b-1,a,m-1)
\end{align*}</script><p>观察下递归时$a,c$的变化：$(a,c)\to (a\bmod c,a)\to (a,a\bmod c)$。</p>
<p>这就是欧几里得算法的递归过程，所以最终$a$一定会递归到$0$，此时式子可以直接计算，递归次数为$O(\log n)$。</p>
<h2 id="计算G"><a href="#计算G" class="headerlink" title="计算G"></a>计算G</h2><p>和上面思路相同，当$a\geqslant c$或$b\geqslant c$时：</p>
<script type="math/tex; mode=display">
g(a,b,c,n)=g(a\bmod c,b\bmod c,c,n)+
\frac{n(n+1)(2n+1)}{6}\lfloor\frac{a}{c}\rfloor\\ + \frac{n(n+1)}{2}\lfloor \frac{b}{c}\rfloor</script><p>否则：</p>
<script type="math/tex; mode=display">
\begin{align*}
x&=\lfloor\frac{jc+c-b-1}{a}\rfloor\\
g(a,b,c,n)&=\sum_{i=0}^{n}i\sum_{j=1}^{m}[\lfloor\frac{ai+b}{c}\rfloor\geqslant j]\\
&=\sum_{j=0}^{m-1}\sum_{i=x+1}^{n}i\\
&=\sum_{j=0}^{m-1}\left(\frac{n(n+1)}{2}-\frac{x^2+x}{2}\right)\\
&=\frac{1}{2}\left(mn(n+1)-h(c,c-b-1,a,m-1)-\\f(c,c-b-1,a,m-1)\right)
\end{align*}</script><p>其中$f$我们已经会算了，这里还用到了$h$，所以我们在推推$h$。</p>
<h2 id="计算H"><a href="#计算H" class="headerlink" title="计算H"></a>计算H</h2><p>当$a\geqslant c$或$b\geqslant c$时，思路一样，但是式子有点复杂注意别搞错：</p>
<script type="math/tex; mode=display">
\begin{align*}
h(a,b,c,n)&=\sum_{i=0}^{n}\left(\lfloor\frac{(a\bmod c)i+(b\bmod c)}{c}\rfloor+i\lfloor\frac{a}{c}\rfloor +\lfloor \frac{b}{c}\rfloor \right)^2\\
&=h+2\lfloor\frac{a}{c}\rfloor g+2\lfloor \frac{b}{c}\rfloor f+\frac{n(n+1)(2n+1)}{6}\lfloor\frac{a}{c}\rfloor^2 +\\&n(n+1)\lfloor\frac{b}{c}\rfloor\lfloor\frac{a}{c}\rfloor +(n+1)\lfloor\frac{b}{c}\rfloor ^2
\end{align*}</script><p>其中函数后面参数都是$(a\bmod c,b\bmod c,c,n)$，我省略没写了。</p>
<p>第二种情况这时候就有点难算了，因为平方无法处理，这里有一个小技巧可以把平方拆开：</p>
<script type="math/tex; mode=display">
n^2=-n+2\sum_{i=0}^{n}i</script><p>那么就很简单了，一个整点$(x,y)$会被统计$y$的贡献，式子写出来就是：</p>
<script type="math/tex; mode=display">
\begin{align*}
h(a,b,c,n)&=-f(a,b,c,n)+2\sum_{i=0}^{n}\sum_{j=1}^{m}j[\lfloor\frac{ai+b}{c}\rfloor>j]\\
&=-f(a,b,c,n)+2\sum_{i=0}^{n}\sum_{j=1}^{m}j[i> \lfloor\frac{jc-b-1}{a}\rfloor]\\
&=-f(a,b,c,n)+2\sum_{j=0}^{m-1}(j+1)(n-\lfloor\frac{jc+c-b-1}{a}\rfloor)\\
&=m(m+1)n-2g(c,c-b-1,a,m-1)\\&-2f(c,c-b-1,a,m-1)-f(a,b,c,n)
\end{align*}</script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果按照上面写三个函数互相调用显然是不优的，因为一个状态有可能被算很多次，当然可以采取记忆化，但是这样会多一个查找的$\log $。</p>
<p>有一个小技巧就是，我们可以写一个$\rm dfs$，返回三个值，分别是$f,g,h$，注意到这三个函数递归的时候参数都是一样的，所以这样只会递归$O(\log n)$次，并且每次递归都是$O(1)$算。</p>
<p>所以总复杂度$O(\log n)$。</p>
<p>代码长这样：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">499122177</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv6 = <span class="number">166374059</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> {</span><span class="keyword">int</span> f,g,h;};</span><br><span class="line"></span><br><span class="line"><span class="function">data <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    data ans;</span><br><span class="line">    <span class="keyword">int</span> s1=<span class="number">1l</span>l*n*(n+<span class="number">1</span>)%mod*inv2%mod,s2=<span class="number">1l</span>l*n*(n+<span class="number">1</span>)%mod*(n*<span class="number">2</span>+<span class="number">1</span>)%mod*inv6%mod;</span><br><span class="line">    <span class="keyword">if</span>(!a) {</span><br><span class="line">        ans.f=<span class="number">1l</span>l*(n+<span class="number">1</span>)*(b/c)%mod;</span><br><span class="line">        ans.g=<span class="number">1l</span>l*s1*(b/c)%mod;</span><br><span class="line">        ans.h=<span class="number">1l</span>l*(b/c)*(b/c)%mod*(n+<span class="number">1</span>)%mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=c||b&gt;=c) {</span><br><span class="line">        data res=calc(a%c,b%c,c,n);</span><br><span class="line">        ans.f=(<span class="number">0l</span>l+res.f+<span class="number">1l</span>l*s1*(a/c)%mod+<span class="number">1l</span>l*(n+<span class="number">1</span>)*(b/c)%mod)%mod;</span><br><span class="line">        ans.g=(<span class="number">0l</span>l+res.g+<span class="number">1l</span>l*s2*(a/c)%mod+<span class="number">1l</span>l*s1*(b/c)%mod)%mod;</span><br><span class="line">        ans.h=(<span class="number">0l</span>l+res.h+<span class="number">1l</span>l*(a/c)*res.g*<span class="number">2</span>%mod+<span class="number">1l</span>l*(b/c)*res.f*<span class="number">2</span>%mod)%mod;</span><br><span class="line">        ans.h=(<span class="number">0l</span>l+ans.h+<span class="number">1l</span>l*s2*(a/c)%mod*(a/c)%mod+<span class="number">1l</span>l*n*(n+<span class="number">1</span>)%mod*(b/c)%mod*(a/c)%mod)%mod;</span><br><span class="line">        ans.h=(ans.h+<span class="number">1l</span>l*(n+<span class="number">1</span>)*(b/c)%mod*(b/c)%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }<span class="keyword">int</span> m=(<span class="number">1l</span>l*a*n+b)/c;</span><br><span class="line">    data res=calc(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>);</span><br><span class="line">    ans.f=(<span class="number">1l</span>l*m*n%mod-res.f+mod)%mod;</span><br><span class="line">    ans.g=(<span class="number">1l</span>l*m*n%mod*(n+<span class="number">1</span>)%mod-res.h-res.f)%mod;ans.g=(<span class="number">1l</span>l*ans.g*inv2%mod+mod)%mod;</span><br><span class="line">    ans.h=(<span class="number">0l</span>l+<span class="number">1l</span>l*m*n%mod*(m+<span class="number">1</span>)%mod<span class="number">-2l</span>l*res.g<span class="number">-2l</span>l*res.f-ans.f)%mod;ans.h=(ans.h+mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);</span><br><span class="line">    <span class="keyword">while</span>(t--) {</span><br><span class="line">        <span class="keyword">int</span> a,b,c,n;read(n),read(a),read(b),read(c);</span><br><span class="line">        data ans=calc(a,b,c,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,ans.f,ans.h,ans.g);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>看起来很复杂其实就是对着式子抄了一遍，提交至洛谷模板可$\rm AC$。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>类欧几里得算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 499 (Div. 1)</title>
    <url>/2019/09/03/Codeforces%20Round%20499%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1010" target="_blank" rel="noopener">https://codeforces.com/contest/1010</a></p>
<a id="more"></a>
<h2 id="A-Fly"><a href="#A-Fly" class="headerlink" title="A. Fly"></a>A. Fly</h2><p>二分答案，送分题。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(lf x)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++) {</span><br><span class="line">        x-=(x+m)/(lf)a[i];</span><br><span class="line">        x-=(x+m)/(lf)b[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }x-=(x+m)/(lf)a[n];</span><br><span class="line">    x-=(x+m)/(lf)b[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    FOR(i,<span class="number">1</span>,n) read(a[i]);</span><br><span class="line">    FOR(i,<span class="number">1</span>,n) read(b[i]);</span><br><span class="line">    lf l=<span class="number">0</span>,r=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1e-6</span>) {</span><br><span class="line">        lf mid=(l+r)*<span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(l&gt;<span class="number">1e9</span>) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Rocket"><a href="#B-Rocket" class="headerlink" title="B. Rocket"></a>B. Rocket</h2><p>简单的交互题。</p>
<p>第一轮先每次都问$1$，问出这个位置是真还是假，然后二分答案就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"1"</span>);fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        read(a[i]);<span class="keyword">if</span>(!a[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=<span class="number">60</span>;i++) {</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,x;</span><br><span class="line">        write(mid);fflush(<span class="built_in">stdout</span>);read(x);</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==a[(i<span class="number">-1</span>)%m+<span class="number">1</span>]) l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Border"><a href="#C-Border" class="headerlink" title="C. Border"></a>C. Border</h2><p>小凯的疑惑。</p>
<p>先把所有数求$\gcd$，那么这就是我们可以凑出来的最小的非$0$数了，具体参见小凯的疑惑，两个互质的数$a,b$不可以凑出来的最小的数是$ab-a-b$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n,m,c[maxn][<span class="number">2</span>],f[maxn],g[maxn],op[maxn],vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);<span class="keyword">int</span> t=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),t=__gcd(t,a[i]);</span><br><span class="line">    <span class="keyword">int</span> x=t;</span><br><span class="line">    <span class="keyword">while</span>(!vis[x]) vis[x]=<span class="number">1</span>,x=(x+t)%m;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) ans+=vis[i];write(ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) <span class="keyword">if</span>(vis[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Mars-rover"><a href="#D-Mars-rover" class="headerlink" title="D. Mars rover"></a>D. Mars rover</h2><p>简单的$\rm tree\ dp$，设$f[i]$表示$i$的子树传上来的数，$g[i]$表示$i$这个点的结果反转，忽视$i$的子树，$1$的结果。</p>
<p>那么直接深搜暴力更新就好了，先更新$f$在更新$g$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n,m,c[maxn][<span class="number">2</span>],f[maxn],g[maxn],op[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(c[x][<span class="number">0</span>]) dfs(c[x][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(c[x][<span class="number">1</span>]) dfs(c[x][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> a=f[c[x][<span class="number">0</span>]],b=f[c[x][<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">if</span>(op[x]==<span class="number">1</span>) f[x]=a&amp;b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op[x]==<span class="number">2</span>) f[x]=a|b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op[x]==<span class="number">3</span>) f[x]=a^b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op[x]==<span class="number">4</span>) f[x]=!a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> e)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">int</span> o=op[fa];</span><br><span class="line">        <span class="keyword">if</span>(o==<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span>((f[e]&amp;(!f[x]))!=f[fa]) g[x]=g[fa];</span><br><span class="line">            <span class="keyword">else</span> g[x]=f[<span class="number">1</span>];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(o==<span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">if</span>((f[e]|(!f[x]))!=f[fa]) g[x]=g[fa];</span><br><span class="line">            <span class="keyword">else</span> g[x]=f[<span class="number">1</span>];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(o==<span class="number">3</span>) {</span><br><span class="line">            <span class="keyword">if</span>((f[e]^(!f[x]))!=f[fa]) g[x]=g[fa];</span><br><span class="line">            <span class="keyword">else</span> g[x]=f[<span class="number">1</span>];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(o==<span class="number">4</span>) g[x]=g[fa];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(c[x][<span class="number">0</span>]) dp(c[x][<span class="number">0</span>],x,c[x][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(c[x][<span class="number">1</span>]) dp(c[x][<span class="number">1</span>],x,c[x][<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'A'</span>) op[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'O'</span>) op[i]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'X'</span>) op[i]=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'N'</span>) op[i]=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> op[i]=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(op[i]&lt;=<span class="number">3</span>) read(c[i][<span class="number">0</span>]),read(c[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[i]==<span class="number">4</span>) read(c[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">else</span> read(f[i]);</span><br><span class="line">    }</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    g[<span class="number">1</span>]=!f[<span class="number">1</span>];</span><br><span class="line">    dp(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(op[i]==<span class="number">5</span>) <span class="built_in">putchar</span>(g[i]+<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Store"><a href="#E-Store" class="headerlink" title="E. Store"></a>E. Store</h2><p>$\rm kd\ tree$，不想写先咕着…</p>
<h2 id="F-Tree"><a href="#F-Tree" class="headerlink" title="F. Tree"></a>F. Tree</h2><p>这是一道毒瘤题。</p>
<p>设$v_i$表示第$i$个点的果子数，设$b_i=v_i-\sum_{x\in son}v_x$，显然依题意要满足$b_i\geqslant 0$。</p>
<p>根据差分的性质我们可以得到$\sum b_i=x$。</p>
<p>假设我们硬点树上剩下了$m$个点，则根据插板法$b_i$的方案数为$\displaystyle\binom{x+m-1}{m-1}$。</p>
<p>由于$b$唯一确定$v$，所以$v$的方案数也是这么多。</p>
<p>那么我们就考虑剩下$m$个点的方案数。</p>
<p>考虑一种暴力的$dp$，设$f[u][i]$表示$x$子树保留了$i$个点(包括$i$)的方案数，转移显然：</p>
<script type="math/tex; mode=display">
f[u][i]=\sum_{k=1}^{i-1}f[l][k]\cdot f[r][i-1-k]</script><p>写成生成函数就是：</p>
<script type="math/tex; mode=display">
F_u(x)=xF_l(x)F_r(x)+1</script><p>若$u$只有一个儿子也同理：</p>
<script type="math/tex; mode=display">
F_u(x)=xF_{son}(x)+1</script><p>若$u$为叶子则：</p>
<script type="math/tex; mode=display">
F_u(x)=x+1</script><p>证明显然。</p>
<p>考虑这个玩意怎么优化，显然如果$\rm NTT$优化复杂度$O(n^2\log n)$，这是我们无法接受的。</p>
<p>我们考虑对这棵树进行轻重链剖分，那么对于一条重链上的每个点我们假设求出了非重儿子的$F(x)$。</p>
<p>那么我们对这条重链进行编号，从顶端到叶子为$1\cdots c$，设$a_i=xF_{son_i}(x)$。</p>
<p>那么链顶的答案就是：</p>
<script type="math/tex; mode=display">
F_1(x)=xF_{son_1}(x)F_2(x)+1=a_1F_2(x)+1</script><p>我们递归的写完所有$c$个：</p>
<script type="math/tex; mode=display">
F_1(x)=a_1(a_2((\cdots(a_c+1))+1)+1)+1</script><p>暴力展开就是：</p>
<script type="math/tex; mode=display">
F_1(x)=a_1a_2\cdots a_c+a_1a_2\cdots a_{c-1}+\cdots+a_1+1</script><p>这个可以分治$\rm FFT$解决，代码大概长这样：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lt,<span class="keyword">int</span> rt,vec &amp;a,vec &amp;b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(lt==rt) <span class="keyword">return</span> a=b=r[lt],<span class="keyword">void</span>();</span><br><span class="line">    vec al,ar,bl,br;<span class="keyword">int</span> mid=(lt+rt)&gt;&gt;<span class="number">1</span>;solve(lt,mid,al,bl),solve(mid+<span class="number">1</span>,rt,ar,br);</span><br><span class="line">    b=poly::pmul(bl,br);a=poly::padd(poly::pmul(ar,bl),al);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>其中$al,ar$表示答案，$bl,br$表示区间乘积，其他的变量可以参考下下面的代码。</p>
<p>那么我们就解决了这个问题，因为总轻边的子树大小之和为$O(n\log n)$，所以总复杂度为$O(n\log ^3n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _sz(x) ((int)x.size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span>&lt;&lt;<span class="number">19</span>|<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x+y&gt;=mod?x+y-mod:x+y;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+mod:x-y;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> <span class="number">1l</span>l*x*y<span class="number">-1l</span>l*x*y/mod*mod;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=mul(a,a)) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=mul(res,a);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> poly {</span><br><span class="line">    <span class="keyword">int</span> N,w[maxn],pos[maxn],bit,mxn,t[<span class="number">2</span>][maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(mxn=<span class="number">1</span>;mxn&lt;=l;mxn&lt;&lt;=<span class="number">1</span>) ;</span><br><span class="line">        w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=qpow(<span class="number">3</span>,(mod<span class="number">-1</span>)/mxn);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=mxn;i++) w[i]=mul(w[i<span class="number">-1</span>],w[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> op)</span> </span>{</span><br><span class="line">        FOR(i,<span class="number">1</span>,N<span class="number">-1</span>) <span class="keyword">if</span>(pos[i]&gt;i) swap(r[pos[i]],r[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,d=mxn&gt;&gt;<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>,d&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++) {</span><br><span class="line">                    <span class="keyword">int</span> x=r[j+k],y=mul(r[i+j+k],w[k*d]);</span><br><span class="line">                    r[j+k]=add(x,y),r[i+j+k]=del(x,y);</span><br><span class="line">                }</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">-1</span>) {</span><br><span class="line">            reverse(r+<span class="number">1</span>,r+N);<span class="keyword">int</span> d=qpow(N,mod<span class="number">-2</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) r[i]=mul(r[i],d);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">vec <span class="title">pmul</span><span class="params">(vec a,vec b)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1l</span>l*_sz(a)*_sz(b)&lt;=<span class="number">5000</span>) {</span><br><span class="line">            vec c;c.resize(_sz(a)+_sz(b)<span class="number">-1</span>);</span><br><span class="line">            FOR(i,<span class="number">0</span>,_sz(a)<span class="number">-1</span>) FOR(j,<span class="number">0</span>,_sz(b)<span class="number">-1</span>) c[i+j]=add(c[i+j],mul(a[i],b[j]));</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">0</span>;N&lt;_sz(a)+_sz(b);N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">        FOR(i,<span class="number">0</span>,N<span class="number">-1</span>) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">        FOR(i,<span class="number">0</span>,_sz(a)<span class="number">-1</span>) t[<span class="number">0</span>][i]=a[i];FOR(i,_sz(a),N) t[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">        FOR(i,<span class="number">0</span>,_sz(b)<span class="number">-1</span>) t[<span class="number">1</span>][i]=b[i];FOR(i,_sz(b),N) t[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">        ntt(t[<span class="number">0</span>],<span class="number">1</span>),ntt(t[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">        FOR(i,<span class="number">0</span>,N<span class="number">-1</span>) t[<span class="number">0</span>][i]=mul(t[<span class="number">0</span>][i],t[<span class="number">1</span>][i]);</span><br><span class="line">        ntt(t[<span class="number">0</span>],<span class="number">-1</span>);vec c;</span><br><span class="line">        FOR(i,<span class="number">0</span>,_sz(a)+_sz(b)<span class="number">-1</span>) c.pb(t[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">vec <span class="title">padd</span><span class="params">(vec a,vec b)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(_sz(a)&gt;_sz(b)) {FOR(i,<span class="number">0</span>,_sz(b)<span class="number">-1</span>) a[i]=add(a[i],b[i]);<span class="keyword">return</span> a;}</span><br><span class="line">        FOR(i,<span class="number">0</span>,_sz(a)<span class="number">-1</span>) b[i]=add(a[i],b[i]);<span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ll k;</span><br><span class="line"><span class="keyword">int</span> n,ch[maxn],head[maxn],tot,sz[maxn],F[maxn],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">vec f[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    sz[x]=<span class="number">1</span>;F[x]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x],v;i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>((v=e[i].to)!=fa) {dfs(v,x);sz[x]+=sz[v];<span class="keyword">if</span>(sz[ch[x]]&lt;sz[v]) ch[x]=v;}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lt,<span class="keyword">int</span> rt,vec &amp;a,vec &amp;b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(lt==rt) <span class="keyword">return</span> a=b=r[lt],<span class="keyword">void</span>();</span><br><span class="line">    vec al,ar,bl,br;<span class="keyword">int</span> mid=(lt+rt)&gt;&gt;<span class="number">1</span>;solve(lt,mid,al,bl),solve(mid+<span class="number">1</span>,rt,ar,br);</span><br><span class="line">    b=poly::pmul(bl,br);a=poly::padd(poly::pmul(ar,bl),al);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">vec <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=x;t;t=ch[t]) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[t];i;i=e[i].nxt) <span class="keyword">if</span>(e[i].to!=F[t]&amp;&amp;e[i].to!=ch[t]) f[t]=dfs2(e[i].to);</span><br><span class="line">        <span class="keyword">if</span>(_sz(f[t])&lt;<span class="number">1</span>) f[t].resize(<span class="number">1</span>);f[t][<span class="number">0</span>]++;</span><br><span class="line">        f[t].insert(f[t].begin(),<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    cnt=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span> t=x;t;t=ch[t]) r[++cnt]=f[t];</span><br><span class="line">    vec a,b;solve(<span class="number">1</span>,cnt,a,b);<span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;k);poly::init(n&lt;&lt;<span class="number">1</span>);k%=mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),ins(x,y),ins(y,x);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);vec res=dfs2(<span class="number">1</span>);<span class="keyword">int</span> t=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;_sz(res);i++) {</span><br><span class="line">        ans=add(ans,mul(res[i],t));</span><br><span class="line">        t=mul(t,mul((k+i)%mod,qpow(i,mod<span class="number">-2</span>)));</span><br><span class="line">    }write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>dp</tag>
        <tag>二分</tag>
        <tag>交互</tag>
        <tag>FFT</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 556 (Div. 1)</title>
    <url>/2019/09/03/Codeforces%20Round%20556%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1149/problem/C" target="_blank" rel="noopener">https://codeforces.com/contest/1149/problem/C</a></p>
<a id="more"></a>
<h2 id="C-Tree-Generator™"><a href="#C-Tree-Generator™" class="headerlink" title="C. Tree Generator™"></a>C. Tree Generator™</h2><p>考虑$\rm LCA$的一种求法，即如果要求$x,y$的$\rm LCA$，我们把括号序列写下来，左括号为$1$右括号为$-1$统计一遍前缀和，$x,y$之间最小的那个就是$\rm LCA$的深度。</p>
<p>那么两点距离就是$x,y$的深度和减去两倍$\rm LCA$的深度。</p>
<p>所以直径就是所有点对中最大的那个。</p>
<p>那么用线段树维护这个前缀和就好了，每次修改就在树上区间修改，询问就多记录几个信息。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> {</span><span class="keyword">int</span> ab,bc,mx,mn,res;}t[maxn];</span><br><span class="line"><span class="keyword">int</span> tag[maxn],a[maxn],n,q;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    t[p].mx=max(t[ls].mx,t[rs].mx);</span><br><span class="line">    t[p].mn=min(t[ls].mn,t[rs].mn);</span><br><span class="line">    t[p].ab=max(max(t[ls].ab,t[rs].ab),t[ls].mx-t[rs].mn*<span class="number">2</span>);</span><br><span class="line">    t[p].bc=max(max(t[ls].bc,t[rs].bc),t[rs].mx-t[ls].mn*<span class="number">2</span>);</span><br><span class="line">    t[p].res=max(max(t[ls].res,t[rs].res),max(t[ls].mx+t[rs].bc,t[ls].ab+t[rs].mx));</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    t[p].mx+=x,t[p].mn+=x;</span><br><span class="line">    t[p].ab-=x,t[p].bc-=x;tag[p]+=x;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(tag[p]) push(ls,tag[p]),push(rs,tag[p]),tag[p]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> push(p,v),<span class="keyword">void</span>();</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,y,v);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) modify(rs,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">    update(p);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[p].mn=t[p].mx=a[l],t[p].ab=t[p].bc=-a[l],<span class="keyword">void</span>();</span><br><span class="line">    build(ls,l,mid),build(rs,mid+<span class="number">1</span>,r);update(p);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(l==r) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,t[p].mn);</span><br><span class="line">    }<span class="keyword">else</span> pushdown(p),debug(ls,l,mid),debug(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);n=(n<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=a[i<span class="number">-1</span>]+(s[i]==<span class="string">'('</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);write(t[<span class="number">1</span>].res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> a,b;read(a),read(b);</span><br><span class="line">        <span class="keyword">if</span>(s[a]!=s[b]) {</span><br><span class="line">            modify(<span class="number">1</span>,<span class="number">1</span>,n,a,n,s[a]==<span class="string">'('</span>?<span class="number">-2</span>:<span class="number">2</span>);</span><br><span class="line">            modify(<span class="number">1</span>,<span class="number">1</span>,n,b,n,s[b]==<span class="string">'('</span>?<span class="number">-2</span>:<span class="number">2</span>);swap(s[a],s[b]);</span><br><span class="line">        }write(t[<span class="number">1</span>].res);</span><br><span class="line">        <span class="comment">// debug(1,1,n);puts("");</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Abandoning-Roads"><a href="#D-Abandoning-Roads" class="headerlink" title="D. Abandoning Roads"></a>D. Abandoning Roads</h2><p>神题。。我又是看了题解才会的。。。</p>
<p>注意到只有两种边权，先把所有$a$的边缩起来，然后在拿剩下的$b$边连出一棵树就是最小生成树。</p>
<p>那么一条路径在最小生成树上一定会满足只经过每个$a$的连通块一次。</p>
<p>所以如果直接状压，设$a$的连通块个数为$x$，设$f_{s,x}$表示当前经过了$s$这个状态的块，当前在$x$的最小距离，状态数就是$O(2^x\cdot n)$。</p>
<p>然后转移的时候使用最短路就好了，注意我们要忽略掉所有两个端点在同一个块内的$b$边，因为这种边不会出现在最小生成树内，同理不能通过$b$边走到一个走过的连通块。</p>
<p>显然这个东西会被卡成$2^n$，我们需要一些优化。</p>
<p>注意到如果一个连通块的大小$\leqslant 3$，那么我们其实不需要这个块的状态，因为我们跑最短路的时候至少通过两条$b$边才能从这个块的一个点到另一个点，但这样显然不优，因为这个块两两之间至多两条$a$边就能到达。</p>
<p>所以最短路的过程会保证这种块只走一次。</p>
<p>那么状态数就是$O(2^{n/4}\cdot n)$，复杂度是$O(2^{n/4}\cdot m\log (2^{n/4}\cdot n))$，其实后面那个$\log$能优化掉，但是不优化也只要跑$\rm 400ms$就算了（</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[(<span class="number">1</span>&lt;&lt;<span class="number">17</span>)+<span class="number">10</span>][<span class="number">75</span>];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],head[maxn],tot,n,m,a,b,cnt[maxn],bel[maxn],id[maxn],re[maxn],c,ans[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[<span class="number">1000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> {</span></span><br><span class="line">    <span class="keyword">int</span> v,s;short x;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> data &amp;r) <span class="keyword">const</span> {<span class="keyword">return</span> v&lt;r.v;}</span><br><span class="line">};</span><br><span class="line">priority_queue&lt;data &gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(a),read(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=m;i++) {</span><br><span class="line">        read(x),read(y),read(z),ins(x,y,z),ins(y,x,z);</span><br><span class="line">        <span class="keyword">if</span>(z==a) <span class="keyword">if</span>(find(x)!=find(y)) fa[find(x)]=find(y);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cnt[find(i)]++,bel[i]=find(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(cnt[i]&lt;=<span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">        id[i]=++c;</span><br><span class="line">    }<span class="built_in">memset</span>(f,<span class="number">63</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">63</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">    <span class="keyword">int</span> _=<span class="number">1</span>&lt;&lt;(id[bel[<span class="number">1</span>]]<span class="number">-1</span>);<span class="keyword">if</span>(!id[bel[<span class="number">1</span>]]) _=<span class="number">0</span>;</span><br><span class="line">    f[_][<span class="number">1</span>]=<span class="number">0</span>;q.push((data){<span class="number">0</span>,_,<span class="number">1</span>});</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        data x=q.top();q.pop();ans[x.x]=min(ans[x.x],f[x.s][x.x]);</span><br><span class="line">        <span class="keyword">if</span>(x.v&gt;f[x.s][x.x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x.x];i;i=e[i].nxt) {</span><br><span class="line">            v=e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(e[i].w==b&amp;&amp;bel[x.x]==bel[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(id[bel[v]]&amp;&amp;e[i].w==b&amp;&amp;(x.s&amp;(<span class="number">1</span>&lt;&lt;(id[bel[v]]<span class="number">-1</span>)))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> t;<span class="keyword">if</span>(!id[bel[v]]) t=x.s;<span class="keyword">else</span> t=x.s|(<span class="number">1</span>&lt;&lt;(id[bel[v]]<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">if</span>(f[t][v]&lt;=f[x.s][x.x]+e[i].w) <span class="keyword">continue</span>;</span><br><span class="line">            f[t][v]=f[x.s][x.x]+e[i].w,q.push((data){-f[t][v],t,v});</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Election-Promises"><a href="#E-Election-Promises" class="headerlink" title="E. Election Promises"></a>E. Election Promises</h2><p>去瞄了一眼题解好像是什么$\rm SG$。。。完全不会，咕咕咕。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>线段树</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 576 (Div. 1)</title>
    <url>/2019/09/03/Codeforces%20Round%20576%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1199" target="_blank" rel="noopener">https://codeforces.com/contest/1199</a></p>
<a id="more"></a>
<p>虽然我打的是$\rm Div. ~2$但是因为$\rm Div. ~2$前两题实在是太水了这里就不说了。。</p>
<p>不过涨了一百来rating还行（我果然分还是太低了）</p>
<h2 id="A-MP3"><a href="#A-MP3" class="headerlink" title="A. MP3"></a>A. MP3</h2><p>算出可以接受的最大种类数然后对着题意模拟吧。。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> t[maxn],a[maxn],r[maxn],n,m,pre[maxn],suf[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),m&lt;&lt;=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]),r[i]=a[i];</span><br><span class="line">    sort(r+<span class="number">1</span>,r+n+<span class="number">1</span>);<span class="keyword">int</span> l=unique(r+<span class="number">1</span>,r+n+<span class="number">1</span>)-r<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=lower_bound(r+<span class="number">1</span>,r+l+<span class="number">1</span>,a[i])-r,t[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pre[i]=pre[i<span class="number">-1</span>]+t[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) suf[i]=suf[i+<span class="number">1</span>]+t[i];</span><br><span class="line">    <span class="keyword">if</span>(m/n&gt;=<span class="number">20</span>||(<span class="number">1</span>&lt;&lt;(m/n))&gt;=l) {<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>),<span class="number">0</span>;}</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>&lt;&lt;(m/n),ans=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">        ans=min(ans,pre[i<span class="number">-1</span>]+suf[i+k]);</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Welfare-State"><a href="#B-Welfare-State" class="headerlink" title="B. Welfare State"></a>B. Welfare State</h2><p>好像有$O(n)$的做法但是我直接拿线段树暴力模拟了。。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[maxn],q;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> tag[maxn],mn[maxn];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_tag</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="comment">// printf("push_tag :: %d %d\n",p,v);</span></span><br><span class="line">        <span class="keyword">if</span>(tag[p]&gt;=v) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(mn[p]&gt;=v) <span class="keyword">return</span> ;</span><br><span class="line">        tag[p]=v,mn[p]=v;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(tag[p]==<span class="number">-1</span>) <span class="keyword">return</span> ;</span><br><span class="line">        push_tag(ls,tag[p]),push_tag(rs,tag[p]);</span><br><span class="line">        tag[p]=<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cover</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(mn[p]&gt;=v) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> push_tag(p,v),<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) cover(ls,l,mid,x,y,v);</span><br><span class="line">        <span class="keyword">if</span>(y&gt;mid) cover(rs,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">        mn[p]=min(mn[ls],mn[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> tag[p]=<span class="number">-1</span>,mn[p]=v,<span class="keyword">void</span>();</span><br><span class="line">        pushdown(p);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> modify(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        mn[p]=min(mn[ls],mn[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="built_in">printf</span>(<span class="string">"%d "</span>,mn[p]);</span><br><span class="line">        <span class="keyword">else</span> pushdown(p),print(ls,l,mid),print(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">        tag[p]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r) mn[p]=a[l];</span><br><span class="line">        <span class="keyword">else</span> build(ls,l,mid),build(rs,mid+<span class="number">1</span>,r),mn[p]=min(mn[ls],mn[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"debug :: %d %d %d %d\n"</span>,l,r,tag[p],mn[p]);</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">else</span> debug(ls,l,mid),debug(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    }</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    T.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">while</span>(q--) {</span><br><span class="line">        <span class="keyword">int</span> op,x,y;read(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) read(x),read(y),T.modify(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">        <span class="keyword">else</span> read(x),T.cover(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,n,x);</span><br><span class="line">        <span class="comment">// printf("----------\n");</span></span><br><span class="line">        <span class="comment">// T.debug(1,1,n);</span></span><br><span class="line">    }T.print(<span class="number">1</span>,<span class="number">1</span>,n);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Matching-vs-Independent-Set"><a href="#C-Matching-vs-Independent-Set" class="headerlink" title="C. Matching vs Independent Set"></a>C. Matching vs Independent Set</h2><p>我们把边全连起来同时暴力的找到一个匹配，也就是每次判当前这条边能不能用，如果能就打个标记顺便标记下两个点。</p>
<p>那么如果匹配数$\geqslant n$就做完了，否则一定只有小于等于$2n$个点被标记了，剩下的就是独立集。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> d[maxn],c[maxn],n,m;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);<span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> x,y;read(x),read(y);</span><br><span class="line">        <span class="keyword">if</span>(!d[x]&amp;&amp;!d[y]) d[x]++,d[y]++,c[i]=<span class="number">1</span>,t++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(t&gt;=n) {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Matching"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(c[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i),p++;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"IndSet"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!d[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i),p++;</span><br><span class="line">    }<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>*n;i++) d[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) c[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t;read(t);<span class="keyword">while</span>(t--) solve(),clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Rectangle-Painting-1"><a href="#D-Rectangle-Painting-1" class="headerlink" title="D. Rectangle Painting 1"></a>D. Rectangle Painting 1</h2><p>大水题。。直接$dp$就好了。</p>
<p>$f_{x1,y1,x2,y2}$表示当前矩形的答案，显然每次要么把这个矩形涂满要么剖成两半转移。</p>
<p>我写了个记搜结果跑的好慢啊。。。不过记搜是真的好写。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> c[<span class="number">52</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">52</span>][<span class="number">52</span>][<span class="number">52</span>][<span class="number">52</span>],s[<span class="number">52</span>][<span class="number">52</span>],n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> &amp;r=f[x1][x2][y1][y2];</span><br><span class="line">    <span class="keyword">if</span>(x1==x2&amp;&amp;y1==y2) <span class="keyword">return</span> r=s[x1][y1];</span><br><span class="line">    <span class="keyword">if</span>(r&lt;<span class="number">1e9</span>) <span class="keyword">return</span> r;</span><br><span class="line">    r=max(x2-x1+<span class="number">1</span>,y2-y1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x1;i&lt;=x2<span class="number">-1</span>;i++)</span><br><span class="line">        r=min(r,dfs(x1,y1,i,y2)+dfs(i+<span class="number">1</span>,y1,x2,y2));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y1;i&lt;=y2<span class="number">-1</span>;i++)</span><br><span class="line">        r=min(r,dfs(x1,y1,x2,i)+dfs(x1,i+<span class="number">1</span>,x2,y2));</span><br><span class="line">    <span class="comment">// printf("dfs ::  %d %d %d %d %d\n",x1,y1,x2,y2,r);</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) s[i][j]=c[j]==<span class="string">'#'</span>;</span><br><span class="line">    }<span class="built_in">memset</span>(f,<span class="number">63</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    write(dfs(<span class="number">1</span>,<span class="number">1</span>,n,n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Rectangle-Painting-2"><a href="#E-Rectangle-Painting-2" class="headerlink" title="E. Rectangle Painting 2"></a>E. Rectangle Painting 2</h2><p>这差不多就是原题了吧。。可以参考一下：[HNOI2013]消毒。</p>
<p>思想就是每次消一整行或一整列，那么如果$n$不大，我们可以建二分图，左边表示每行，右边是列，每个黑点就弄一条边连向对应行列，答案就是最小点覆盖。</p>
<p>$n$大的话离散化之后就变成了有点权的点覆盖，可以用最小割做。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,head[maxn],tot=<span class="number">1</span>,c[<span class="number">102</span>][<span class="number">102</span>],rx[maxn],ry[maxn],s,t,dis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> {</span><span class="keyword">int</span> x,y,xx,yy;}a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">int</span> *r)</span> </span>{  </span><br><span class="line">    r[++r[<span class="number">0</span>]]=<span class="number">0</span>,r[++r[<span class="number">0</span>]]=n;</span><br><span class="line">    sort(r+<span class="number">1</span>,r+r[<span class="number">0</span>]+<span class="number">1</span>);r[<span class="number">0</span>]=unique(r+<span class="number">1</span>,r+r[<span class="number">0</span>]+<span class="number">1</span>)-r<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=r[0];i++) printf("%d ",r[i]);puts("");</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> *r)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> lower_bound(r+<span class="number">1</span>,r+r[<span class="number">0</span>]+<span class="number">1</span>,x)-r;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{add(u,v,w),add(v,u,<span class="number">0</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q;<span class="built_in">memset</span>(dis,<span class="number">-1</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">    q.push(s);dis[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(e[i].w&gt;<span class="number">0</span>&amp;&amp;dis[e[i].to]==<span class="number">-1</span>) {</span><br><span class="line">                dis[e[i].to]=dis[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(e[i].to==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                q.push(e[i].to);</span><br><span class="line">            }</span><br><span class="line">    }<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x==t) <span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].w&gt;<span class="number">0</span>&amp;&amp;dis[e[i].to]==dis[x]+<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">int</span> d=dfs(e[i].to,min(f,e[i].w));</span><br><span class="line">            e[i].w-=d,e[i^<span class="number">1</span>].w+=d,used+=d,f-=d;</span><br><span class="line">            <span class="keyword">if</span>(!f) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">if</span>(!used) dis[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs()) flow+=dfs(s,inf);</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        read(a[i].x),read(a[i].y),read(a[i].xx),read(a[i].yy);</span><br><span class="line">        rx[++rx[<span class="number">0</span>]]=a[i].x<span class="number">-1</span>,rx[++rx[<span class="number">0</span>]]=a[i].xx;</span><br><span class="line">        ry[++ry[<span class="number">0</span>]]=a[i].y<span class="number">-1</span>,ry[++ry[<span class="number">0</span>]]=a[i].yy;</span><br><span class="line">    }</span><br><span class="line">    prepare(rx),prepare(ry);s=rx[<span class="number">0</span>]+ry[<span class="number">0</span>]+<span class="number">3</span>,t=s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;rx[<span class="number">0</span>];i++) ins(s,i,rx[i+<span class="number">1</span>]-rx[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;ry[<span class="number">0</span>];i++) ins(i+rx[<span class="number">0</span>],t,ry[i+<span class="number">1</span>]-ry[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        a[i].x=get(a[i].x<span class="number">-1</span>,rx),a[i].xx=get(a[i].xx,rx);</span><br><span class="line">        a[i].y=get(a[i].y<span class="number">-1</span>,ry),a[i].yy=get(a[i].yy,ry);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=a[i].x+<span class="number">1</span>;k&lt;=a[i].xx;k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l=a[i].y+<span class="number">1</span>;l&lt;=a[i].yy;l++)</span><br><span class="line">                c[k<span class="number">-1</span>][l<span class="number">-1</span>]=<span class="number">1</span>;<span class="comment">//,printf("%d %d\n",k-1,l-1);</span></span><br><span class="line">    }<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;rx[<span class="number">0</span>];i++)</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;ry[<span class="number">0</span>];j++)</span><br><span class="line">             <span class="keyword">if</span>(c[i][j]) ins(i,j+rx[<span class="number">0</span>],inf);</span><br><span class="line">    write(max_flow());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-GCD-Groups-2"><a href="#F-GCD-Groups-2" class="headerlink" title="F. GCD Groups 2"></a>F. GCD Groups 2</h2><p>大神题。。我弄了挺久才弄明白。</p>
<p>首先注意到一个数最多只有$k=9$个质因子。</p>
<p>假设我们现在知道了$a,b$在不同的集合，那么我们可以考虑消除每个质因子的影响。</p>
<p>那么可以直接$dp$，设$f_{s,t}$表示左边集合$k$个质因子状态为$s$，其中$0/1$表示有没有被消除，右边为$t$。</p>
<p>那么每次枚举状态，枚举当前数放左边还是右边就好了。</p>
<p>这样$dp$复杂度是$O(2^{2k}\cdot n)$的。</p>
<p>注意到我们一个集合至多只有$k+1$个有用的数，也就是说我们可以把其中的一个集合缩减到$k+1$个数，其他的扔到另一个集合里，方案仍然合法。</p>
<p>所以如果我们任选$a,b$，错误的概率为$\frac{k+1}{n}$。</p>
<p>所以我们直接随机化这个算法，期望只需要做$O(\frac{n}{n-k+1})$次，因为$k$是常数所以这就是$O(1)$次。</p>
<p>那么我们得到了一个$O(2^{2k}\cdot n)$做法。</p>
<p>考虑怎么优化，显然对于一个质因子至多只有$k$个数是有用的，那么一共只有$k^2$个数有用，剩下的都可以随便放。</p>
<p>所以总复杂度为$O(2^{2k}\cdot k^2+n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> r[maxn],n,f[<span class="number">1100</span>][<span class="number">1100</span>],tt[maxn],w[<span class="number">2</span>][<span class="number">1000</span>],c[<span class="number">2</span>][<span class="number">1000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> {</span><span class="keyword">int</span> s,t,w;}pre[<span class="number">1100</span>][<span class="number">1100</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factorize</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> *a)</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,(<span class="keyword">sizeof</span> x)*<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++) {</span><br><span class="line">        <span class="keyword">if</span>(x%i) <span class="keyword">continue</span>;</span><br><span class="line">        a[++a[<span class="number">0</span>]]=i;</span><br><span class="line">        <span class="keyword">while</span>(x%i==<span class="number">0</span>) x/=i;</span><br><span class="line">    }<span class="keyword">if</span>(x!=<span class="number">1</span>) a[++a[<span class="number">0</span>]]=x;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="keyword">sizeof</span> w);</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span> p);</span><br><span class="line">    factorize(r[a],w[<span class="number">0</span>]),factorize(r[b],w[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// printf("factor ");for(int i=1;i&lt;=w[0][0];i++) printf("%d ",w[0][i]);puts("");</span></span><br><span class="line">    <span class="comment">// printf("factor ");for(int i=1;i&lt;=w[1][0];i++) printf("%d ",w[1][i]);puts("");</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(i==a||i==b) <span class="keyword">continue</span>;<span class="keyword">int</span> bo=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">0</span>;o&lt;=<span class="number">1</span>;o++) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=w[o][<span class="number">0</span>];k++)</span><br><span class="line">                <span class="keyword">if</span>(r[i]%w[o][k]) {</span><br><span class="line">                    <span class="keyword">if</span>(c[o][k]==w[o^<span class="number">1</span>][<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                    c[o][k]++,bo=<span class="number">1</span>,p[++p[<span class="number">0</span>]]=i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            <span class="keyword">if</span>(bo) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    prepare(a,b);</span><br><span class="line">    <span class="built_in">memset</span>(tt,<span class="number">0</span>,<span class="keyword">sizeof</span> tt);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">int</span> k1=w[<span class="number">0</span>][<span class="number">0</span>],k2=w[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    f[(<span class="number">1</span>&lt;&lt;k1)<span class="number">-1</span>][(<span class="number">1</span>&lt;&lt;k2)<span class="number">-1</span>]=<span class="number">1</span>;tt[a]=<span class="number">1</span>,tt[b]=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=p[0];i++) printf("%d ",p[i]);puts("");</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];i++) {</span><br><span class="line">        <span class="keyword">int</span> s1=(<span class="number">1</span>&lt;&lt;k1)<span class="number">-1</span>,t1=(<span class="number">1</span>&lt;&lt;k2)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k1;j++) <span class="keyword">if</span>(r[p[i]]%w[<span class="number">0</span>][j]) s1^=<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k2;j++) <span class="keyword">if</span>(r[p[i]]%w[<span class="number">1</span>][j]) t1^=<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;<span class="number">1</span>&lt;&lt;k1;s++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">1</span>&lt;&lt;k2;t++) {</span><br><span class="line">                <span class="keyword">if</span>(!f[s][t]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(!f[s&amp;s1][t]) f[s&amp;s1][t]=<span class="number">1</span>,pre[s&amp;s1][t]=(data){s,t,p[i]};</span><br><span class="line">                <span class="keyword">if</span>(!f[s][t&amp;t1]) f[s][t&amp;t1]=<span class="number">1</span>,pre[s][t&amp;t1]=(data){s,t,p[i]};</span><br><span class="line">            }</span><br><span class="line">    }<span class="keyword">if</span>(!f[<span class="number">0</span>][<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(s==(<span class="number">1</span>&lt;&lt;k1)<span class="number">-1</span>&amp;&amp;t==(<span class="number">1</span>&lt;&lt;k2)<span class="number">-1</span>)) {</span><br><span class="line">        data d=pre[s][t];</span><br><span class="line">        <span class="keyword">if</span>(s!=d.s) tt[d.w]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tt[d.w]=<span class="number">2</span>;</span><br><span class="line">        s=d.s,t=d.t;<span class="comment">//printf("get :: %d %d %d\n",s,t,d.w);</span></span><br><span class="line">    }<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(r[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> T=<span class="number">1</span>;T&lt;=<span class="number">10</span>;T++) {</span><br><span class="line">        <span class="keyword">int</span> a=rand()%n+<span class="number">1</span>,b=rand()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a==b) <span class="keyword">continue</span>;<span class="comment">//printf("fuckpps :: %d %d\n",a,b);</span></span><br><span class="line">        <span class="keyword">if</span>(!dp(a,b)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,tt[i]?tt[i]:<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>线段树</tag>
        <tag>网络流</tag>
        <tag>随机化</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 580 (Div. 1)</title>
    <url>/2019/09/03/Codeforces%20Round%20580%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1205" target="_blank" rel="noopener">https://codeforces.com/contest/1205</a></p>
<a id="more"></a>
<h2 id="A-Almost-Equal"><a href="#A-Almost-Equal" class="headerlink" title="A. Almost Equal"></a>A. Almost Equal</h2><p>随便构造一下吧…太水了不说了，放个代码吧。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);<span class="keyword">if</span>(!(n&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">1</span>;i&lt;=n;i++,p^=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(p) a[i]=i;</span><br><span class="line">        <span class="keyword">else</span> a[i]=n*<span class="number">2</span>-i+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>+n,p=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++,p^=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(p) a[i]=a[i-n]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> a[i]=a[i-n]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Shortest-Cycle"><a href="#B-Shortest-Cycle" class="headerlink" title="B. Shortest Cycle"></a>B. Shortest Cycle</h2><p>很显然可以发现每一位至多只能有两个数这一位是$1$，否则我们就得到了一个最小的长度为$3$的环。</p>
<p>那么一共就只有$100$多个点了，直接$\rm floyd$找最小环就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">150</span>][<span class="number">150</span>],n,a[maxn],w[<span class="number">150</span>][<span class="number">150</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> a&gt;b;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);<span class="keyword">while</span>(n&amp;&amp;a[n]==<span class="number">0</span>) n--;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">130</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"3"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) </span><br><span class="line">            dis[i][j]=w[i][j]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>((a[i]&amp;a[j])&amp;&amp;i!=j) dis[i][j]=w[i][j]=<span class="number">1</span>;<span class="comment">//,printf("%d %d\n",i,j);</span></span><br><span class="line">    <span class="keyword">int</span> ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">                ans=min(ans,dis[i][j]+w[i][k]+w[k][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">    }write(ans==inf?<span class="number">-1</span>:ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Palindromic-Paths"><a href="#C-Palindromic-Paths" class="headerlink" title="C. Palindromic Paths"></a>C. Palindromic Paths</h2><p>好多细节然后比赛的时候没写出来。。。</p>
<p>首先可以发现我们可以先处理出每个$i+j$为偶数的点，然后假设$(1,2)$为$0$，也能处理出$i+j$为奇数的点。</p>
<p>现在得到的这张图如果错误只有可能是所有奇数点反过来了。</p>
<p>我们一定能在主对称轴上找到一个$3\times 3$的矩形满足$s_{i,i}=1,s_{i+2,i+2}=0,i\%2=1$，其中矩形是$(i,i)\sim (i+2,i+2)$，$s$表示当前点的值。</p>
<p>那么我们就把问题转化成了$n=3$。</p>
<p>那么我们询问$(1,1),(2,3)$和$(1,2),(3,3)$，然后随便判一下就好了（细节真的多。。），具体参考下代码。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> s[<span class="number">55</span>][<span class="number">55</span>],n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> xx,<span class="keyword">int</span> yy)</span> </span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"? %d %d %d %d\n"</span>,x,y,xx,yy);fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> bo;read(bo);<span class="keyword">return</span> bo;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> xx,<span class="keyword">int</span> yy)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(query(x,y,xx,yy)) s[xx][yy]=s[x][y];</span><br><span class="line">    <span class="keyword">else</span> s[xx][yy]=!s[x][y];</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line"> </span><br><span class="line">    s[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    get(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),get(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>),get(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>),get(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    get(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>),get(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);s[<span class="number">2</span>][<span class="number">1</span>]=query(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)?s[<span class="number">2</span>][<span class="number">3</span>]:!s[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++) get(i<span class="number">-2</span>,j,i,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">4</span>;j&lt;=n;j++) get(i,j<span class="number">-2</span>,i,j);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">if</span>(!(s[i][i]==<span class="number">1</span>&amp;&amp;s[i+<span class="number">2</span>][i+<span class="number">2</span>]==<span class="number">0</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(query(i,i,i+<span class="number">1</span>,i+<span class="number">2</span>)) p=!s[i+<span class="number">1</span>][i+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(query(i,i+<span class="number">1</span>,i+<span class="number">2</span>,i+<span class="number">2</span>)) p=s[i][i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span>(s[i][i+<span class="number">1</span>]==s[i+<span class="number">1</span>][i+<span class="number">2</span>]) p=s[i][i+<span class="number">1</span>]==s[i][i+<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">else</span> p=!s[i][i+<span class="number">1</span>];</span><br><span class="line">        }<span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"!"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++,<span class="built_in">puts</span>(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>((i+j<span class="number">-1</span>)&amp;<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>,s[i][j]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>,s[i][j]^p);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Almost-All"><a href="#D-Almost-All" class="headerlink" title="D. Almost All"></a>D. Almost All</h2><p>挺神的题。。反正我没想到</p>
<p>首先考虑个子问题，假设我们现在有棵$n$个点的数，如何凑出$[0,n-1]$。</p>
<p>那么假设根节点有$k$个儿子分别为$x_1..x_k$，那么对于某个儿子$x_p$给这条边附上$1+\sum_{i=1}^{p-1}sz_{x_i}$的权值，然后递归做子问题就好了，正确性显然。</p>
<p>那么如果我们能找到一个点，然后把这个点的儿子分成两份，假设前一份$sz$之和为$a$，后一份为$b$，我们就可以凑出$ab+a-1$个值，因为我们可以把后一份整体乘上$a+1$。</p>
<p>那么这个数最大显然是要$a,b$越接近越好，所以如果选定一个点，那么我们每次把最小的两个儿子合并一定最优。</p>
<p>可以发现如果我们选重心可以最大化这个东西：</p>
<ul>
<li>如果当前有$4$个儿子，并且每个都小于$n/2$，那么显然合法。</li>
<li>如果只有三个，最大的那个一定会大于$n/3$小于$n/2$，把两个小的合并就合法了。</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> rt,f[maxn],sz[maxn],head[maxn],tot,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    sz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) get_rt(e[i].to,x),sz[x]+=sz[e[i].to],f[x]=max(f[x],sz[e[i].to]);</span><br><span class="line">    f[x]=max(f[x],n-sz[x]);</span><br><span class="line">    <span class="keyword">if</span>(f[x]&lt;f[rt]) rt=x;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; &gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_ans</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> t)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(e[i].to!=fa) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %lld\n"</span>,x,e[i].to,<span class="number">1l</span>l*p*t);</span><br><span class="line">            put_ans(e[i].to,x,t);p+=sz[e[i].to];</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"1 2 1"</span>),<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x,y,i=<span class="number">1</span>;i&lt;n;i++) read(x),read(y),ins(x,y),ins(y,x);</span><br><span class="line">    f[rt]=<span class="number">1e9</span>;get_rt(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> x=rt;<span class="comment">//write(x);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt)</span><br><span class="line">        get_rt(v=e[i].to,x),q.push(mp(-sz[v],v));</span><br><span class="line">    <span class="keyword">while</span>(q.size()&gt;<span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">int</span> x=q.top().sc,a=q.top().fr;q.pop();</span><br><span class="line">        <span class="keyword">int</span> y=q.top().sc,b=q.top().fr;q.pop();</span><br><span class="line">        fa[find(y)]=find(x);</span><br><span class="line">        q.push(mp(a+b,x));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> a=q.top().sc,s=-q.top().fr;q.pop();</span><br><span class="line">    <span class="keyword">int</span> b=q.top().sc;q.pop();<span class="comment">//if(n==400) write(s);</span></span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(find(e[i].to)==a) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,x,e[i].to,p);</span><br><span class="line">            put_ans(e[i].to,x,<span class="number">1</span>),p+=sz[e[i].to];</span><br><span class="line">        }</span><br><span class="line">    p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(find(e[i].to)==b) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %lld\n"</span>,x,e[i].to,<span class="number">1l</span>l*p*(s+<span class="number">1</span>));</span><br><span class="line">            put_ans(e[i].to,x,s+<span class="number">1</span>),p+=sz[e[i].to];</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Expected-Value-Again"><a href="#E-Expected-Value-Again" class="headerlink" title="E. Expected Value Again"></a>E. Expected Value Again</h2><p>显然可以发现如果串$s$有一个长度为$i$的答案，那么当且仅当$s$有一个长度为$|s|-i$的循环节。</p>
<p>设$p_x(s)$表示$s$有没有长度为$x$的循环节，有为$1$，否则为$0$。</p>
<p>那么答案可以写成$E((p_1(s)+p_2(s)+\cdots +p_{n-1}(s))^2)$。</p>
<p>那么根据期望的线性性，直接把里面展开答案就是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}\sum_{j=1}^{n}E(p_i(s)p_j(s))</script><p>也就是说对于一个$i,j$，如果$s$同时有长度为$i,j$的循环节就会给期望贡献一种方案，假设我们把所有必须相等的位置连边，就会给期望一个$k^{cnt-n}$的贡献，其中$cnt$是连通块的个数。</p>
<p>这里假设$i&gt;j$，否则也是一样的。</p>
<p>那么我们可以把这$n$个位置分成$i$组写成一个环，也就是$\bmod i $的剩余系。</p>
<p>那么$i$的关系以及处理完了，我们需要在这个环上面连边，也就是$x$向$(x+j) \bmod i$连边。</p>
<p>如果$i+j\leqslant n$，那么环上每个点都能向后连边，显然会构成$\gcd(i,j)$个连通块。</p>
<p>否则环上只有前$n-j$个点可以连边，我们考虑能形成多少个环，假设有$c$个，那么答案就是$n-(n-i)-(n-j)+c=i+j-n+c$。</p>
<p>画个图就知道，第一条连成环的边起点是$i-\gcd(i,j)+1$，所以一共会连成$\max(0,n-j-(i-\gcd(i,j)+1)+1)$。</p>
<p>那么代上去答案就是$\max(i+j-n,\gcd(i,j))$。</p>
<p>那么整合一下上面的东西，题目求的答案就是：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{n}\sum_{j=1}^{n}k^{\max(i+j-n,\gcd(i,j))-n}</script><p><del>然后大力出奇迹就好了</del>，其实后面的计算并不是重点，稍微说一下吧。</p>
<p>考虑枚举$\gcd(i,j)$和$i+j$的值：</p>
<script type="math/tex; mode=display">
k^{-n}\sum_{d=1}^{n-1}\sum_{s=1}^{2n-2}k^{\max(s-n,d)}cnt_{d,s}</script><p>$cnt$的定义（注意下面都是整除）：</p>
<script type="math/tex; mode=display">
l=\max(1,\lceil(s-n+1)/d\rceil)\\r=\min((n-1)/d,s/d-1)</script><script type="math/tex; mode=display">
cnt_{d,s}=\sum_{i=l}^{r}[\gcd(i,s/d-i)=1]</script><p>反演一下：</p>
<script type="math/tex; mode=display">
cnt_{d,s}=\sum_{i=l}^{r}\sum_{t|i,t|s/d}\mu(t)</script><script type="math/tex; mode=display">
cnt_{d,s}=\sum_{t|s/d}\mu(t)(\frac{r}{t}-\frac{l-1}{t})</script><p>带上去算就好了。</p>
<p>$cnt$一共有$O(n\log n)$个，每次计算一行$cnt$要$O(n\log n)$，所以总复杂度大概是$O(n\log ^2 n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,k,pri[maxn],tot,mu[maxn],vis[maxn],pw[maxn],cnt[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>{</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) {</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) pri[++tot]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*pri[j]&lt;maxn;j++) {</span><br><span class="line">            vis[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i*pri[j]]=-mu[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod) <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res=<span class="number">1l</span>l*res*a%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);sieve();</span><br><span class="line">    pw[<span class="number">0</span>]=<span class="number">1</span>;<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pw[i]=<span class="number">1l</span>l*pw[i<span class="number">-1</span>]*k%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=n<span class="number">-1</span>;d++) {</span><br><span class="line">        <span class="keyword">int</span> m=(<span class="number">2</span>*n<span class="number">-2</span>)/d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=m;t++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s=t;s&lt;=m;s+=t) </span><br><span class="line">                cnt[s]+=mu[t]*(min(s<span class="number">-1</span>,(n<span class="number">-1</span>)/d)/t-max(<span class="number">0</span>,(s*d-n)/d)/t);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>;s&lt;=m;s++) ans=(ans+<span class="number">1l</span>l*pw[max(s*d-n,d)]*cnt[s]%mod)%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m+<span class="number">2</span>;i++) cnt[i]=<span class="number">0</span>;</span><br><span class="line">    }ans=<span class="number">1l</span>l*ans*qpow(qpow(k,n),mod<span class="number">-2</span>)%mod;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-Beauty-of-a-Permutation"><a href="#F-Beauty-of-a-Permutation" class="headerlink" title="F. Beauty of a Permutation"></a>F. Beauty of a Permutation</h2><p>太神啦写不动…好像是新的黑科技，叫什么析合树。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
        <tag>计数</tag>
        <tag>交互</tag>
        <tag>构造</tag>
        <tag>floyd</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>FFT(MTT)常数优化</title>
    <url>/2019/09/03/FFT(MTT)%E5%B8%B8%E6%95%B0%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>最近<del>闲着无聊</del>研究了下$FFT$的常数优化，大概就是各种$3$次变$2or1.5$次之类的，<del>不过没见过啥题卡这个的吧</del>。</p>
<p>关于$FFT$可以看这里：<a href="https://www.cnblogs.com/hbyer/p/10325916.html" target="_blank" rel="noopener">浅谈FFT&amp;NTT</a>。</p>
<a id="more"></a>
<h2 id="关于复数"><a href="#关于复数" class="headerlink" title="关于复数"></a>关于复数</h2><p>设$x=a+bi$，其中$i$是虚数单位，那么我们用$\bar x$表示$x$的共轭复数，即$\bar x=a-bi$。</p>
<p>共轭复数有一个这样的性质：</p>
<script type="math/tex; mode=display">
\overline{ab}=\bar a \cdot \bar b</script><p>证明展开就好了，这个是下面优化的关键。</p>
<p>设$\omega_n$为$n$阶单位根，则$\overline{\omega _n^{x}}=\omega_{n}^{-x}$。</p>
<h2 id="idft变dft"><a href="#idft变dft" class="headerlink" title="idft变dft"></a>idft变dft</h2><p>设$f(x)=\sum_{i=0}^{n-1}a_ix^i$，注意到：</p>
<script type="math/tex; mode=display">
n\cdot[j]{\rm idft}(f)=\sum_{i=0}^{n-1}\omega_{n}^{-ij}a_i=a_0+\sum_{i=1}^{n-1}\omega_{n}^{ij}a_{n-i}</script><p>也就是说我们如果先<code>dft(a)</code>，再进行一次<code>std::reverse(a+1,a+n)</code>，再除以$n$，就完成了一次$idft$。</p>
<h2 id="多项式乘法优化-1"><a href="#多项式乘法优化-1" class="headerlink" title="多项式乘法优化 1"></a>多项式乘法优化 1</h2><p>给出多项式$f(x)=\sum_{i=0}^{n}a_ix^i,g(x)=\sum_{i=0}^{m}b_ix^i$，求其卷积。</p>
<p>这里最开始介绍一种非常简洁的优化方法，构造多项式$h(x)$：</p>
<script type="math/tex; mode=display">
h(x)=f(x)+ig(x)</script><script type="math/tex; mode=display">
h^2(x)=f^2(x)-g^2(x)+2if(x)g(x)</script><p>那么我们只需要取$h^2(x)$的虚部除以$2$就是答案，这只需要做两次$FFT$。</p>
<h2 id="多项式乘法优化-2"><a href="#多项式乘法优化-2" class="headerlink" title="多项式乘法优化 2"></a>多项式乘法优化 2</h2><p>这个和上面的关联不大，设$X_i$表示多项式$F(x)$$dft$之后的系数，$a_i$表示$dft$之前的系数，设$F(x)$为$n$项的多项式，且$n=2^k$，注意到：</p>
<script type="math/tex; mode=display">
X_i=\sum_{j=0}^{n-1}a_j\omega_{n}^{ij},X_{n-i}=\sum_{j=0}^{n-1}a_j\omega_{n}^{-ij}</script><p>即：$X_i=\overline{X_{n-i}}$。</p>
<p>这实质上是因为$F$没有虚部的原因，我们换一个有虚部的多项式试试：</p>
<script type="math/tex; mode=display">
X_i=\sum_{j=0}^{n-1}(a_j+ib_j)\omega_{n}^{ij}\\
X_{n-i}=\sum_{j=0}^{n-1}(a_j+ib_j)\omega_{n}^{-ij}\\
\overline{X_{n-i}}=\sum_{j=0}^{n-1}(a_j-ib_j)\omega_{n}^{ij}\\</script><p>等等，我们发现第一个式子和第三个式子很像，两式相加减可以得到：</p>
<script type="math/tex; mode=display">
X_i+\overline{X_{n-i}}=2\sum_{j=0}^{n-1}a_j\omega_{n}^{ij}\\
X_i-\overline{X_{n-i}}=2i\sum_{j=0}^{n-1}b_j\omega_{n}^{ij}</script><p>注意到等式右边就是$a$ $dft$完之后的结果，那么对于多项式$F(x),G(x)$，我们可以构造一个函数然后$dft$一次，然后$O(n)$得到两个多项式$dft$之后的结果，总共只用了一次$FFT$。</p>
<hr>
<p>当然这个玩意也可以这样用：假设我们现在想求$dft(F(x))$，我们把$F(x)$奇偶分类，构造多项式：</p>
<script type="math/tex; mode=display">
g(x)=\sum_{i=0}^{n/2-1}(a_{2i}+ia_{2i+1})x^i</script><p>然后相当于是$0.5$次$FFT$来完成这个事，设$dft(g(x))$每一项为$X_i$，$dft(F(x))$每一项为$Y_i$，那么推一下可以得到：</p>
<script type="math/tex; mode=display">
Y_i=\frac{X_i+\overline{X_{n/2-i}}}{2}-2\omega_{n}^i(X_i-\overline{X_{n/2-i}})</script><p>注意这里只有$i\in [0,n/2)$的值，$Y_{n/2}$特殊处理一下，后面的可以通过前面得到。</p>
<h2 id="MTT常数优化"><a href="#MTT常数优化" class="headerlink" title="MTT常数优化"></a>MTT常数优化</h2><p>$\rm MTT$就是拆系数$\rm FFT$，设多项式$s(x),t(x)$，我们要算$s(x)t(x)$，模数任意。</p>
<p>我们拆系数，设拆完了之后是$s(x)=a(x)+b(x)\cdot p,t(x)=c(x)+d(x)\cdot p$。</p>
<p>构造$F(x)=a(x)+i\cdot b(x)$，$G(x)=c(x)+i\cdot d(x)$。</p>
<p>那么有：</p>
<script type="math/tex; mode=display">
\begin{align}
&F(\omega_n^j)=\sum_{i=0}^{n-1}(a_i+ib_i)\omega_n^{ij}\\
&F(\omega_n^{-j})=\sum_{i=0}^{n-1}(a_i+ib_i)\omega_n^{-ij}\\
&\overline{F(\omega_n^{-j})}=\sum_{i=0}^{n-1}(a_i-ib_i)\omega_n^{ij}\\
\end{align}</script><p>那么相加减可得$a(x),b(x)$的$dft$。</p>
<p>令$h(x)={\rm dft}(a(x))\cdot {\rm dft}(G(x))={\rm dft}(a(x)\cdot G(x))={\rm dft}(a(x)c(x)+i\cdot a(x)d(x))$。</p>
<p>那么我们$idft$一次$h(x)$就可以得到$a(x)c(x),a(x)d(x)$。</p>
<p>同理可以得到$b(x)c(x),b(x)d(x)$，一共$4$次$dft$。</p>
<p>代码长这样：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *s,<span class="keyword">int</span> *t,<span class="keyword">int</span> len)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(N=<span class="number">1</span>,bit=<span class="number">0</span>;N&lt;len;N&lt;&lt;=<span class="number">1</span>,bit++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) g[<span class="number">0</span>][i]=cp(r[i]&amp;all,r[i]&gt;&gt;<span class="number">15</span>),g[<span class="number">1</span>][i]=cp(s[i]&amp;all,s[i]&gt;&gt;<span class="number">15</span>);</span><br><span class="line">    fft(g[<span class="number">0</span>]),fft(g[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) {</span><br><span class="line">        <span class="keyword">int</span> j=(N-i)&amp;(N<span class="number">-1</span>);</span><br><span class="line">        g[<span class="number">2</span>][j]=(g[<span class="number">0</span>][i]+conj(g[<span class="number">0</span>][j]))*cp(<span class="number">0.5</span>,<span class="number">0</span>)*g[<span class="number">1</span>][i];</span><br><span class="line">        g[<span class="number">3</span>][j]=(g[<span class="number">0</span>][i]-conj(g[<span class="number">0</span>][j]))*cp(<span class="number">0</span>,<span class="number">-0.5</span>)*g[<span class="number">1</span>][i];</span><br><span class="line">    }fft(g[<span class="number">2</span>]),fft(g[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) g[<span class="number">2</span>][i]=g[<span class="number">2</span>][i]/N,g[<span class="number">3</span>][i]=g[<span class="number">3</span>][i]/N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) {</span><br><span class="line">        ll pp=g[<span class="number">2</span>][i].r+<span class="number">0.5</span>,x=g[<span class="number">2</span>][i].i+<span class="number">0.5</span>,y=g[<span class="number">3</span>][i].r+<span class="number">0.5</span>,z=g[<span class="number">3</span>][i].i+<span class="number">0.5</span>;</span><br><span class="line">        t[i]=(pp%p+(((x+y)%p)&lt;&lt;<span class="number">15</span>)+((z%p)&lt;&lt;<span class="number">30</span>))%p;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 526 (Div. 1)</title>
    <url>/2019/09/01/Codeforces%20Round%20526%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1083" target="_blank" rel="noopener">https://codeforces.com/contest/1083</a></p>
<a id="more"></a>
<h2 id="A-The-Fair-Nut-and-the-Best-Path"><a href="#A-The-Fair-Nut-and-the-Best-Path" class="headerlink" title="A. The Fair Nut and the Best Path"></a>A. The Fair Nut and the Best Path</h2><p>$dp$两遍，第一遍求出从子树上来的最大值，第二遍求出从父亲下来的最大值，然后直接更新答案就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,head[maxn],tot,val[maxn],mx[maxn],mx2[maxn],c[maxn],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt,w;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>{e[++tot]=(edge){v,head[u],w},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">    mx[x]=mx2[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">if</span>((v=e[i].to)==fa) <span class="keyword">continue</span>;c[v]=e[i].w;</span><br><span class="line">        dfs(v,x);<span class="keyword">int</span> t=mx[v]-e[i].w;<span class="keyword">if</span>(t&lt;<span class="number">0</span>) <span class="keyword">continue</span>;t+=val[x];</span><br><span class="line">        <span class="keyword">if</span>(mx[x]&lt;=t) mx2[x]=mx[x],mx[x]=t;</span><br><span class="line">        <span class="keyword">else</span> mx2[x]=max(mx2[x],t);</span><br><span class="line">    }<span class="keyword">int</span> t=val[x];</span><br><span class="line">    <span class="keyword">if</span>(mx[x]&lt;=t) mx2[x]=mx[x],mx[x]=t;</span><br><span class="line">    <span class="keyword">else</span> mx2[x]=max(mx2[x],t);</span><br><span class="line">    ans=max(ans,mx[x]);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(p-c[x]&gt;=<span class="number">0</span>) p=p-c[x]+val[x];</span><br><span class="line">    <span class="keyword">else</span> p=val[x];ans=max(ans,p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,t,i=head[x];i;i=e[i].nxt) {</span><br><span class="line">        <span class="keyword">if</span>((v=e[i].to)==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(mx[x]==mx[v]-e[i].w+val[x]) t=mx2[x];<span class="keyword">else</span> t=mx[x];</span><br><span class="line">        dfs2(v,x,max(p,t));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(val[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;i++) read(x),read(y),read(z),ins(x,y,z),ins(y,x,z);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-The-Fair-Nut-and-Strings"><a href="#B-The-Fair-Nut-and-Strings" class="headerlink" title="B. The Fair Nut and Strings"></a>B. The Fair Nut and Strings</h2><p>首先考虑把所有串拉出来建一棵$\rm trie$树，设$f_i$表示每一层的点数。</p>
<p>那么显然如果我们找到了一个$x$满足$f_x\leqslant k&lt;f_{x+1}$，那么$1\sim x$的点全会被占满，然后还会延伸出$k$条长度为$n-x$的链，这样显然是最优的。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k,f[maxn],ss[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(k);<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s+<span class="number">1</span>,t+<span class="number">1</span>);<span class="keyword">int</span> bo=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        f[i]=max(<span class="number">0l</span>l,f[i<span class="number">-1</span>]<span class="number">-2</span>)*<span class="number">2</span>+<span class="number">2</span>+bo*((s[i]==<span class="string">'a'</span>)+(t[i]==<span class="string">'b'</span>));</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=t[i]) bo=<span class="number">1</span>;<span class="keyword">if</span>(!bo) f[i]--;</span><br><span class="line">        ss[i]=f[i]+ss[i<span class="number">-1</span>];<span class="comment">//write(f[i]);</span></span><br><span class="line">        <span class="keyword">if</span>(f[i]&gt;k) {</span><br><span class="line">            write(ss[i<span class="number">-1</span>]+(n-i+<span class="number">1</span>)*k);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }write(ss[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Max-Mex"><a href="#C-Max-Mex" class="headerlink" title="C. Max Mex"></a>C. Max Mex</h2><p>很巧妙的题。</p>
<p>首先因为他是个排列，每个权值都只会出现一次，我们可以开一颗线段树，区间$[l,r]$记录有没有一条链经过$l\sim r$的所有值。</p>
<p>那么区间合并就直接合并两条链就好了，查询就线段树上二分。</p>
<p>如果我们用$\rm rmq$来$O(1)$求$\rm LCA$，复杂度就是$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[maxn],n;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span> {</span></span><br><span class="line">    <span class="keyword">int</span> head[maxn],tot,in[maxn],out[maxn],dep[maxn],cnt,rev[maxn],lg[maxn];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}e[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    pii f[maxn][<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>{</span><br><span class="line">        in[x]=++cnt;dep[x]=dep[fa]+<span class="number">1</span>;rev[cnt]=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(e[i].to!=fa) dfs(e[i].to,x),rev[++cnt]=x;</span><br><span class="line">        out[x]=++cnt;rev[cnt]=x;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) f[i][<span class="number">0</span>]=mp(dep[rev[i]],i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">20</span>;j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">                f[i][j]=min(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=cnt;i++) printf("%d ",rev[i]);puts("");</span></span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        x=out[x],y=in[y];<span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">        <span class="keyword">int</span> p=lg[y-x+<span class="number">1</span>];pii t=min(f[x][p],f[y-(<span class="number">1</span>&lt;&lt;p)+<span class="number">1</span>][p]);</span><br><span class="line">        <span class="keyword">return</span> rev[t.sc];</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{<span class="keyword">return</span> dep[x]+dep[y]<span class="number">-2</span>*dep[lca(x,y)];}</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span> {</span></span><br><span class="line">    pii t[maxn];</span><br><span class="line"> </span><br><span class="line">    <span class="function">pii <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> xy=T.dis(x,y),yz=T.dis(y,z),zx=T.dis(z,x);</span><br><span class="line">        <span class="keyword">if</span>(xy+yz==zx) <span class="keyword">return</span> mp(z,x);</span><br><span class="line">        <span class="keyword">if</span>(zx+xy==yz) <span class="keyword">return</span> mp(y,z);</span><br><span class="line">        <span class="keyword">if</span>(yz+zx==xy) <span class="keyword">return</span> mp(x,y);</span><br><span class="line">        <span class="keyword">return</span> mp(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function">pii <span class="title">unite</span><span class="params">(pii x,pii y)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!x.fr) <span class="keyword">return</span> y;</span><br><span class="line">        <span class="keyword">if</span>(~x.fr&amp;&amp;~y.fr) {</span><br><span class="line">            x=merge(x.fr,x.sc,y.fr);</span><br><span class="line">            <span class="keyword">if</span>(~x.fr) x=merge(x.fr,x.sc,y.sc);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        }<span class="keyword">return</span> mp(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> t[p]=mp(v,v),<span class="keyword">void</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) modify(ls,l,mid,x,v);</span><br><span class="line">        <span class="keyword">else</span> modify(rs,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">        t[p]=unite(t[ls],t[rs]);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function">pii <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,pii v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="number">0</span>&amp;&amp;r==n<span class="number">-1</span>&amp;&amp;~t[p].fr) <span class="keyword">return</span> mp(<span class="number">-1</span>,n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(l==r) {</span><br><span class="line">            pii x=merge(v.fr,v.sc,t[p].fr);</span><br><span class="line">            <span class="comment">// printf("query :: %d %d %d %d %d\n",l,x.fr,v.fr,v.sc,t[p].fr);</span></span><br><span class="line">            <span class="keyword">if</span>(~x.fr) <span class="keyword">return</span> mp(<span class="number">-1</span>,l);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mp(<span class="number">-1</span>,l<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        pii x=unite(v,t[p]);</span><br><span class="line">        <span class="keyword">if</span>(~x.fr) <span class="keyword">return</span> x;</span><br><span class="line">        x=query(ls,l,mid,v);</span><br><span class="line">        <span class="keyword">if</span>(~x.fr) <span class="keyword">return</span> query(rs,mid+<span class="number">1</span>,r,x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"debug :: %d %d %d %d\n"</span>,l,r,t[p].fr,t[p].sc);</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;debug(ls,l,mid),debug(rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    }</span><br><span class="line">}st;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,x;i&lt;=n;i++) read(x),T.ins(x,i),T.ins(i,x);</span><br><span class="line">    T.dfs(<span class="number">1</span>,<span class="number">0</span>);T.prepare();</span><br><span class="line">    <span class="comment">// write(T.lca(4,6));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) st.modify(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,p[i],i);</span><br><span class="line">    <span class="keyword">int</span> q;read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> op;read(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">2</span>) write(st.query(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,mp(<span class="number">0</span>,<span class="number">0</span>)).sc+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">int</span> x,y;read(x),read(y);</span><br><span class="line">            st.modify(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,p[x],y),st.modify(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,p[y],x);</span><br><span class="line">            swap(p[x],p[y]);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// st.debug(1,0,n-1);puts("");</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-The-Fair-Nut’s-getting-crazy"><a href="#D-The-Fair-Nut’s-getting-crazy" class="headerlink" title="D. The Fair Nut’s getting crazy"></a>D. The Fair Nut’s getting crazy</h2><p><del>好毒瘤啊先咕咕咕，话说为什么D题有3400分啊。。</del></p>
<h2 id="E-The-Fair-Nut-and-Rectangles"><a href="#E-The-Fair-Nut-and-Rectangles" class="headerlink" title="E. The Fair Nut and Rectangles"></a>E. The Fair Nut and Rectangles</h2><p>这可能是本场最水的题了。。为什么E题比AB都水啊。。</p>
<p>首先按$x$排序，那么$y$一定是递减的。</p>
<p>设$f_i$表示选了$i$，前面的可选可不选的最大值，那么：</p>
<script type="math/tex; mode=display">
f_i=\max_{j=1}^{i-1}\{f_j+(x_i-x_j)\cdot y_i-a_i\}</script><p>这显然可以斜率优化，拿单调队列搞一搞就行了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pps</span> {</span><span class="keyword">int</span> x,y;ll a;}a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,q[maxn],ql,qr;ll f[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(pps a,pps b)</span> </span>{<span class="keyword">return</span> a.x&lt;b.x;}</span><br><span class="line"> </span><br><span class="line"><span class="function">lf <span class="title">slope</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>{<span class="keyword">return</span> <span class="number">1.0</span>*(f[l]-f[r])/(a[l].x-a[r].x);}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i].x),read(a[i].y),<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i].a);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);ql=qr=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">while</span>(qr&gt;ql&amp;&amp;slope(q[ql],q[ql+<span class="number">1</span>])&gt;=a[i].y) ql++;</span><br><span class="line">        f[i]=max(f[i<span class="number">-1</span>],f[q[ql]]+<span class="number">1l</span>l*a[i].y*(a[i].x-a[q[ql]].x)-a[i].a);</span><br><span class="line">        <span class="keyword">while</span>(qr&gt;ql&amp;&amp;slope(q[qr],q[qr<span class="number">-1</span>])&lt;=slope(q[qr],i)) qr--;</span><br><span class="line">        q[++qr]=i;</span><br><span class="line">    }<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-The-Fair-Nut-and-Amusing-Xor"><a href="#F-The-Fair-Nut-and-Amusing-Xor" class="headerlink" title="F. The Fair Nut and Amusing Xor"></a>F. The Fair Nut and Amusing Xor</h2><p>神题。</p>
<p>首先令$c_i=a_i\oplus b_i$，$r_i=c_i\oplus c_{i-1}$，那么这样差分之后每次修改就变成了了$r_i$和$r_{i+k}$异或上$x$。</p>
<p>那么我们把$r$按下标$\bmod k$同余分组，每次就是相邻的修改。</p>
<p>考虑任意一组，将其记为$w_i$，那么我们每次就要异或$w_1,w_1\oplus w_2,w_1\oplus w_2 \oplus w_3 \cdots$，这之中等于$0$的就是我们省掉的操作，那么我们能全消成$0$当且仅当全部异或起来等于$0$。</p>
<p>那么暴力就很好写了，只需要每次修改的时候遍历这一组，然后统计一下哪些前缀异或和是$0$就可以了。</p>
<p>这样复杂度是$O(\frac{n}{k}\cdot q)$的，如果$k\geqslant \sqrt n$，那么复杂度就是$O(q\sqrt n)$。</p>
<p>现在考虑$k&lt;\sqrt n$怎么做，其实做法也很显然了，我们现在要进行的操作是区间异或还有统计有多少值为$0$，因为这里区间异或其实是在前缀和数组上进行。</p>
<p>那么我们分块，打区间异或标记，块内暴力修改，因为权值不是很大，对于每个块记个桶表示当前值有多少个，统计答案就很简单了。</p>
<p>时间复杂度$O(q\sqrt n)$，空间复杂度$O(wk\cdot \sqrt{\frac{n}{k}}) =O(w\sqrt{nk})$，调整一下块大小就能过了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">400</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,k,q;</span><br><span class="line"><span class="keyword">int</span> c[maxn],s[maxn],ans,res;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> pps {</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        c[p]=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=n;i+=k) {</span><br><span class="line">            ans-=!(!s[i]);</span><br><span class="line">            <span class="keyword">if</span>(i+k&gt;n) res-=!s[i];</span><br><span class="line">            s[i]=c[i]^(i&gt;=k?s[i-k]:<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(i+k&gt;n) res+=!s[i];</span><br><span class="line">            ans+=!(!s[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">        ans=n-ans;</span><br><span class="line">        <span class="keyword">while</span>(q--) {</span><br><span class="line">            <span class="keyword">char</span> op;<span class="keyword">int</span> p,v;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;op),read(p),read(v);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'a'</span>) a[p]=v;<span class="keyword">else</span> b[p]=v;</span><br><span class="line">            modify(p,(a[p]^b[p])^(a[p<span class="number">-1</span>]^b[p<span class="number">-1</span>]));p++;</span><br><span class="line">            modify(p,(a[p]^b[p])^(a[p<span class="number">-1</span>]^b[p<span class="number">-1</span>]));</span><br><span class="line">            write(res==k?ans:<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> modpps {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">block</span> {</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; r,bel,val,w;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; &gt; t;</span><br><span class="line">        <span class="keyword">int</span> tag[<span class="number">600</span>],m;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span>(!x) x=k;m=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=k) m++;</span><br><span class="line">            r.resize(m+<span class="number">2</span>),bel.resize(m+<span class="number">2</span>);</span><br><span class="line">            val.resize(m+<span class="number">2</span>),w.resize(m+<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) bel[i]=(i<span class="number">-1</span>)/B+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// printf("init :: %d %d\n",x,m);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i;i--) r[i]=bel[i]==bel[i+<span class="number">1</span>]?r[i+<span class="number">1</span>]:i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">                w[i]=s[(i<span class="number">-1</span>)*k+x];val[i]=c[(i<span class="number">-1</span>)*k+x];</span><br><span class="line">                <span class="comment">// printf("%d ",val[i]);</span></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// puts("");</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; et(<span class="number">1</span>&lt;&lt;<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=bel[m];i++) t.pb(et);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) t[bel[i]][w[i]]++;</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">            <span class="comment">// printf("mdf %d %d %d %d\n",x,v,v^val[x],res);</span></span><br><span class="line">            x=x/k+(x%k!=<span class="number">0</span>);<span class="keyword">int</span> _=v^val[x];val[x]=v;v=_;</span><br><span class="line">            res-=tag[bel[m]]==w[m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=r[x];i++) {</span><br><span class="line">                t[bel[i]][w[i]]--;<span class="keyword">if</span>(w[i]==tag[bel[i]]) ans--;</span><br><span class="line">                w[i]^=v;</span><br><span class="line">                t[bel[i]][w[i]]++;<span class="keyword">if</span>(w[i]==tag[bel[i]]) ans++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=bel[x]+<span class="number">1</span>;i&lt;=bel[m];i++) {</span><br><span class="line">                ans-=t[i][tag[i]];tag[i]^=v;</span><br><span class="line">                ans+=t[i][tag[i]];</span><br><span class="line">            }</span><br><span class="line">            res+=tag[bel[m]]==w[m];<span class="comment">//write(res);</span></span><br><span class="line">        }</span><br><span class="line">    }s[<span class="number">402</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) s[i].init(i);<span class="built_in">cerr</span>&lt;&lt;<span class="string">"OK"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span>(q--) {</span><br><span class="line">            <span class="keyword">char</span> op;<span class="keyword">int</span> p,v;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;op),read(p),read(v);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'a'</span>) a[p]=v;<span class="keyword">else</span> b[p]=v;</span><br><span class="line">            s[p%k].modify(p,(a[p]^b[p])^(a[p<span class="number">-1</span>]^b[p<span class="number">-1</span>]));p++;</span><br><span class="line">            s[p%k].modify(p,(a[p]^b[p])^(a[p<span class="number">-1</span>]^b[p<span class="number">-1</span>]));</span><br><span class="line">            write(res==k?n-ans:<span class="number">-1</span>);<span class="keyword">if</span>(q%<span class="number">10000</span>==<span class="number">0</span>) <span class="built_in">cerr</span>&lt;&lt;q&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> st=clock();</span><br><span class="line">    read(n),read(k),read(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) read(b[i]);n++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i]=(a[i]^b[i])^(a[i<span class="number">-1</span>]^b[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  s[i]=c[i]^(i&gt;=k?s[i-k]:<span class="number">0</span>),ans+=!s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;i++) res+=!s[i];</span><br><span class="line">    write(res==k?n-ans:<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(k&gt;B) pps :: solve();</span><br><span class="line">    <span class="keyword">else</span> modpps :: solve();</span><br><span class="line">    <span class="built_in">cerr</span>&lt;&lt;(lf)(clock()-st)/<span class="number">1e3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>分块</tag>
        <tag>dp</tag>
        <tag>线段树</tag>
        <tag>计数</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 545 (Div. 1)</title>
    <url>/2019/09/01/Codeforces%20Round%20545%20(Div.%201)/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1137" target="_blank" rel="noopener">https://codeforces.com/contest/1137</a></p>
<a id="more"></a>
<h2 id="A-Skyscrapers"><a href="#A-Skyscrapers" class="headerlink" title="A. Skyscrapers"></a>A. Skyscrapers</h2><p>看懂题意就很简单了，直接对每一行每一列离散化一下就行了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],b[maxn][maxn],n,m,t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) t[i]=r[i];</span><br><span class="line">    sort(t+<span class="number">1</span>,t+p+<span class="number">1</span>);r[<span class="number">0</span>]=unique(t+<span class="number">1</span>,t+p+<span class="number">1</span>)-t<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) r[i]=lower_bound(t+<span class="number">1</span>,t+r[<span class="number">0</span>]+<span class="number">1</span>,r[i])-t;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) read(a[i][j]),b[j][i]=a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) get(a[i],m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) get(b[i],n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++,<span class="built_in">puts</span>(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,max(a[i][j],b[j][i])+max(a[i][<span class="number">0</span>]-a[i][j],b[j][<span class="number">0</span>]-b[j][i]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="B-Camp-Schedule"><a href="#B-Camp-Schedule" class="headerlink" title="B. Camp Schedule"></a>B. Camp Schedule</h2><p>这个B怎么比A还水啊…</p>
<p>直接$\rm kmp$，每次到结尾就跳$\rm next$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,a,b,nxt[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_nxt</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,i=<span class="number">2</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="keyword">if</span>(t[j+<span class="number">1</span>]==t[i]) j++,nxt[i]=j;</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;t[j+<span class="number">1</span>]!=t[i]) j=nxt[j];</span><br><span class="line">            <span class="keyword">if</span>(t[j+<span class="number">1</span>]==t[i]) j++;nxt[i]=j;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);m=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>) a++;b=m-a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);n=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    get_nxt();</span><br><span class="line">    <span class="keyword">int</span> p=n-nxt[n];<span class="comment">//cerr&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>,d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) <span class="keyword">if</span>(t[i]==<span class="string">'0'</span>) c++;d=p-c;</span><br><span class="line">    <span class="keyword">while</span>(a-c&gt;=<span class="number">0</span>&amp;&amp;b-d&gt;=<span class="number">0</span>) {</span><br><span class="line">        a-=c,b-=d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) <span class="built_in">putchar</span>(t[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        <span class="keyword">if</span>(t[i]==<span class="string">'0'</span>) {<span class="keyword">if</span>(a) a--,<span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> <span class="keyword">break</span>;}</span><br><span class="line">        <span class="keyword">else</span> {<span class="keyword">if</span>(b) b--,<span class="built_in">putchar</span>(<span class="string">'1'</span>);<span class="keyword">else</span> <span class="keyword">break</span>;}</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++) <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++) <span class="built_in">putchar</span>(<span class="string">'1'</span>);<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="C-Museums-Tour"><a href="#C-Museums-Tour" class="headerlink" title="C. Museums Tour"></a>C. Museums Tour</h2><p>思路很简单，一个点拆成$d$个，第$i$个代表一星期的第$i$天。</p>
<p>那么每个点有个权值表示在这个环里绕圈圈可以去的博物馆的种类最多有多少。</p>
<p>注意到如果$(i,a)$可以到达$(i,b)$（其中$i$是点$a,b$是时间），那么$(i,b)$必然能到$(i,a)$，所以任意一条路径的权值之和就是种类数，不会算重复。</p>
<p>然后缩点跑$\rm DAG$上$\rm dp$就行了。</p>
<p>不过我好像写太丑$\text{MLE on test 73}$。。但是也有$AC$代码用的一样的思路。</p>
<p><del>代码还是贴出来吧，注意仅供参考</del></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,d,bel[maxn],scc;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],sta[maxn],top,dfn_cnt;</span><br><span class="line"><span class="keyword">bool</span> in[maxn],t[N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ihead[maxn],itot,f[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>{</span><span class="keyword">int</span> to,nxt;}ie[maxn],e[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">iins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{ie[++itot]=(edge){v,ihead[u]},ihead[u]=itot,sta[v]++;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuck</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc;i++) <span class="keyword">if</span>(!sta[i]) q.push(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) {</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();f[x]+=low[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v,i=ihead[x];i;i=ie[i].nxt) {</span><br><span class="line">            v=ie[i].to;f[v]=max(f[v],f[x]);</span><br><span class="line">            <span class="keyword">if</span>(!(--sta[v])) q.push(v);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> head[maxn],tot;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>{e[++tot]=(edge){v,head[u]},head[u]=tot;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>{<span class="keyword">return</span> (b<span class="number">-1</span>)*n+a;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    sta[++top]=x;<span class="keyword">int</span> tt=top;low[x]=dfn[x]=++dfn_cnt;in[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v,i=head[x];i;i=e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v=e[i].to]) tarjan(v),low[x]=min(low[x],low[v]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in[v]) low[x]=min(low[x],dfn[v]);</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x]) {</span><br><span class="line">        scc++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tt,v;i&lt;=top;i++) in[v=sta[i]]=<span class="number">0</span>,bel[v]=scc;</span><br><span class="line">        top=tt<span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m),read(d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="keyword">int</span> a,b;read(a),read(b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;d;j++) ins(id(a,j),id(b,j+<span class="number">1</span>));</span><br><span class="line">        ins(id(a,d),id(b,<span class="number">1</span>));</span><br><span class="line">    }tarjan(<span class="number">1</span>);<span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low);</span><br><span class="line">    <span class="built_in">memset</span>(sta,<span class="number">0</span>,<span class="keyword">sizeof</span> sta);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x,j=<span class="number">1</span>;j&lt;=d;j++)</span><br><span class="line">            <span class="keyword">if</span>(s[j]-<span class="string">'0'</span>&amp;&amp;dfn[x=bel[id(i,j)]]!=i) low[x]++,dfn[x]=i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n*d;x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) </span><br><span class="line">            <span class="keyword">if</span>(bel[x]!=bel[e[i].to]) iins(bel[e[i].to],bel[x]);</span><br><span class="line">    fuck();write(f[bel[<span class="number">1</span>]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="D-Cooperative-Game"><a href="#D-Cooperative-Game" class="headerlink" title="D. Cooperative Game"></a>D. Cooperative Game</h2><p>挺巧妙的交互题，但是$cf$讨论版有人说是原题而且可以直接$\rm google$到？</p>
<p>首先$10$个人是吓人的，只需要三个就可以完成这个题目。</p>
<p>我们记这三个人分别叫$a,b,c$。</p>
<p>那么我们进行若干轮，每次让$a$走两步，$b$走一步，这需要花费两次交互。</p>
<p>直到$a,b$相遇我们停止，那么分析一下，假设现在$b$走了$x$步，$a$绕了$k$圈，并且显然$b$不可能走完一圈，可以得到：</p>
<script type="math/tex; mode=display">
kc+t+(x-t)=2x\\
x\equiv 0 \pmod{c}</script><p>也就是说$b$在环上走的步数为$(x-t)$，则可以得到：</p>
<script type="math/tex; mode=display">
x-t\equiv -t\pmod c</script><p>那么就是说只要在让所有人一起走，知道他们集合到一个点，那么这个点必然为所求的点。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ans</span><span class="params">()</span> </span>{</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);<span class="keyword">int</span> x;read(x);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++) <span class="built_in">scanf</span>(<span class="string">"%*s"</span>);<span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"next 0 1"</span>);get_ans();</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"next 0"</span>);<span class="keyword">if</span>(get_ans()==<span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"next 0 1 2 3 4 5 6 7 8 9"</span>);</span><br><span class="line">        <span class="keyword">if</span>(get_ans()==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"done"</span>);fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="E-Train-Car-Selection"><a href="#E-Train-Car-Selection" class="headerlink" title="E. Train Car Selection"></a>E. Train Car Selection</h2><p>首先可以得到几个显然的结论：一段只取第一个数就好了，如果往前面加$0$那么后面的都没用了。</p>
<p>那么把每个数看做点$(x,a_x)$，统计一下$b,s$的总和。</p>
<p>注意到对于$i,j,i&lt;j$，何时$i$将来会比$j$优。</p>
<p>首先显然$a_i<a_j$，其次要满足$si+b+a_i>sj+b+a_j$，化一下就是斜率式子。</a_j$，其次要满足$si+b+a_i></p>
<p>那么维护下凸壳就好了。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf long double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,q,top,sum[maxn],suma,sumb;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    P <span class="keyword">operator</span> - (<span class="keyword">const</span> P &amp;a) <span class="keyword">const</span> {<span class="keyword">return</span> (P){x-a.x,y-a.y};}</span><br><span class="line">    lf <span class="keyword">operator</span> * (<span class="keyword">const</span> P &amp;a) <span class="keyword">const</span> {<span class="keyword">return</span> (lf)x*a.y-(lf)y*a.x;}</span><br><span class="line">}sta[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(q);n--;</span><br><span class="line">    sta[++top]=(P){<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) {</span><br><span class="line">        <span class="keyword">int</span> op,a;read(op),read(a);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) {</span><br><span class="line">            suma=sumb=<span class="number">0</span>;top=<span class="number">0</span>;n+=a;</span><br><span class="line">            sta[++top]=(P){<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">int</span> x=n+<span class="number">1</span>,y=-suma*(n+<span class="number">1</span>)-sumb;n+=a;</span><br><span class="line">            <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;(sta[top<span class="number">-1</span>]-sta[top])*((P){x,y}-sta[top])&gt;<span class="number">1.00</span>) top--;</span><br><span class="line">            sta[++top]=(P){x,y};</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">int</span> b;read(b);suma+=b,sumb+=a;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;(lf)sta[top].x*suma+sta[top].y&gt;=(lf)sta[top<span class="number">-1</span>].x*suma+sta[top<span class="number">-1</span>].y) top--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,sta[top].x+<span class="number">1</span>,sta[top].y+sta[top].x*suma+sumb);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="F-Matches-Are-Not-a-Child’s-Play"><a href="#F-Matches-Are-Not-a-Child’s-Play" class="headerlink" title="F. Matches Are Not a Child’s Play"></a>F. Matches Are Not a Child’s Play</h2><p>首先显然两个询问是本质相同的。</p>
<p>然后最大的那个一定是最后删除的，我们不妨把它设为根。</p>
<p>假设现在要进行$\rm up~x$的操作，那么可以发现只会改变$x$到根的相对大小关系，具体来说就是一定是删除到只剩这条链的时候在把这条链删掉。</p>
<p>那么我们用$\rm LCT$来维护这个过程，对于每个修改我们把这个点到根的链染上一个新的颜色，然后$\text{make_root}$一下就好了。</p>
<p>那么对于询问我们用一个树状数组来记录颜色的前缀和，假设询问$x$那么答案就是前缀和加上深度比$x$大并且颜色相同的点数，这个$\rm LCT$里就是右儿子的大小。</p>
<p>复杂度$O(n\log n)$。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>{</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=-f;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;x*=f;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;print(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">if</span>(!x) <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="keyword">else</span> print(x);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);}</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lf double</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int &gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,l,r) for(int i=l,i##_r=r;i&lt;=i##_r;i++)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> lf eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls son[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs son[x][1]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> fa[maxn],son[maxn][<span class="number">2</span>],sz[maxn],rev[maxn],sta[maxn],top,n,m,col[maxn],cov[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{sz[x]=sz[ls]+sz[rs]+<span class="number">1</span>;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">which</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> son[fa[x]][<span class="number">1</span>]==x;}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{<span class="keyword">return</span> son[fa[x]][<span class="number">0</span>]==x||son[fa[x]][<span class="number">1</span>]==x;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_cov</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{col[x]=cov[x]=v;}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_rev</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{swap(ls,rs);rev[x]^=<span class="number">1</span>;}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(cov[x]) push_cov(ls,cov[x]),push_cov(rs,cov[x]),cov[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rev[x]) rev[x]=<span class="number">0</span>,push_rev(ls),push_rev(rs);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> y=fa[x],z=fa[y],w=which(x);</span><br><span class="line">    <span class="keyword">if</span>(nrt(y)) son[z][son[z][<span class="number">1</span>]==y]=x;</span><br><span class="line">    fa[x]=z,fa[y]=x,fa[son[x][w^<span class="number">1</span>]]=y,son[y][w]=son[x][w^<span class="number">1</span>],son[x][w^<span class="number">1</span>]=y;</span><br><span class="line">    update(y),update(x);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> t=x;<span class="keyword">while</span>(nrt(t)) sta[++top]=t,t=fa[t];</span><br><span class="line">    sta[++top]=t;<span class="keyword">while</span>(top) pushdown(sta[top--]);</span><br><span class="line">    <span class="keyword">while</span>(nrt(x)) {</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">if</span>(nrt(y)) rotate(((son[z][<span class="number">1</span>]==y)^(son[y][<span class="number">1</span>]==x))?x:y);</span><br><span class="line">        rotate(x);</span><br><span class="line">    }update(x);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> {</span></span><br><span class="line">    <span class="keyword">int</span> t[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>{<span class="keyword">if</span>(!x) <span class="keyword">return</span> ;<span class="keyword">for</span>(;x&lt;=n+m;x+=x&amp;-x) t[x]+=v;}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ans=<span class="number">0</span>)</span> </span>{<span class="keyword">for</span>(;x;x-=x&amp;-x) ans+=t[x];<span class="keyword">return</span> ans;}</span><br><span class="line">}T;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;x;t=x,x=fa[x]) {</span><br><span class="line">        splay(x);</span><br><span class="line">        T.modify(col[x],-sz[ls]<span class="number">-1</span>);</span><br><span class="line">        rs=t;push_cov(ls,c);pushdown(ls);col[x]=c;</span><br><span class="line">        T.modify(c,sz[ls]+<span class="number">1</span>);update(x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">    access(x,<span class="number">0</span>);splay(x);push_rev(x);</span><br><span class="line">    fa[x]=y;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    splay(x);</span><br><span class="line">    <span class="keyword">int</span> res=T.query(col[x]<span class="number">-1</span>);</span><br><span class="line">    splay(x);res+=sz[rs]+<span class="number">1</span>;<span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];<span class="keyword">int</span> cnt;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    access(x,cnt),splay(x),push_rev(x),pushdown(x);</span><br><span class="line">    T.modify(cnt,<span class="number">-1</span>);push_cov(x,++cnt),sz[x]=<span class="number">1</span>,rs=<span class="number">0</span>;</span><br><span class="line">    T.modify(cnt,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    read(n),read(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++) read(x),read(y),link(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) up(i);</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++) printf("%d ",col[i]);puts("");</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);<span class="keyword">int</span> x,y;read(x);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'u'</span>) up(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'w'</span>) write(query(x));</span><br><span class="line">        <span class="keyword">else</span> read(y),write(query(x)&lt;query(y)?x:y);</span><br><span class="line">        <span class="comment">// if(s[1]=='u') {for(int i=1;i&lt;=n;i++) printf("%d ",col[i]);puts("");}</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>交互</tag>
        <tag>kmp</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
</search>
